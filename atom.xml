<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>XJHui&#39;s Blog</title>
  
  <subtitle>PluShine</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://plushine.cn/"/>
  <updated>2020-11-23T08:28:02.961Z</updated>
  <id>https://plushine.cn/</id>
  
  <author>
    <name>PluShine</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Git中级教程</title>
    <link href="https://plushine.cn/24775.html"/>
    <id>https://plushine.cn/24775.html</id>
    <published>2020-11-20T05:10:43.000Z</published>
    <updated>2020-11-23T08:28:02.961Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>本文章最初发布在 <a href="https://plushine.cn">XJHui’s Blog</a>，未经允许，任何人禁止转载！</p><p><font color="red" style="font-weight:700">注意：</font>最新修改版本已发布在 <a href="https://plushine.cn/24775.html">这里</a>，点击前往查看！</p><h1 id="关于笔记"><a href="#关于笔记" class="headerlink" title="关于笔记"></a>关于笔记</h1><ol><li>视频地址：<a href="https://www.bilibili.com/video/BV15J411973T?p=1">Git（中级）教程（12h深入掌握git）(28p)</a></li><li>学前基础：<ul><li>linux</li><li>github</li></ul></li><li>学后技能：<ul><li>git底层、高层命令</li><li>git分支、存储、后悔药、标签</li><li>git团队协作、Pull Request</li></ul></li></ol><h1 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h1><h2 id="集中式-svn"><a href="#集中式-svn" class="headerlink" title="集中式(svn)"></a>集中式(svn)</h2><ol><li><p>原理：服务器存放项目的所有版本，工作时从服务器下载项目最新版本，工作完成后将代码提交到服务器</p></li><li><p>原理图：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/10/27/b206f8c4bdb2d6f5dbd2b623fe120e69.png" width="70%"/></li></ol><h2 id="分布式-git"><a href="#分布式-git" class="headerlink" title="分布式(git)"></a>分布式(git)</h2><ol><li><p>原理：每台电脑中都存放了项目的所有版本，即使服务器故障也不会影响工作更不会将丢失项目</p></li><li><p>原理图：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/10/27/ec58da5fa6ff1b06991d7cb1a8a6b2e2.png" width="70%"/></li></ol><h2 id="差异比较"><a href="#差异比较" class="headerlink" title="差异比较"></a>差异比较</h2><ol><li><p>存储方式：svn存储版本差异，git存储所有版本</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/19s/60e5fac332de40bd7555eef38f9efdeb.png" width="70%"/><p>注意：git是先压缩后存储，尽管存储占用比svn大，但不会大太多</p></li><li><p>安全性：</p><ul><li>svn：工作时只会下载项目最新版本，如果服务器存储故障，就无法从员工电脑恢复项目所有版本</li><li>git：每位员工电脑上都有项目的所有版本，即使服务器存储故障，任意一位员工都能恢复整个项目</li></ul></li><li><p>版本回退速度：</p><ul><li>svn：存储的是版本差异，每回退一个版本都需要打一次补丁，导致回退速度慢</li><li>git：存储所有版本，只要找到该版本对应的提交对象，就可直接回退到该版本</li></ul></li><li><p>服务器故障时：</p><ul><li>svn：新写的代码不满意，不能回退到初始版本</li><li>git：本地操作不受服务器限制，可任意提交、回退</li></ul></li><li><p>总结：</p><ul><li>svn：存储占用小</li><li>git：安全、高效</li></ul></li></ol><h1 id="git"><a href="#git" class="headerlink" title="git"></a>git</h1><h2 id="简史"><a href="#简史" class="headerlink" title="简史"></a>简史</h2><ol><li><p>创始人：Linus Benedict Torvalds（林纳斯·托瓦兹）</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/20/6d276f08504285bb2bb5cd2296de4179.png" width="70%"/></li><li><p>git起源：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/10/28/febded7eba7d7f763042f3143a6e92b6.png" width="70%"/></li></ol><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ol><li><p>下载访问： <a href="https://xjhui.lanzoux.com/iap7Odtezyf，感谢：蓝奏云">https://xjhui.lanzoux.com/iap7Odtezyf，感谢：蓝奏云</a></p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/10/28/1de7c1722930944648b04fed1d67d29e.png" width="70%"/><p>注意：如果与您的电脑版本不匹配，请访问：<a href="https://git-scm.com/download/win">https://git-scm.com/download/win</a> 下载指定版本</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/10/28/567e1ec43892b8c7a24665f01c8b16a1.png" width="70%"/></li><li><p>安装：一路next</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/20/61641f7278d1036c94e023f806b8eee3.png" width="50%"/></li><li><p>验证安装：桌面右键，出现框选内容代表安装成功</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/10/28/dcedc988921b8a572b344e2a5d946f08.png" width="70%"/></li></ol><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><ol><li><p>命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init  # 初始化一个git仓库</span><br></pre></td></tr></table></figure></li><li><p>案例：在/workspace下初始化一个git仓库</p><ul><li><p>文件夹内右键选择 <code>Git Bash Here</code>：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/02/b598c9b0cbd0bdd9880f5f4920d43298.png" width="70%"/></li><li><p>输入指令： <code>git init</code>：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/02/17dca36e4c1fb453e27dbf9ca1ca8fb2.png" width="70%"/><p>注意：.git为隐藏文件，若不显示请点击 <code>查看</code> -&gt; 勾选 <code>隐藏的项目</code> </p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/19s/07575091edd6adf64848a7cf01f462d5.png" width="70%"/></li></ul></li><li><p>git文件（.git文件夹内）：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/02/449bac2bd15fb3b6b10ca0d33dc815e6.png" width="70%"/><p>文件功能：</p><ul><li>hooks：存放钩子文件（提交代码前、后要做的事，例如检查代码规范）</li><li>info：说明哪些文件不需要管理</li><li>objects：对象库（类似对象库，存放git对象、树对象、提交对象）</li><li>refs、HEAD：分支相关内容</li><li>description：仓库描述信息</li></ul></li></ol><h2 id="git区域"><a href="#git区域" class="headerlink" title="git区域"></a>git区域</h2><ol><li><p>三个区域：</p><ul><li>工作区：就是你在电脑里能看到的目录</li><li>暂存区：一般存放在 .git 目录下的 index 文件（.git/index）中，所以我们有时也把暂存区叫作索引（index）</li><li>版本库：工作区有一个隐藏目录.git</li></ul><p>注意：暂存区是存在于版本库中的，而版本库是存在于工作区的</p></li><li><p>关系图：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/03/085586a0f984f0f70d5cf16e4f0ea97e.png" width="70%"/></li></ol><h1 id="git底层概念"><a href="#git底层概念" class="headerlink" title="git底层概念"></a>git底层概念</h1><blockquote><p>底层概念代码不需要掌握，但一定得懂</p></blockquote><h2 id="git对象"><a href="#git对象" class="headerlink" title="git对象"></a>git对象</h2><ol><li><p>定义：通过 <code>git hash-object -w</code> 命令在objects目录下生成的对象都是git对象</p></li><li><p>生成git对象的方法：</p><ul><li><p>方法一：将字符串直接写入对象库</p><ul><li><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &#39;test content&#39; | git hash-object -w --stdin</span><br></pre></td></tr></table></figure><p>参数功能：</p><ul><li>-w：返回hash值并写入对象库，若不添加该参数则只返回hash值</li><li>–stdin：标准输入流读取字符串，不可省略</li></ul><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/03/34afcb75d2f8dfb6edd9038a5c110f9c.png" width="70%"/></li><li><p>查看value（字符串）值：</p><ul><li><p><code>cat</code> 命令：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/03/9500df6a1dd9de6a9a4039cb7e6e7f24.png" width="70%"/></li><li><p><code>git cat-file -p</code>  命令：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/03/cfb0deb5135afdb665e87c8177ad7baa.png" width="70%"/></li><li><p><code>git cat-file -t</code> 命令可查看git对象的类型：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/03/ca6344aab567994bab6b249892ad5feb.png" width="70%"/></li></ul></li></ul></li><li><p>方法二：将文本文件中的字符串写入对象库</p><ul><li><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git hash-object -w 文件名</span><br></pre></td></tr></table></figure><p>参数功能：</p><ul><li>-w：返回hash值并写入对象库，若不添加该参数则只返回hash值</li><li>文件名：包含文本内容的文件，不可省略</li></ul></li><li><p>案例1：使用 <code>git hash-object</code> 命令将test.txt文件（v1版本）内容写入到对象库</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/03/646934e501849867c8d9b2520ae93f00.png" width="70%"/><p>命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git hash-object -w test.txt</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/03/48599e1ebecd03007278fa42abf3e289.png" width="70%"/></li><li><p>案例2：修改test.txt文件（v2版本），并再次写入对象库</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/03/e9a5f9f8b7a2079bb905bc7973daceb9.png" width="70%"/><p>命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git hash-object -w test.txt</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/03/0f7499991ea7c0b287d2d8091a7e5afa.png" width="70%"/><p>使用 <code>find .git/objects/ -type f</code> 命令查看所有git对象：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/03/e1e8be1b37bdb00456433fbaf9763e7b.png" width="70%"/></li></ul></li></ul></li><li><p>git对象总结：git对象仅能存储文件的内容，对文件名称的存储却无能为力</p></li></ol><h2 id="树对象"><a href="#树对象" class="headerlink" title="树对象"></a>树对象</h2><ol><li><p>定义：解决git对象无法存储文件名称的问题，创建树对象需要先将git对象放入暂存区</p></li><li><p>将git对象放入暂存区：</p><ul><li><p>放入前查看缓存区内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git ls-files -s</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/20s/b53fb9df77a4314d4959c4106be4394f.png" width="70%"/></li><li><p>将git对象放入暂存区：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git update-index --add --cacheinfo 100644 a0423896973644771497bdc03eb99d5281615b51 test.txt</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/03/ad924c58a7b8e91cf5d4a2241f309eb5.png" width="70%"/><p>参数解释：</p><ul><li>–add：文件首次加入暂存区时需要添加该参数</li><li>–cacheinfo：要添加的git对象位于git对象库中，而不是位于当前目录下</li><li>文件类型：100644（ 普通文件）、100755（可执行文件）、120000（符号链接）</li></ul></li><li><p>放入后再次查看缓存区内容：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/03/60fcd663b88168136eb2676dc15cc777.png" width="70%"/></li></ul></li><li><p>生成树对象：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git write-tree</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/20s/6ed644ddc30ac01b8638e8e8154c6001.png" width="70%"/><p>查看树对象类型：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/03/46ee0fba3cccb8fa5bafd468e9538033.png" width="70%"/><p>注意：树对象也会被存储到objects目录下：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/03/5fbbd6af63049e462c60a7b27a4ebd61.png" width="70%"/><p>git、树对象差异：git对象代表文件的一次次版本，树对象代表项目的一次次版本</p></li><li><p>树对象的不足：</p><ul><li>objects文件中放置了git对象和树对象，很难区分开来</li><li>有git、树对象但不知道提交人、提交时间、版本差异</li></ul></li></ol><h2 id="提交对象"><a href="#提交对象" class="headerlink" title="提交对象"></a>提交对象</h2><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/20s/0c3f5b7ac1901b2155c48ee50da78d25.png" width="50%"/><ol><li><p>概念：</p><ul><li>创建树对象后就要创建一个提交对象，用来存储该树对象的具体信息（提交人、时间、注释等信息）</li><li>每个提交对象分别指向一个树对象和一个父提交对象（第一个提交对象仅指向一个树对象）</li></ul></li><li><p>创建提交对象：</p><ul><li><p>创建第一个提交对象：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &#39;注释&#39; | git commit-tree 树对象</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/03/30ea6bdbbe14dd85211679c1a5ba1c41.png" width="70%"/><p>注意：第一个提交对象不需要指向父提交对象，但其他提交对象必须指向父提交对象</p></li><li><p>创建其它提交对象：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &#39;注释&#39; | git commit-tree 树对象 -p 父提交对象</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/03/9740faa72dff75a4235c671c4fdd9a9f.png" width="70%"/><p>查看提交对象内容：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/20s/e350d2d85d6ec73cd3d6241f420567b8.png" width="70%"/></li></ul></li></ol><h2 id="命令总结"><a href="#命令总结" class="headerlink" title="命令总结"></a>命令总结</h2><blockquote><p>命令中所有对象（git、树、提交对象）都要用对应hash值代替</p></blockquote><ol><li>git init：初始化git仓库</li><li>生成git对象：<ul><li>echo “字符串” | git hash-object -w –stdin：将字符串写入对象库</li><li>git hash-object -w 文件名：将文件内容写入对象库</li></ul></li><li>生成树对象：<ul><li>git update-index –add –cacheinfo 文件类型 git对象：将git对象存入暂存区</li><li>git write-tree：生成树对象</li></ul></li><li>生成提交对象：<ul><li>echo “注释” | git commit-tree 树对象：生成第一个提交对象</li><li>echo “注释” | git commit-tree 树对象 -p 父提交对象：生成其它提交对象</li></ul></li><li>查看对象信息：<ul><li>git cat-file -t 对象：查看对象类型</li><li>git cat-file -p 对象：查看对象内容</li><li>git ls-file -s：查看暂存区内容</li><li>find .git/objects/ -type f：查看对象库中的所有对象</li></ul></li></ol><h1 id="git高层命令"><a href="#git高层命令" class="headerlink" title="git高层命令"></a>git高层命令</h1><h2 id="最基本流程"><a href="#最基本流程" class="headerlink" title="最基本流程"></a>最基本流程</h2><ol><li><p>git init：初始化git仓库</p></li><li><p>git add ./：给所有文件生成git对象并添加到暂存区</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git hash-object -w 文件名  # 等同于该命令被执行n次（n&#x3D;文件数目）</span><br><span class="line">git update-index --add --cacheinfo 文件类型 git对象</span><br></pre></td></tr></table></figure><p>注意：暂存区在版本库中，所以执行git add命令后git对象先进入版本库再进去暂存区</p></li><li><p>git commit -m “提交备注”：生成树对象和提交对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git write-tree  # 生成树对象</span><br><span class="line">echo &quot;备注&quot; | git commit-tree 树对象 -p 父提交对象  # 生成提交对象</span><br></pre></td></tr></table></figure></li></ol><h2 id="查看文件"><a href="#查看文件" class="headerlink" title="查看文件"></a>查看文件</h2><ol><li><p>文件状态：未跟踪、已跟踪（已暂存、已提交、已修改）</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/11/37250eb2ea47e07f74bf6b14e269df17.png" width="70%"/></li><li><p>git status</p><blockquote><p>查看文件状态（未跟踪、已跟踪（已暂存，已提交，已修改））</p></blockquote><ul><li><p>查看未跟踪文件的状态：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;hello world!&quot; &gt; laofu.txt</span><br><span class="line">git status  # 查看文件状态</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/11/3ab95e072629a18a33b51414234a07a0.png" width="70%"/><p>注意：新建的文件为未跟踪状态</p></li><li><p>查看已跟踪文件状态</p><ul><li><p>已暂存：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add laofu.txt  # 将文件放入暂存区，add后也可跟.&#x2F;或文件夹</span><br><span class="line">git status  # 查看文件状态</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/11/052a17cb6b69af9a4982e74cba076b51.png" width="70%"/></li><li><p>已提交：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;提交注释&quot;  # 将暂存区文件提交到版本库</span><br><span class="line">git status  # 查看文件状态</span><br></pre></td></tr></table></figure><p> 运行结果：</p> <img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/11/87f02482cbb4f87671ce492b831e32ac.png" width="70%"/><p> 注意：</p><ul><li><p>如果注释内容过多，可以使用git commit 命令在文件中键入注释：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/11/1d2f7f56dd7fbf98749b8659ce183d0d.png" width="70%"/></li><li><p>对已跟踪文件，使用git commit命令时添加参数 -a，可跳过git add命令，直接提交到版本库</p></li></ul></li><li><p>已修改</p><ul><li><p>查看已提交的文件修改后状态：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim laofu.txt  # 修改已提交文件的内容</span><br><span class="line">git status  # 查看文件状态</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/11/7edeaefc73b1ebe7535f4adad4183ec6.png" width="70%"/><p>注意：虽然改文件未被暂存，但已被跟踪，可以直接使用 git commit -m 命令提交到版本库</p></li><li><p>查看已暂存的文件修改后的状态：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .&#x2F;  # 将文件添加到暂存区</span><br><span class="line">vim laofu.txt  # 修改已暂存文件的内容</span><br><span class="line">git status  # 查看文件状态</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/11/bd197806a674bbb7e8a13743be61083e.png" width="70%"/><p>注意：已暂存的文件修改后会出现两种状态，必须再次执行git add命令，否则提交的内容还是上次暂存的版本</p></li></ul></li></ul></li></ul></li><li><p>git diff</p><blockquote><p>批量查看已跟踪文件的状态</p></blockquote><ul><li><p>查看已跟踪的文件中哪些修改需要暂存：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim laofu.txt  # 修改文件，将其变为未暂存状态</span><br><span class="line">git diff  # 查看哪些更新需要暂存</span><br></pre></td></tr></table></figure><p> 运行结果：</p> <img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/11/daa0bffc3dbf499f6b4f3d079574276e.png" width="70%"/></li><li><p>查看已跟踪的文件中哪些暂存需要提交：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add .&#x2F;  # 将文件添加到暂存区</span><br><span class="line">git diff --cached  # 查看哪些暂存需要提交</span><br></pre></td></tr></table></figure><p> 运行结果：</p> <img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/11/42713540b7ad165404f6aac5dbc885f1.png" width="70%"/></li></ul></li><li><p>查看提交记录</p><ul><li><p>详细显示提交记录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log  # 查看提交记录（包含提交对象hash值、提交者、时间等）</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/12/1e50ae7b98cf79d353fd025454dde38d.png" width="70%"/><p>注意：如果内容过多，可以按上下键翻页查看，按q键退出</p></li><li><p>单行显示提交记录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log  --oneline  # 单行显示每条提交记录</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/12/ed01922eac40dd72b8d55913bf84fa71.png" width="70%"/></li><li><p>显示提交记录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log --oneline --decorate --graph --all</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/19s/b3dd617dfd34aa2d668301e444f4197f.png" width="70%"/></li></ul></li></ol><h2 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h2><ol><li><p>定义：将某个文件从工作区中删除</p></li><li><p>案例1：使用rm命令删除laofu.txt文件后再使用 <code>git status</code> 命令查看文件状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rm -rf laofu.txt  # 删除文件</span><br><span class="line">ls  # 查看文件目录</span><br><span class="line">git status  # 查看文件状态</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/11/29a5ecad4f1d81928195e09adc4f7d88.png" width="70%"/><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add .&#x2F;  # 将修改加入暂存区</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/19s/f522386f888cdb2a3570e441bdc3ff7e.png" width="70%"/></li><li><p>案例2：使用 <code>git rm</code> 命令删除已跟踪的文件，比较与rm的区别</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/12/3c37641eb837bd427263f30c09eeff26.png" width="70%"/></li><li><p>比较 <code>git rm</code> 和 <code>rm</code> ：<code>git rm</code> 与 <code>rm -rf</code>  + <code>git add</code> 作用相同</p></li></ol><h2 id="修改文件"><a href="#修改文件" class="headerlink" title="修改文件"></a>修改文件</h2><ol><li><p>定义：将工作区文件重命名后添加到暂存区</p></li><li><p>案例1：将laoliu.txt重命名为laoliuliu.txt后将其添加到暂存区，查看文件状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mv laoliu.txt laoliuliu.txt  # 文件重命名</span><br><span class="line">git status  # 查看重命名后的文件状态</span><br><span class="line">git add .&#x2F;  # 将改名后的文件添加到暂存区</span><br><span class="line">git status  # 查看重新添加到暂存区后文件的状态</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/11/f993a6db0b4758741708769f154b4da2.png" width="70%"/></li><li><p>案例2：使用 <code>git mv</code> 命令重命名已跟踪的文件，比较与mv的区别</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git mv test.txt tests.txt  # 文件重命名</span><br><span class="line">git status  # 查看文件状态</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/12/798d7306f9f8c5da27e33d92b5198aa7.png" width="70%"/></li><li><p>比较 <code>git mv</code> 和 <code>mv</code> ：<code>git mv</code> 与 <code>mv</code>  + <code>git add</code> 作用相同</p></li></ol><h1 id="git分支操作"><a href="#git分支操作" class="headerlink" title="git分支操作"></a>git分支操作</h1><h2 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h2><ol><li><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch 分支名  # 在当前分支创建分支</span><br><span class="line">git branch 分支名 提交对象  # 创建分支并指向某个提交对象</span><br></pre></td></tr></table></figure></li><li><p>案例1：创建一个名为damu的分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch damu</span><br><span class="line">git log --oneline  # 查看当前分支</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/13/bb429d154021a4dae7dbbdd624600541.png" width="70%"/><p>注意：HEAD所指向的分支就是当前所在分支</p></li><li><p>案例2：在hash值为e319357的提交对象上创建dev分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch dev e319357  # 创建名为dev的分支，指向提交对象e319357</span><br><span class="line">git log --oneline  # 查看当前分支信息</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/20/c822953443f6345c5874899f6615973d.png" width="70%"/><p>创建dev分支后，工作区并没有dev分支对应的文件：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/13/517ca86544b2435fdecb97d414dfb90e.png" width="70%"/><p>注意：想要在工作区显示某个分支的文件，就要将当前分支切换到该分支</p></li></ol><h2 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h2><ol><li><p>用途：当想给项目添加一个新功能时，就可以新建一个分支</p><ul><li>对新分支代码满意：将新分支合并到master分支，从而在项目中添加该新功能</li><li>对新分支代码不满意：回退到master分支</li></ul></li><li><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout 分支名  # 切换分支</span><br><span class="line">git checkout -b 分支名  # 创建并切换到该分支</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>每次切换分支之前，都要保证当前分支是干净的（git status看一下，防止分支被污染）</li><li>切换分支会改变HEAD、暂存区、工作区（版本库内容不会改变，只会无限的增多）</li></ul></li><li><p>案例：切换当前分支到dev分支，并显示工作区文件目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git log --oneline  # 查看当前分支信息</span><br><span class="line">git checkout dev  # 切换分支为dev</span><br><span class="line">ll  # 查看工作区文件目录</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/13/cf0b182d490cef019ae1f602df5f0cfe.png" width="70%"/><p>分支切换到dev后，由于master分支在dev分支的后面，导致使用 <code>git log</code> 命令无法显示：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/13/18c420cae3d9be800a5e47e4d4d9b5c5.png" width="70%"/><p>可以使用 <code>git log --oneline --decorate --graph --all</code> 显示完整分支信息：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/13/ab461e1b4089c8c995b0d54603dc6748.png" width="70%"/></li></ol><h2 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h2><ol><li><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -D 分支名  # 删除指定分支</span><br></pre></td></tr></table></figure><p>注意：若要删除的分支为当前所在分支则必须先切换到其它分支，不可以自己删自己</p></li><li><p>案例：删除分支dev</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git log --oneline  # 查看当前分支</span><br><span class="line">git checkout master  # 切换分支到master</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/13/5803fdb4753198d6f394fee039bcccd0.png" width="70%"/><p>注意：切换到其它分支前要保证分支干净，但上图未做判断（git status）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">   git log --oneline  # 再次查看当前分支</span><br><span class="line">git branch -D dev  # 删除dev分支</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/13/d6c01be3bc0bd254bc1e19f487514fa9.png" width="70%"/><p>注意：其实删除分支的参数是 <code>-d</code> ，<code>-D</code> 是强制删除某个分支</p></li></ol><h2 id="查看分支"><a href="#查看分支" class="headerlink" title="查看分支"></a>查看分支</h2><ol><li><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git log --oneline  # 查看当前分支</span><br><span class="line">git branch  # 打印分支列表</span><br><span class="line">git branch -v  # 查看每个分支最后的提交信息（git log也能查看，但不够直观）</span><br></pre></td></tr></table></figure></li><li><p>案例：</p><ul><li><p>查看当前所在分支：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log --oneline  # 查看当前分支</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/19s/664a95793e6a25c00eab9a718e55da5d.png" width="70%"/><p>注意：HEAD所指向的分支就是当前所在分支</p></li><li><p>打印分支列表：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch  # 打印分支列表</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/13/a4d19cb106dbc31968695464724ef297.png" width="70%"/></li><li><p>查看每个分支最后的提交信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch -v  # 显示每个分支最后的提交信息</span><br><span class="line">git log --oneline  # 显示当前版本信息</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/13/07b01952600ec6b2fc7bb716baff1979.png" width="70%"/></li></ul></li></ol><h2 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h2><ol><li><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge 分支名  # 将当前分支与某分支合并</span><br></pre></td></tr></table></figure></li><li><p>案例1：将damu分支合并到master分支（快速合并）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git log --oneline  # 查看当前分支</span><br><span class="line">git status  # 查看文件状态</span><br><span class="line">git checkout master  # 切换到master分支</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/13/406ed5e25d265d4c2252c82df07bfe14.png" width="70%"/><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git merge damu  # 将damu分支合并到master分支</span><br><span class="line">git log --oneline  # 再次查看当前分支</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/13/e8b406fbc1feb9439539f2b0da9cf503.png" width="70%"/></li><li><p>案例2：模拟并解决合并冲突（典型合并）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b &quot;ct-test&quot;  # 创建并切换到新分支</span><br><span class="line">ll  # 查看文件目录</span><br><span class="line">vim a.txt  # 修改a.txt</span><br><span class="line">git add .&#x2F;</span><br><span class="line">git commit -m &quot;2 commit for a.txt v2 for ct-test&quot;</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/13/92e55443f5f28aac357aa2e433f43000.png" width="70%"/><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git status  # 切换分支前，确保分支干净</span><br><span class="line">git checkout master  # 切换分支到master</span><br><span class="line">vim a.txt  # 修改a.txt</span><br><span class="line">git commit -am &quot;3 commit for a.txt v2 for master&quot;</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/13/b58ba0a21a3ab09eda16e670c126ac54.png" width="70%"/><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge ct-test  # 将ct-test分支合并到master</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/13/8811d1f4a063e949d3fa9bd481fa96dd.png" width="70%"/><p>注意：上图中能看到是a.txt文件冲突</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim a.txt  # 查看冲突的文件</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/13/837e036a8a30a66f8e735ebadba55110.png" width="70%"/><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add .&#x2F;  # 告知git冲突已经解决</span><br><span class="line">git commit -m &quot;4 commit for fix ct&quot;</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/13/d733fed59b0a92eae8a05a270dbbb433.png" width="70%"/></li></ol><h2 id="其它内容"><a href="#其它内容" class="headerlink" title="其它内容"></a>其它内容</h2><ol><li><p>分支模式</p><ul><li>长期分支：master</li><li>特性分支：要实现某个功能而开的分支</li></ul></li><li><p>分支本质：提交对象</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/13/9e1041d70455ddc5600677b44a77cf28.png" width="70%"/><p>注意：每次提交后，分支对应的提交对象都会改变</p></li><li><p>分支原理：</p><ul><li><p>HEAD：存放其指向的分支名</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/13/e6ed5bc9be8a5f6726d5ac3a18fedba2.png" width="70%"/></li><li><p>.git/refs/heads：存放该分支对应的提交对象</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/14/a43db9b9ddb20112a164220b78ef8192.png" width="70%"/><p>注意：项目中的所有分支都会被存放在.git/refs/heads/master目录下</p></li></ul></li><li><p>配别名：</p><ul><li><p>将命令git status配别名为git st：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global alias.st &quot;status&quot;  # 总结配别名的规律</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/14/80ebcc5dd8487dccee9d9a7e1f3f2b3b.png" width="70%"/><p>注意：当双引号中只有一个单词时，可将双引号省略</p></li><li><p>将命令 git log –oneline –decorate –graph –all 配别名为 git lol：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global alias.lol &quot;log --oneline --decorate --graph --all&quot;</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/14/a235bdb2d4aa5130177ab33dea37128e.png" width="70%"/></li></ul></li></ol><h1 id="git存储"><a href="#git存储" class="headerlink" title="git存储"></a>git存储</h1><ol><li><p>应用场景：要切换到其它分支，但当前分支的工作还没有完成，就可以利用git存储</p></li><li><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git stash list  # 查看当前分支下存储栈内容</span><br><span class="line">git stash  # 保存存储，将当前分支文件存入栈中</span><br><span class="line">git stash pop  # 应用栈顶存储，并将栈顶元素删除</span><br><span class="line">git stash apply  # 仅应用栈顶存储</span><br><span class="line">git stash drop 元素名称  # 仅删除栈中指定存储</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>存储后当前分支会变成干净的分支，可以切换到其它分支（其本质还是做了一次提交，只是不计入log）</li><li>栈中一般只存储一次，否则操作会很复杂</li></ul></li><li><p>案例：在damu分支中修改a.txt文件，存储damu分支后切换到master分支，再切换到damu分支并恢复修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git branch  # 查看当前所在分支</span><br><span class="line">vim a.txt  # 修改a.txt内容</span><br><span class="line">git status  # 查看文件状态</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/14/5ca3977c91de7789cd27fd0689a0f275.png" width="70%"/><p>注意：当前分支不干净，不能直接切换到master分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git stash  # 通过存储当前分支文件，将当前分支变为干净分支</span><br><span class="line">git stash list # 查看存储栈</span><br><span class="line">git status  # 查看文件状态</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/14/39b31539475b5f27b6b6525f2ede9f42.png" width="70%"/><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git checkout master  # 切换分支到master</span><br><span class="line">git checkout damu  # 切换分支到damu</span><br><span class="line">git stash list  # 查看当前分支存储内容</span><br><span class="line">git stash pop  # 应用栈顶存储，并删除栈顶内容</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/14/d4a8db15f483972cbf6bad529803bf7d.png" width="70%"/></li></ol><h1 id="git后悔药"><a href="#git后悔药" class="headerlink" title="git后悔药"></a>git后悔药</h1><h2 id="工作区"><a href="#工作区" class="headerlink" title="工作区"></a>工作区</h2><blockquote><p>撤销修改</p></blockquote><ol><li><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout --文件名  # 撤销修改</span><br></pre></td></tr></table></figure></li><li><p>案例：master分支下修改a.txt文件后撤销修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git status  # 查看文件状态</span><br><span class="line">git checkout -- a.txt  # 撤销修改</span><br><span class="line">git status  # 再次查看文件状态</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/14/824793fa8ec149ff32a2f8a8338dff4c.png" width="70%"/><p>注意：git只能撤销已跟踪的文件</p></li></ol><h2 id="暂存区"><a href="#暂存区" class="headerlink" title="暂存区"></a>暂存区</h2><blockquote><p>撤销暂存</p></blockquote><ol><li><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git restore --staged 文件名  # 撤销暂存</span><br></pre></td></tr></table></figure></li><li><p>案例：修改a.txt内容并将其添加到暂存区后撤销暂存</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim a.txt  # 修改文件内容</span><br><span class="line">git add .&#x2F;  # 将文件添加到暂存区</span><br><span class="line">git status  # 查看文件状态</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/14/e74d2d67fdeb72721e0eaff317d881d4.png" width="70%"/><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git restore --staged a.txt  # 撤销暂存</span><br><span class="line">git status  # 查看文件状态</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/20/cbe222cba47dc4aa76792ad6fd0213de.png" width="70%"/></li></ol><h2 id="版本库"><a href="#版本库" class="headerlink" title="版本库"></a>版本库</h2><blockquote><p>撤销提交</p></blockquote><ol><li><p>场景：提交后发现注释错误，需要修改注释</p></li><li><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit --amend  # 撤销提交</span><br></pre></td></tr></table></figure></li><li><p>案例1：提交a.txt后修改注释内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;1 commit for a.txt v5&quot;  # 提交到版本库</span><br><span class="line">git lol  # 查看注释</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/14/8862b0a1d910ff17cee9c7ef834a6229.png" width="70%"/><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git commit --amend  # 撤销提交（修改注释）</span><br><span class="line">git lol  # 查看注释</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/14/4657f4c5ba2d506e380b5c27f372c397.png" width="70%"/></li><li><p>案例2：修改a.txt并将其提交到版本库，修改版本库中a.txt的内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim a.txt  # 修改a.txt文件内容</span><br><span class="line">git st  # 查看文件状态</span><br><span class="line">git commit -am &quot;1 commit for a.txt v6 50%&quot;  # 提交到版本库</span><br><span class="line">git lol  # 查看版本内容</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/15/c0363707db7f7cbd4ee277e519d7e687.png" width="70%"/><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim a.txt  # 再次修改a.txt文件内容</span><br><span class="line">git st  # 查看文件状态</span><br><span class="line">git add .&#x2F;  # 将修改后的a.txt文件添加到暂存区</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/15/29927e54ab1c7a3de2c34a3401f8e82d.png" width="70%"/><p>注意区分：</p><ul><li><p>若执行：git commit –amend</p><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/15/261f6e6b9df4c4c48c5e5dd9bfa090ee.png" width="70%"/></li><li><p>若执行：git commit -m “1 commit for a.txt v6 50%”</p><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/15/e317849c387da4db17c46cb364affb58.png" width="70%"/></li></ul><p>总结：</p><ul><li>使用 <code>git commit --amend</code> 命令会覆盖上次提交</li><li>使用 <code>git commit -m &quot;&quot;</code> 命令提交与上次提交没有关系</li></ul></li></ol><h2 id="reset三部曲"><a href="#reset三部曲" class="headerlink" title="reset三部曲"></a>reset三部曲</h2><h3 id="reset命令"><a href="#reset命令" class="headerlink" title="reset命令"></a>reset命令</h3><ol><li><p>作用：通过移动HEAD来实现版本回退</p></li><li><p>HEAD移动图示：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/15/aac63b8ad30816debca341a82a76f5d8.png" width="70%"/><p>注意：HEAD会带着分支移动，要与checkout（切换分支）区分开</p></li><li><p>参数：</p><ul><li>–soft：只更新版本库内容</li><li>–mixed：更新版本库、暂存区内容</li><li>–hard：更新版本库、暂存区内容</li></ul></li></ol><h3 id="–soft"><a href="#–soft" class="headerlink" title="–soft"></a>–soft</h3><ol><li><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --soft HEAD~【提交对象】  # 版本回退，并更新版本库内容；HEAD~表示上一次提交，也可使用提交对象</span><br></pre></td></tr></table></figure></li><li><p>案例：切换file.txt到上一次提交版本</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/15/10fb19ded6c63a0e2b71877fef774e2f.png" width="70%"/><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git lol  # 查看当前版本</span><br><span class="line">git reset --soft HEAD~  # 切换版本</span><br><span class="line">git lol  # 再次查看当前版本</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/15/644813827737cd93ddf96995916a5a79.png" width="70%"/><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cat file.txt  # 查看工作区内容</span><br><span class="line">git ls-file -s</span><br><span class="line">git cat-file -p git对象  # 查看暂存区内容</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/15/cbbf5fd88bcbfed4a5ca1acc2ecb7a21.png" width="70%"/><p>总结：–soft参数只会更新版本库内容，不会更新暂存区、工作区内容</p></li></ol><h3 id="–mixed"><a href="#–mixed" class="headerlink" title="–mixed"></a>–mixed</h3><ol><li><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset 【--mixed】 HEAD~【提交对象】  # 版本回退，并更新版本库、暂存区内容</span><br></pre></td></tr></table></figure></li><li><p>案例：切换file.txt到最后一次提交版本</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/15/282d84cf2239ab82de14285c5426e89f.png" width="70%"/><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git reflog  # 查看第三次提交的提交对象（git reflog能显示全部提交版本）</span><br><span class="line">git reset --mixed 提交对象  # 切换到最后一次提交</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/15/0396143a8c059767da7fce7cd8b428cc.png" width="70%"/><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git lol  # 查看版本库变化</span><br><span class="line">git ls-files -s</span><br><span class="line">git cat-file -p  git对象# 查看暂存区变化</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/15/3a1627ae3ae676e800754aa661deaf3e.png" width="70%"/><p>总结：–mixed参数会更新版本库、暂存区内容，不会更新工作区内容</p></li></ol><h3 id="–hard"><a href="#–hard" class="headerlink" title="–hard"></a>–hard</h3><ol><li><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard HEAD~【提交对象】  # 版本回退，并更新版本库、暂存区、工作区内容</span><br></pre></td></tr></table></figure></li><li><p>案例：切换file.txt到上一次提交版本</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/15/10fb19ded6c63a0e2b71877fef774e2f.png" width="70%"/><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard HEAD~  # 切换到上次提交</span><br><span class="line">cat file.txt  # 查看工作区变化</span><br><span class="line">git lol  # 查看版本库变化</span><br><span class="line">git ls-files -s</span><br><span class="line">git cat-file -p git对象  # 查看暂存区变化运行结果：</span><br></pre></td></tr></table></figure><p> 运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/15/786e471c840b046df2c1564a6f62a712.png" width="70%"/><p>总结：–hard参数会更新版本库、暂存区、工作区内容</p></li><li><p>区分checkout：</p><ul><li>checkout只动HEAD，–hard动HEAD而且带着当前分支一起走</li><li>checkout对工作目录是安全的，–hard是强制覆盖工作目录</li></ul></li></ol><h1 id="打tag"><a href="#打tag" class="headerlink" title="打tag"></a>打tag</h1><h2 id="标签列表"><a href="#标签列表" class="headerlink" title="标签列表"></a>标签列表</h2><ol><li><p>标签用途：想要发布项目的1.0.0版本，就可以打一个v1.0.0的标签（版本号）</p></li><li><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git tag  # 列出所有标签</span><br><span class="line">git tag -l &quot;1.1.0*&quot;  # 列出所有1.1.0以后的版本</span><br></pre></td></tr></table></figure></li></ol><h2 id="创建标签"><a href="#创建标签" class="headerlink" title="创建标签"></a>创建标签</h2><ol><li><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git tag v1.0.0  # 创建标签</span><br><span class="line">git tag v1.0.0 提交对象  # 给指定提交对象创建标签</span><br></pre></td></tr></table></figure></li><li><p>案例：创建一个v1.0的标签</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git tag v1.0  # 创建标签</span><br><span class="line">git lol  # 查看标签</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/15/ebfe3e4e3b0330d23c2910d79eaa3267.png" width="70%"/><p>注意：创建新的提交后，tag位置不会随HEAD</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/15/269f37b07ef2e1af2e162278fe672dcb.png" width="70%"/></li></ol><h2 id="查看标签"><a href="#查看标签" class="headerlink" title="查看标签"></a>查看标签</h2><ol><li><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git show v1.0  # 查看指定标签</span><br></pre></td></tr></table></figure></li><li><p>案例：查看标签v1.0</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git show v1.0</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/15/b9a6aecbe7bfbc957e100560cbbe7686.png" width="70%"/></li></ol><h2 id="删除标签"><a href="#删除标签" class="headerlink" title="删除标签"></a>删除标签</h2><ol><li><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag -d 标签名  # 删除指定标签</span><br></pre></td></tr></table></figure></li><li><p>案例：给第一次提交打标签v1.0</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git tag -d v1.0  # 删除原来的v1.0标签</span><br><span class="line">git lol  # 查看第一次提交的commitHash</span><br><span class="line">git tag v1.0 提交对象  # 给指定提交对象打v1.0标签</span><br><span class="line">git lol  # 查看版本日志</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/15/4e9e4b4dce95a0a98e651632cc796926.png" width="70%"/></li></ol><h2 id="检出标签"><a href="#检出标签" class="headerlink" title="检出标签"></a>检出标签</h2><ol><li><p>用途：想查看、修改某个版本的文件内容</p></li><li><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout &quot;标签号&quot;  # 先切换到指定标签</span><br><span class="line">git checkout -b &quot;标签号&quot;  # 再给当前标签创建分支</span><br></pre></td></tr></table></figure><p>注意：如果仅执行 <code>git checkout &quot;标签号&quot;</code> 这个命令，会导致git处于“头”，“身”分离的状态</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/15/9a7ae972a5dc838c169c84d5e3cb98bb.png" width="70%"/></li></ol><h1 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h1><h2 id="项目经理"><a href="#项目经理" class="headerlink" title="项目经理"></a>项目经理</h2><ol><li><p>创建远程仓库</p><ul><li><p>登录github，点击右上角“+”，选择New repository：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/20s/4a32d3cefccb42c49614a17eead03dd1.png" width="70%"/></li><li><p>输入仓库信息：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/16/5bbc1a676aac1e96227279f0362d1938.png" width="70%"/></li><li><p>创建完成：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/16/6669578757574e9cc34e1692f5bba316.png" width="70%"/></li></ul></li><li><p>创建工作目录</p><ul><li><p>新建空白文件夹：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/16/f7d5172cde930a15e0ffde9a6f9d45ad.png" width="70%"/></li><li><p>输入命令，初始化仓库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init  # 初始化仓库</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/16/4ba47bb21287d883ec2c37881aa0b35c.png" width="70%"/></li></ul></li><li><p>为远程仓库配置别名、用户信息</p><ul><li><p>为远程仓库配置别名：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git remote -v  # 显示远程仓库别名和对应url</span><br><span class="line">git remote add 别名 url  # 添加一个新的远程仓库同时指定一个别名</span><br><span class="line">git remote rename 别名 新别名  # 重命名远程仓库</span><br><span class="line">git remote rm 别名  # 删除某个远程仓库</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/16/148d73882b9dfd560c1a7b90dfd70bb1.png" width="70%"/></li><li><p>配置用户信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --list  # 查看配置信息</span><br><span class="line">git config --global user.name &quot;XJHui&quot;</span><br><span class="line">git config --global user.email &quot;admin@mail.plushine.cn&quot;</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/16/2d806465fcf124bc1d203a6bf9e37457.png" width="70%"/></li><li><p>删除配置信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --list  # 查看配置信息</span><br><span class="line">git config --global --unset user.name  # 删除配置信息</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/20/99b3ad8b2a632cea5ad6212614e2caab.png" width="70%"/></li></ul></li><li><p>推送本地项目到远程仓库</p><ul><li><p>创建文件，提交到版本库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;damu.txt v1&quot; &gt; damu.txt</span><br><span class="line">git add .&#x2F;</span><br><span class="line">git commit -m &quot;1 commit for damu.txt v1 from taobao&quot;</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/20/fb48dfbd2a9125cabc4eda1d50853137.png" width="70%"/></li><li><p>将版本库内容推送到远程仓库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git lol  # 查看版本库</span><br><span class="line">git push 别名 分支名  # 将版本库内容推送到远程仓库</span><br></pre></td></tr></table></figure><p>运行结果：（下图提到的用户名和密码是github的用户名和密码，非git中所配置的用户信息）</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/16/1a4669a4dd18b7a5cb6fb6680b88d329.png" width="70%"/><p>推送成功：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/16/73eb996c61ba4a073a9ace06cecb587b.png" width="70%"/></li></ul></li><li><p>邀请成员</p><ul><li><p>进入项目设置-》Settings-》Manage access-》Invite a collaborator：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/16/ff858bb201e3570aac34770201c8be66.png" width="70%"/></li><li><p>输入用户名，搜索成员：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/20/31a9d842cae640567d6566ce54a951c3.png" width="70%"/></li><li><p>等待成员同意邀请：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/16/9fd64d180787eb29e543520f7c4794ba.png" width="70%"/><p>成员访问邀请链接：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/16/13333eed5ad92caf6b9643fde80ed65a.png" width="70%"/></li></ul></li></ol><h2 id="成员操作"><a href="#成员操作" class="headerlink" title="成员操作"></a>成员操作</h2><ol><li><p>克隆仓库到本地</p><ul><li><p>创建文件夹，克隆项目：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone url  # 克隆远程仓库</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/16/3f24cc526f8e84b67c7d8780ed438c82.png" width="70%"/><p>注意：</p><ul><li>克隆后会生成一个与远程仓库同名的文件夹存放项目文件</li><li>成员克隆项目前不需要执行 <code>git init</code> 命令</li></ul></li><li><p>查看克隆的项目：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd git-study  # 进入文件夹</span><br><span class="line">ll  # 查看文件目录</span><br><span class="line">cat damu.txt  # 查看文件内容</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/16/41282e2bd345204661e404358f9abbbb.png" width="70%"/></li><li><p>查看项目默认别名：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/16/2a63976fd3892f7c86b8383911755507.png" width="70%"/><p>注意：克隆下来的仓库别名默认为origin</p></li></ul></li><li><p>修改文件，推送提交：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;plushine.txt v1&quot; &gt; plushine.txt  # 新建文件</span><br><span class="line">git add .&#x2F;</span><br><span class="line">git commit -m &quot;2 commit for plushine.cn v1 from plushine&quot;</span><br><span class="line">git push origin master  # 推送到远程仓库</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/16/9adcbb6b5aff7c6c50d979855e5a9437.png" width="70%"/></li><li><p>补充：本地分支、远程分支、跟踪分支（远程跟踪分支，本地分支和远程分支之间的媒介）</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/20/07b3b2a9a613eb6b3bfebca6cdce147a.png" width="70%"/></li></ol><h2 id="更新内容"><a href="#更新内容" class="headerlink" title="更新内容"></a>更新内容</h2><ol><li><p>场景：当团队中其它成员向远程仓库中提交了新的代码，就需要将自己电脑上的内容更新</p></li><li><p>案例：更新项目经理电脑上的内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ll  # 查看文件列表</span><br><span class="line">git remote -v  # 查看别名</span><br><span class="line">git fetch 别名  # 内容会更新到跟踪分支上</span><br><span class="line">ll  # 再次查看文件列表</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/16/8df2c4f0ead892c9a676384d68ca0c2c.png" width="70%"/><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git status  # 切换分支前保证分支干净</span><br><span class="line">git checkout  跟踪分支  # 切换当前分支到跟踪分支</span><br><span class="line">ll  # 查看文件目录</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/16/3da90e668764ee73a3b075caf3003c84.png" width="70%"/><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git checkout master  # 切换分支到master</span><br><span class="line">git merge taobao&#x2F;master  # 将跟踪分支内容合并到本地分支</span><br><span class="line">ls  # 查看文件目录</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/20/44e3afeccce79bdc16049910ec615b8e.png" width="70%"/></li></ol><h2 id="push和pull"><a href="#push和pull" class="headerlink" title="push和pull"></a>push和pull</h2><ol><li><p>如果本地分支跟踪了远程跟踪分支就可以直接使用git push和git pull命令上传和拉取文件，否则：</p><ul><li>上传：git push 别名 分支名</li><li>拉取：git fetch 别名，git merge 远程跟踪分支</li></ul></li><li><p>判断是否跟踪：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -vv  # 查看本地分支是否跟踪远程跟踪分支</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/17/b59cc19f61a9cac41922519452f41c4a.png" width="70%"/><p>注意：上图中存在联系即代表已跟踪，不存在联系代表未跟踪</p></li><li><p>如何让本地分支跟踪远程跟踪分支</p><ul><li><p>clone仓库时本地分支会自动跟踪远程跟踪分支（成员可直接执行 git push 和 git pull 命令）</p></li><li><p>在新建分支时，可以让本地分支跟踪指定的远程跟踪分支：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b 本地分支名 跟踪分支名  # 新建本地分支，并让本地分支跟踪远程跟踪分支</span><br><span class="line">git checkout --track 远程跟踪分支名  # 新建与远程跟踪分支同名的本地分支，并让本地分支跟踪远程跟踪分支</span><br></pre></td></tr></table></figure><p>注意：存在远程跟踪分支时才能使用该命令，可以使用 <code>git fetch</code> 命令生成远程跟踪分支</p></li><li><p>让已存在的本地分支跟踪远程跟踪分支：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -u 远程分支名</span><br></pre></td></tr></table></figure><p>注意：同时存在本地分支、远程跟踪分支时才能使用该命令（git lol判断是否存在）</p></li></ul></li><li><p>案例：a、b两个文件夹分别代表团队项目经理和成员，模拟使用 git pull 和 git push 命令</p><ul><li><p>a中创建分支zdy和文件zdy.txt：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b zdy  # 创建并切换到新分支</span><br><span class="line">echo &#39;zdy.txt v1&#39; &gt; zdy.txt</span><br><span class="line">git add .&#x2F;</span><br><span class="line">git commit -m &quot;2 commit for zdy.txt v1 from a&quot;</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/17/a7205c0dc2d735321d0efdb6804b02f6.png" width="70%"/><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git push  # 上传分支</span><br><span class="line">git push git-study zdy  # 上传分支</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/17/0fcf262b22fa35903d869ea4955a4e02.png" width="70%"/><p>注意：</p><ul><li>新分支要用 <code>git push 别名 分支名</code> 上传，<code>git branch -u</code> 也无法创建联系，因为没有远程跟踪分支</li><li>执行命令 <code>git push git-study zdy</code> 后，git会自动创建远程跟踪分支，但本地分支并不会自动跟踪它</li></ul></li><li><p>b从仓库获取zdy分支并修改zdy.txt文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git pull  # 成员b克隆仓库代码后本地分支会自动跟踪远程跟踪分支，所以可以使用git pull命令</span><br><span class="line">git lol</span><br><span class="line">git checkout --track origin&#x2F;zdy  # b中创建zdy本地分支，并跟踪远程跟踪分支</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/17/85c0f8cd4cf51b079f476e30f699dee4.png" width="70%"/><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim zdy.txt</span><br><span class="line">git add .&#x2F;</span><br><span class="line">git commit -m &quot;3 commit for zdy.txt v2 from b&quot;</span><br><span class="line">git push  # 上传修改</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/17/47726a2e4009a1e5a8eb2f47db2fccef.png" width="70%"/></li><li><p>a再次获取zdy分支内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git pull # 拉取仓库</span><br><span class="line">git branch -u git-study&#x2F;zdy  # 让本地分支跟踪远程跟踪分支</span><br><span class="line">git pull # 拉取仓库</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/17/08a2e7f14a6e19eda00114d4a195bfa5.png" width="70%"/><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat zdy.txt</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/17/5b0affa4709cd7b1c4a01f9e594b781d.png" width="70%"/></li></ul></li></ol><h2 id="远程冲突"><a href="#远程冲突" class="headerlink" title="远程冲突"></a>远程冲突</h2><ol><li><p>冲突场合：本地操作（典型合并）、远程协作（push、pull）</p></li><li><p>案例1：模拟并解决push冲突（a为项目经理，b为团队成员）</p><ul><li><p>仓库内容：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/18/50502ede9b9179101c33170d9e3e2194.png" width="70%"/></li><li><p>a中修改a.txt并push到远程仓库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  vim a.txt</span><br><span class="line">git add .&#x2F;</span><br><span class="line">  git commit -m &quot;2 commit for a.txt v2 from a&quot;</span><br><span class="line">git push git-study master  # 本地分支未跟踪远程跟踪分支，不能使用git push命令</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/18/8a17ccf11ef63255ecfdacaf17478159.png" width="70%"/></li><li><p>b也修改a.txt并push到远程仓库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  vim a.txt</span><br><span class="line">git add .&#x2F;</span><br><span class="line">  git commit -m &quot;2 commit for a.txt v2 from b&quot;</span><br><span class="line">git push</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/18/c48921087011dd60a0fb166fb9071235.png" width="70%"/><p>上图提示：当前推送所修改的内容在仓库已经做了修改，可以先git pull 拉取仓库内容，解决冲突后重新推送</p></li><li><p>b中拉取仓库内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/18/18ee1ad044bd642109760718871645ff.png" width="70%"/><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim a.txt  # 修改冲突</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/18/3a49bcf6d7004f792887029112bdb16a.png" width="70%"/><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .&#x2F;  # 告知git冲突已经解决</span><br><span class="line">git commit -m &quot;4 commit for fix a.txt conflict&quot;</span><br><span class="line">git push  # 再次推送</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/20/caf8e88179668b12f92de536eaca98b0.png" width="70%"/></li></ul></li><li><p>案例2：模拟并解决pull冲突（a为项目经理，b为团队成员）</p><ul><li><p>在案例1基础上，a拉取仓库内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git branch -u git-study&#x2F;master  # 本地分支跟踪远程跟踪分支</span><br><span class="line">git pull  # 拉取仓库内容</span><br><span class="line">cat a.txt  # 查看文件内容</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/18/3ac11d2d7916f82b9c79788907aeede7.png" width="70%"/></li><li><p>a中修改a.txt文件并推送到远程仓库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim a.txt</span><br><span class="line">git add .&#x2F;</span><br><span class="line">git commit -m &quot;5 commit for a.txt v3 from a&quot;</span><br><span class="line">git push</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/18/839a5be097bd759ab81dea5093e08356.png" width="70%"/></li><li><p>b中修改a.txt文件，提交后使用git pull命令拉取仓库内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim a.txt</span><br><span class="line">git add .&#x2F;</span><br><span class="line">git commit -m &quot;6 commit for a.txt v3 from b&quot;</span><br><span class="line">git pull</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/18/25eaea18f733e46817f6ab31ef1dabf6.png" width="70%"/><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim a.txt  # 解决冲突</span><br><span class="line">git add .&#x2F;  # 告知git冲突已解决</span><br><span class="line">git commit -m &quot;7 commit for fix a.txt conflict&quot;</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/18s/02bb3fa9505eac5afce2f1b0343d1dbd.png" width="70%"/></li></ul></li></ol><h2 id="Pull-Request"><a href="#Pull-Request" class="headerlink" title="Pull Request"></a>Pull Request</h2><ol><li><p>场景：当你想要参与修改某个项目，但没有推送权限，这时可以对这个项目进行“派生”（fork，在你的github空间中创建一个完全属于你的项目副本），将自己的修改提交到派生出的项目副本中并创建PR（Pull Request）请求，项目所有者审核同意后你所修改的内容就会进入源版本库。</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/19s/9794bf4db48b3d7d240b12386f4bb1f5.png" width="70%"/></li><li><p>基本流程：</p><ul><li>fork项目，clone副本项目到工作区</li><li>修改文件，push到仓库，创建PR</li><li>项目所有者审核，提交成功（失败）</li></ul></li><li><p>案例：模拟使用PR（xingjiahui：项目创建者，PluShine：无推送权限但想参与修改）</p><ul><li><p>fork项目：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/19s/debc4135857a8b6287803a349052b6cf.png" width="70%"/><p>fork后PluShine新增了项目副本仓库：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/20/509a93468baf97492e0cd4dfe02630b9.png" width="70%"/></li><li><p>克隆副本仓库，push修改内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;PluShine&#x2F;git-study.git</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/19s/9acaebc2fb45590dc2a33e5e0219e209.png" width="70%"/> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim a.txt</span><br><span class="line">git add .&#x2F;</span><br><span class="line">git commit -m &quot;7 commit for a.txt bug fix from PluShine&quot;</span><br><span class="line">git push</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/19s/e0275809c644a9e846adb5a3b95cb1e3.png" width="70%"/><p>进入仓库，创建Pull Request：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/19s/021c15f6aed14a23762f656cdcbc07e2.png" width="70%"/><p>PR创建成功：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/19s/142b2d78e15f1b5f7ee8280afca137bf.png" width="70%"/></li><li><p>项目创建者审核PR：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/19s/5fa0c508f3932f5e8aa78b61f015daf2.png" width="70%"/><p>合并提交：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/19s/fec3aeef440196c28e5ba879291bf4f1.png" width="70%"/><p>合并成功：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/20/253e3ed5b05528e3a32168c6ba3eb62e.png" width="70%"/></li></ul></li></ol><hr><p>不足之处，欢迎留言，会及时回复，及时更正！</p><p>创作不易，感谢支持！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://plushine.cn/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="git" scheme="https://plushine.cn/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/git/"/>
    
    
      <category term="git" scheme="https://plushine.cn/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>云班课作业互评(python3+selenium)</title>
    <link href="https://plushine.cn/17196.html"/>
    <id>https://plushine.cn/17196.html</id>
    <published>2020-10-29T02:16:30.000Z</published>
    <updated>2020-11-30T08:36:49.802Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>本文章最初发布在 <a href="https://plushine.cn">XJHui’s Blog</a>，未经允许，任何人禁止转载！</p><p><font color="red" style="font-weight:700">注意：</font>最新修改版本已发布在 <a href="https://plushine.cn/17196.html">这里</a>，点击前往查看！</p><h1 id="Yunbanke-auto"><a href="#Yunbanke-auto" class="headerlink" title="Yunbanke-auto"></a>Yunbanke-auto</h1><p>云班课作业互评（python3+selenium）</p><p>github项目地址：<a href="https://github.com/319np666/Yunbanke-Auto">https://github.com/319np666/Yunbanke-Auto</a></p><h1 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h1><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><ol><li>自动登录、进入课程</li><li>统计互评作业总数、需要互评数目</li><li>根据自定义的评分值对作业进行互评</li></ol><h2 id="使用须知"><a href="#使用须知" class="headerlink" title="使用须知"></a>使用须知</h2><ul><li>需要python3环境</li><li>仅供学习参考使用，任何商业用途后果自负</li></ul><h2 id="语言库"><a href="#语言库" class="headerlink" title="语言库"></a>语言库</h2><ul><li>python 3.8</li><li>selenium 3.141.0</li><li>pyyaml 5.3.1</li></ul><h1 id="使用该项目"><a href="#使用该项目" class="headerlink" title="使用该项目"></a>使用该项目</h1><h2 id="安装库"><a href="#安装库" class="headerlink" title="安装库"></a>安装库</h2><ul><li>pip install selenium</li><li>pip install pyyaml</li></ul><h2 id="安装浏览器驱动"><a href="#安装浏览器驱动" class="headerlink" title="安装浏览器驱动"></a>安装浏览器驱动</h2><ol><li>教程：<a href="https://plushine.cn/22094.html#%E6%B5%8F%E8%A7%88%E5%99%A8%E5%8F%8A%E9%A9%B1%E5%8A%A8">Chrome驱动</a></li><li>浏览器推荐：Chrome，新版Edge（未做测试）</li></ol><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><ol><li><p>下载项目后，解压缩</p></li><li><p>打开项目，找到 <code>userData.yml</code> 文件：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/10/22/1370c4972332f9e384ad9caeb6a36305.png" width="70%"/><p>注意：老师姓名和课程名称要与云班课中一致</p></li></ol><h2 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h2><ul><li><p>运行 <code>index.py</code> 文件即可开始互评项目：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/10/22/fa03e7028e0a87e8e121c5b1bb2794ce.png" width="70%"/><p>注意：程序未进行异常处理，运行本项目前请确保配置文件填写正确</p></li><li><p>配置文件正确填写依然报错，请联系作者</p></li></ul><hr><p>不足之处，欢迎留言，会及时回复，及时更正！</p><p>创作不易，感谢支持！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="个人项目" scheme="https://plushine.cn/categories/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/"/>
    
      <category term="作业互评(python)" scheme="https://plushine.cn/categories/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/%E4%BD%9C%E4%B8%9A%E4%BA%92%E8%AF%84-python/"/>
    
    
  </entry>
  
  <entry>
    <title>Selenium Web自动化（Python3）</title>
    <link href="https://plushine.cn/22094.html"/>
    <id>https://plushine.cn/22094.html</id>
    <published>2020-10-20T11:05:22.000Z</published>
    <updated>2020-11-21T02:56:44.017Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>本文章最初发布在 <a href="https://plushine.cn">XJHui’s Blog</a>，未经允许，任何人禁止转载！</p><p><font color="red" style="font-weight:700">注意：</font>最新修改版本已发布在 <a href="https://plushine.cn/22094.html">这里</a>，点击前往查看！</p><h1 id="关于笔记"><a href="#关于笔记" class="headerlink" title="关于笔记"></a>关于笔记</h1><ol><li>视频地址：<a href="https://www.bilibili.com/video/BV1Z4411o7TA?p=1">bilibili-白月黑羽教编程(34p)</a></li><li>课件、笔记：<a href="http://www.python3.vip/tut/auto/selenium/01/">http://www.python3.vip/tut/auto/selenium/01/</a></li><li>学前技能：<ul><li>python基础</li><li>python3环境、python解释器</li><li>前端基础（html、css）</li></ul></li><li>学后技能：<ul><li>web自动化</li><li>python小脚本</li><li>爬虫（不推荐）</li></ul></li></ol><h1 id="selenium库"><a href="#selenium库" class="headerlink" title="selenium库"></a>selenium库</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ol><li><p>定义：是一个web的自动化测试工具</p></li><li><p>官方文档：<a href="https://selenium-python.readthedocs.io/index.html">Selenium with Python</a></p></li><li><p>功能：python中导入selenium库后通过调用函数实现在浏览器中模拟鼠标点击、移动等操作</p></li><li><p>使用范围：</p><ul><li>模拟登陆</li><li>刷网课</li></ul></li></ol><h2 id="原理图"><a href="#原理图" class="headerlink" title="原理图"></a>原理图</h2><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/10/15/2208c15e496d23bbb280527af4fef9d6.png" width="80%"/><p>注意：</p><ol><li>安装：selenium库、浏览器（chrome为例）以及浏览器对应版本的驱动</li><li>使用：想实现 <code>点击</code> 操作，只需要调用selenium库中函数</li><li>兼容性：支持Java，Python等多种语言</li></ol><h2 id="安装库"><a href="#安装库" class="headerlink" title="安装库"></a>安装库</h2><ol><li><p>执行命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install selenium -i https://mirror.baidu.com/pypi/simple  # 为了保证安装速度，使用了百度镜像</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/10/15/a3827c3fa5b795521b044799e67cbcb0.png" width="70%"/></li><li><p>验证安装：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> selenium  <span class="comment"># 导入selenium库</span></span><br><span class="line">print(selenium.__version__)  <span class="comment"># 查看版本号</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/10/15/71616218e3708f44d9f38feb300cc81b.png" width="70%"/></li></ol><h2 id="浏览器及驱动"><a href="#浏览器及驱动" class="headerlink" title="浏览器及驱动"></a>浏览器及驱动</h2><ol><li><p>安装浏览器：<a href="https://www.google.cn/chrome/">点这里下载</a></p></li><li><p>安装驱动：</p><ul><li><p>查看chrome版本：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/10/15/a82a624279dcf50c9d08aa51a7112781.png" width="70%"/></li><li><p>点击 <a href="https://chromedriver.storage.googleapis.com/index.html">这里</a> 查找对应驱动下载并解压：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/10/15/aafdd98aeb553c5caaab9703510536fe.png" width="70%"/><p>注意：</p><ul><li>驱动和浏览器的版本号越接近越好，略有差别（比如72和73）也行</li><li>解压路径不要出现中文符号、空格等</li><li>解压后为一个.exe文件，不需要安装</li></ul></li></ul></li></ol><h1 id="简单示例"><a href="#简单示例" class="headerlink" title="简单示例"></a>简单示例</h1><h2 id="开启浏览器"><a href="#开启浏览器" class="headerlink" title="开启浏览器"></a>开启浏览器</h2><ol><li><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver  <span class="comment"># 从selenium库中导入web自动化常用的函数</span></span><br><span class="line"></span><br><span class="line">wd = webdriver.Chrome(<span class="string">r&#x27;d:\tool\chromedriver.exe&#x27;</span>)  <span class="comment"># 实例化一个WebDriver类型的对象，参数浏览器驱动路径</span></span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>python默认会将 <code>浏览器驱动路径</code> 中的\转义，在其前面添加 <code>r</code> 表示不转义</li><li>通过创建的wd（webdriver对象）来操控浏览器</li></ul></li><li><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/10/15/b70250def5627077ef7718167c5db7d2.png" width="70%"/></li></ol><h2 id="跳转网址"><a href="#跳转网址" class="headerlink" title="跳转网址"></a>跳转网址</h2><ol><li><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wd.get(<span class="string">&#x27;https://plushine.cn&#x27;</span>)  <span class="comment"># 使用get方法，打开一个新网址</span></span><br></pre></td></tr></table></figure></li><li><p>运行结果：</p></li></ol><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/10/16/f98742935362de6ac5f99662bbbe8b46.png" width="70%"/><h1 id="选择元素"><a href="#选择元素" class="headerlink" title="选择元素"></a>选择元素</h1><h2 id="根据id"><a href="#根据id" class="headerlink" title="根据id"></a>根据id</h2><ol><li><p>语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kw = wd.find_element_by_id(<span class="string">&#x27;kw&#x27;</span>)  <span class="comment"># 根据id选择元素，返回该元素对应的WebElement对象，下文以wb代指</span></span><br></pre></td></tr></table></figure></li><li><p>案例：在百度搜索页面输入plushine并回车</p><ul><li><p>查看文本框的id值（kw）：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/10/16/05402fc69f45cf2c53f8617cf9a10869.png" width="70%"/><p>注意：控制台查看网页源码的教程 <a href="https://jingyan.baidu.com/article/a501d80c474073ec630f5ed1.html">在这里</a>，感谢：百度经验。</p></li><li><p>查看提交按钮的id值（su）：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/10/16/dc43469c1eafea3bfe15334ed071d3d5.png" width="70%"/></li><li><p>编写代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">kw = wd.find_element_by_id(<span class="string">&#x27;kw&#x27;</span>)  <span class="comment"># 根据id选择元素</span></span><br><span class="line">kw.send_keys(<span class="string">&#x27;plushine&#x27;</span>)  <span class="comment"># .send_keys()：文本框中输入文字</span></span><br><span class="line"></span><br><span class="line">su = wd.find_element_by_id(<span class="string">&#x27;su&#x27;</span>)</span><br><span class="line">su.click()  <span class="comment"># .click()：点击</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/10/16/5590477f2fb51c7139e35109216bdcac.png" width="70%"/></li></ul></li></ol><h2 id="根据class"><a href="#根据class" class="headerlink" title="根据class"></a>根据class</h2><ol><li><p>语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element = wd.find_elements_by_class_name(<span class="string">&#x27;plant&#x27;</span>)  <span class="comment"># 返回wb类型的对象</span></span><br></pre></td></tr></table></figure><p>注意区分：</p><ul><li>element：返回第一个符合条件的元素的wb对象，找不到抛出异常【NoSuchElementException】</li><li>elements：返回所有符合条件元素的wb对象列表【适合元素的统一处理】，找不到返回空列表</li></ul></li><li><p>案例：选择所有class属性为plant的元素</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/10/20/81814a3fe0284a2091c9dd037b1bed95.png" width="70%"/><ul><li><p>访问网址，选择元素：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wd.get(<span class="string">&#x27;http://cdn1.python3.vip/files/selenium/sample1.html&#x27;</span>)  <span class="comment"># 打开网址</span></span><br><span class="line"></span><br><span class="line">elements = wd.find_elements_by_class_name(<span class="string">&#x27;plant&#x27;</span>)  <span class="comment"># 查找class等于plant的元素，elements返回列表</span></span><br></pre></td></tr></table></figure></li><li><p>查看对象内容（debug）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 最后一行添加pass，并断点调试，详见下图</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/10/16/cc88d744a4342f4e430d1104d3bd6e38.png" width="70%"/><p>注意：如果使用print是无法查看对象内容的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(elements)</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/10/16/c55992d209327a2b41e7c1cdd46046d8.png" width="70%"/></li><li><p>输出元素text属性值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> element <span class="keyword">in</span> elements:</span><br><span class="line">    print(element.text)  <span class="comment"># .text：查看内部文字（下文会详解）</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/10/16/4738238ca06575e01d692497ebace01c.png" width="70%"/></li></ul></li></ol><h2 id="根据tag"><a href="#根据tag" class="headerlink" title="根据tag"></a>根据tag</h2><ol><li><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">spanList = wd.find_elements_by_tag_name(<span class="string">&#x27;span&#x27;</span>)  <span class="comment"># 返回所有标签为span元素的WebElement对象</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> span <span class="keyword">in</span> spanList:</span><br><span class="line">    print(span.text)  <span class="comment"># 输出标签内部文字</span></span><br></pre></td></tr></table></figure></li><li><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/10/16/a909754c11722cb7ff70ce66cba9b8d4.png" width="70%"/></li></ol><h2 id="根据wb"><a href="#根据wb" class="headerlink" title="根据wb"></a>根据wb</h2><ol><li><p>wb（WebElement）：通过find函数选择元素返回值类型为wb</p></li><li><p>案例：分别从全局和局部选择span标签，判断返回值是否相同</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">wd.get(<span class="string">&#x27;http://cdn1.python3.vip/files/selenium/sample1.html&#x27;</span>)</span><br><span class="line">wb = wd.find_element_by_id(<span class="string">&#x27;container&#x27;</span>)  <span class="comment"># find返回值类型为wb</span></span><br><span class="line"></span><br><span class="line">wdElement = wd.find_elements_by_tag_name(<span class="string">&#x27;span&#x27;</span>)  <span class="comment"># webdriver中查找元素</span></span><br><span class="line">weElement = wb.find_elements_by_tag_name(<span class="string">&#x27;span&#x27;</span>)  <span class="comment"># webelement中查找元素</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;-------全局范围wd-----&quot;</span>)</span><br><span class="line">print(<span class="built_in">len</span>(wdElement))</span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;-------局部范围wb-----&quot;</span>)</span><br><span class="line">print(<span class="built_in">len</span>(weElement))</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">   </span><br><span class="line">运行结果：</span><br><span class="line">   </span><br><span class="line">   &lt;img src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;xingjiahui&#x2F;CDN@latest&#x2F;2020&#x2F;10&#x2F;20&#x2F;5d9843f5f36fc578427ab8ae660cbf95.png&quot; width&#x3D;&quot;70%&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">## 隐式等待</span><br><span class="line"></span><br><span class="line">1. 案例：百度搜索 &#96;plushine&#96; ，获取第一条搜索结果：</span><br><span class="line"></span><br><span class="line">   &lt;img src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;xingjiahui&#x2F;CDN@latest&#x2F;2020&#x2F;10&#x2F;20&#x2F;d7ca6f337c1cc11a0b79b56dfae17dfc.png&quot; width&#x3D;&quot;70%&quot;&#x2F;&gt;</span><br><span class="line">   </span><br><span class="line">   - 程序代码：</span><br><span class="line">   </span><br><span class="line">     &#96;&#96;&#96;python</span><br><span class="line">     wd.get(&#39;https:&#x2F;&#x2F;baidu.com&#39;)  # 访问百度搜素首页</span><br><span class="line">     wd.find_element_by_id(&#39;kw&#39;).send_keys(&#39;plushine\n&#39;)  # 通过id选择元素，通过send_keys()填充文本，\n：回车</span><br><span class="line">     </span><br><span class="line">     element &#x3D; wd.find_element_by_id(&#39;1&#39;)  # 通过id选择元素</span><br><span class="line">     print(element.text)  # 输出返回元素</span><br></pre></td></tr></table></figure><ul><li><p>报错截图：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/10/17/46006270f13ecc24adf1772e6db98e37.png" width="70%"/></li></ul></li><li><p>原因分析：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">element.send_keys(<span class="string">&#x27;plushine\n&#x27;</span>)  <span class="comment"># 回车后，开始从百度服务器接收数据</span></span><br><span class="line"></span><br><span class="line">element = wd.find_element_by_id(<span class="string">&#x27;1&#x27;</span>)  <span class="comment"># 查找id为1的元素，但此时数据还未完全获取导致查找失败</span></span><br></pre></td></tr></table></figure></li><li><p>解决方法（使用隐式等待）：</p><ul><li><p>语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wd = webdriver.Chrome(<span class="string">r&#x27;d:\tool\chromedriver.exe&#x27;</span>)  <span class="comment"># 创建Chrome浏览器的WebDriver对象</span></span><br><span class="line">wd.implicitly_wait(<span class="built_in">max</span>)  <span class="comment"># 其中max表示最大等待时间（s）</span></span><br></pre></td></tr></table></figure></li><li><p>原理：当元素查找失败时，会每隔0.5s检查一下能否找到元素，直至最大等待时间报错</p></li></ul></li><li><p>案例：百度搜索 <code>plushine</code> ，获取第一条搜索结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">wd = webdriver.Chrome(<span class="string">r&#x27;d:\tool\chromedriver.exe&#x27;</span>)</span><br><span class="line">wd.implicitly_wait(<span class="number">10</span>)  <span class="comment"># 设置最大等待时间为10s</span></span><br><span class="line"></span><br><span class="line">wd.get(<span class="string">&#x27;https://baidu.com&#x27;</span>)</span><br><span class="line"></span><br><span class="line">wd.find_element_by_id(<span class="string">&#x27;kw&#x27;</span>).send_keys(<span class="string">&#x27;plushine\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">element = wd.find_element_by_id(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">print(element)</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/10/18/cb763473a8120123c6b4f1aeafbbcf7b.png" width="70%"/></li></ol><h1 id="操控元素"><a href="#操控元素" class="headerlink" title="操控元素"></a>操控元素</h1><h2 id="常用方式"><a href="#常用方式" class="headerlink" title="常用方式"></a>常用方式</h2><blockquote><p>前面案例中已经多次使用了，这里不再赘述</p></blockquote><ol><li>点击：.click()【a标签、按钮等均可点击】</li><li>输入字符串：.send_keys()</li><li>获取元素内容：.text</li></ol><h2 id="获取标签属性"><a href="#获取标签属性" class="headerlink" title="获取标签属性"></a>获取标签属性</h2><ol><li><p>语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element.get_attribute(<span class="string">&#x27;name&#x27;</span>)  <span class="comment"># 注意：element是一个wb对象,get_attribute：获取name属性值</span></span><br></pre></td></tr></table></figure></li><li><p>案例：通过id选择元素并获取该元素的srcid属性值</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/10/20/43e1284d7c7015a5392ae4b08962f7a1.png" width="70%"/><ul><li><p>程序代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">element = wd.find_element_by_id(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">print(element.get_attribute(<span class="string">&#x27;srcid&#x27;</span>))</span><br></pre></td></tr></table></figure></li><li><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/10/18/ff33837c4065be50729e61d884d8a1ec.png" width="70%"/></li></ul></li></ol><h2 id="获取html"><a href="#获取html" class="headerlink" title="获取html"></a>获取html</h2><ol><li><p>使用.get_attribute()可以获取某元素的html代码，当参数分别为text、outerHTML、innerHTML时的结果如右图：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/10/18/83527251b3005c6374b010895cdec501.png" width="70%"/></li><li><p>案例：分别输出text、get_attribute(‘outerHTML’))，get_attribute(‘innerHTML’))的结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">element = wd.find_element_by_id(<span class="string">&#x27;h1&#x27;</span>)  <span class="comment"># 查找id为h1的元素</span></span><br><span class="line">print(<span class="string">&quot;-------text-------&quot;</span>)</span><br><span class="line">print(element.text)  <span class="comment"># 元素内部文字</span></span><br><span class="line">print(<span class="string">&quot;-------outerHTML-------&quot;</span>)</span><br><span class="line">print(element.get_attribute(<span class="string">&#x27;outerHTML&#x27;</span>))  <span class="comment"># 整个元素对应的html</span></span><br><span class="line">print(<span class="string">&quot;-------innerHTML-------&quot;</span>)</span><br><span class="line">print(element.get_attribute(<span class="string">&#x27;innerHTML&#x27;</span>))  <span class="comment"># 元素内部html</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/10/18/64fcb7db5dd9a98b53201239eaf0ee72.png" width="70%"/><p>注意：有些内容使用text可能无法获取，可以尝试使用：</p><ul><li><code>element.get_attribute(&#39;innerText&#39;)</code></li><li><code>element.get_attribute(&#39;textContent&#39;)</code></li></ul></li></ol><h2 id="获取输入框内容"><a href="#获取输入框内容" class="headerlink" title="获取输入框内容"></a>获取输入框内容</h2><blockquote><p>注意：对于输入（搜索）框，不可以使用id或class来获取里面的内容</p></blockquote><ol><li><p>案例：百度搜索框中输入 <code>plushine</code> ，返回刚刚输入的内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wd.find_element_by_id(<span class="string">&#x27;kw&#x27;</span>).send_keys(<span class="string">&#x27;plushine&#x27;</span>)  <span class="comment"># 文本框中输入plushine</span></span><br><span class="line"></span><br><span class="line">element = wd.find_element_by_id(<span class="string">&#x27;kw&#x27;</span>) <span class="comment"># 通过id选择文本框</span></span><br><span class="line"></span><br><span class="line">print(element.get_attribute(<span class="string">&#x27;value&#x27;</span>))  <span class="comment"># 通过get_attribute(&#x27;value&#x27;)获取文本框中的内容</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/10/18/babea68b0edc6abe8887aa61302e7005.png" width="70%"/></li><li><p>输入 <code>wd.find_element_by_id(&#39;kw&#39;).send_keys(&#39;plushine&#39;)</code> 的类型：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="built_in">type</span>(wd.find_element_by_id(<span class="string">&#x27;kw&#x27;</span>).send_keys(<span class="string">&#x27;plushine&#x27;</span>)))</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/10/18/023459d8e6ac1d80fb7cd0e212774a75.png" width="70%"/><p>因为 <code>element.get_attribute(&#39;value&#39;)</code> 中要求element的类型是wb对象，所以下面的代码是错误的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">element = wd.find_element_by_id(<span class="string">&#x27;kw&#x27;</span>).send_keys(<span class="string">&#x27;plushine&#x27;</span>)  <span class="comment"># 此时element的类型为NoneType</span></span><br><span class="line"></span><br><span class="line">print(element.get_attribute(<span class="string">&#x27;value&#x27;</span>))</span><br></pre></td></tr></table></figure></li></ol><h1 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a>CSS选择器</h1><h2 id="根据标签选择"><a href="#根据标签选择" class="headerlink" title="根据标签选择"></a>根据标签选择</h2><ol><li><p>案例：选择所有标签为div的元素并输出其内部文字</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wd.get(<span class="string">&#x27;http://cdn1.python3.vip/files/selenium/sample1.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line">elements = wd.find_elements_by_css_selector(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> element <span class="keyword">in</span> elements:</span><br><span class="line">    print(element.text)</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/10/18/238a0bbdc66a24159522040bac21219f.png" width="70%"/></li><li><p>注意：</p><ul><li>其它标签也具有相同的用法，不再列举</li><li>也都可以使用 <code>wd.find_element_by_css_selector()</code> 来选择元素</li></ul></li></ol><h2 id="根据属性选择"><a href="#根据属性选择" class="headerlink" title="根据属性选择"></a>根据属性选择</h2><ol><li><p>案例：选择所有class属性为animal的元素，并输出整个元素内容（class、id）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">elements = wd.find_elements_by_css_selector(<span class="string">&#x27;.animal&#x27;</span>)  <span class="comment"># class用.表示，id用#表示</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> element <span class="keyword">in</span> elements:</span><br><span class="line">    print(element.get_attribute(<span class="string">&#x27;outerHTML&#x27;</span>))</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/10/18/16e333b16f43fbddd094c52bce337cf9.png" width="70%"/></li><li><p>案例：选择下面代码中的外部元素（其它属性）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.miitbeian.gov.cn&quot;</span>&gt;</span>苏ICP备88885574号<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意：href不像class、id可以使用特定的符号表示，但依然可以通过css选择器选择元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment"># 当没有class、id时可以使用[属性=&quot;&quot;]来选择元素</span></span><br><span class="line">element = wd.find_element_by_css_selector(<span class="string">&#x27;[href=&quot;http://www.miitbeian.gov.cn&quot;]&#x27;</span>)</span><br><span class="line">print(element.get_attribute(<span class="string">&#x27;outerHTML&#x27;</span>))</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/10/18/f82456dee3f267f64333914016aa6fef.png" width="70%"/></li><li><p>技巧：每次都需要运行代码才能判断css选择器是否正确？有没有简便方法？有，Chrome控制台的搜索功能</p><ul><li><p>打开chrome控制台，点击下图位置的 <code>元素</code>：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/10/20/0ea779a08b1022927f6fce3a539ab152.png" width="70%"/></li><li><p>按下快捷键：ctrl+f，出现搜索框：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/10/18/dbefd1c66e10390b3b2b223814999097.png" width="70%"/></li><li><p>输入css选择器可筛选出符合条件的元素，大大节省了调试时间：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/10/18/eded9de6d4cd46724d21644915ed46ca.png" width="70%"/></li></ul></li></ol><h2 id="子元素和后代元素"><a href="#子元素和后代元素" class="headerlink" title="子元素和后代元素"></a>子元素和后代元素</h2><ol><li><p>代码块：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="built_in">id</span>=<span class="string">&#x27;container&#x27;</span>&gt;</span><br><span class="line">    &lt;div <span class="built_in">id</span>=<span class="string">&#x27;layer1&#x27;</span>&gt;</span><br><span class="line">        &lt;div <span class="built_in">id</span>=<span class="string">&#x27;inner11&#x27;</span>&gt;</span><br><span class="line">            &lt;span&gt;内层11&lt;/span&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div <span class="built_in">id</span>=<span class="string">&#x27;inner12&#x27;</span>&gt;</span><br><span class="line">            &lt;span&gt;内层12&lt;/span&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div <span class="built_in">id</span>=<span class="string">&#x27;layer2&#x27;</span>&gt;</span><br><span class="line">        &lt;div <span class="built_in">id</span>=<span class="string">&#x27;inner21&#x27;</span>&gt;</span><br><span class="line">            &lt;span&gt;内层21&lt;/span&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><ul><li>子元素：layer1、layer2都是container的子元素，同理 inner11是layer1的子元素</li><li>后代元素：inner11、inner12、inner21都是container的后代元素，但不是其子代元素</li></ul></li><li><p>语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wd.find_element_by_css_selector(<span class="string">&#x27;#container &gt; #layer1 &gt; #inner11&#x27;</span>)  <span class="comment"># 子代元素之间用 &gt;</span></span><br><span class="line">wd.find_element_by_css_selector(<span class="string">&#x27;#container #inner11&#x27;</span>)  <span class="comment"># 后代元素之间用空格</span></span><br><span class="line">print(element.get_attribute(<span class="string">&#x27;outerHTML&#x27;</span>))  <span class="comment"># 打印外部元素</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/10/18/1a1538649811c9d1484b4263deffc375.png" width="70%"/></li></ol><h2 id="联合使用"><a href="#联合使用" class="headerlink" title="联合使用"></a>联合使用</h2><blockquote><p>为了便于表示，下面代码中省去了 <code>wd.find_element_by_css_selector()</code></p></blockquote><ol><li><p>标签和属性联用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;#container &gt; div&#x27;</span>  <span class="comment"># id为container的子元素中标签为div的元素（之间有空格或&gt;代表描述的是不同元素）</span></span><br><span class="line"><span class="string">&#x27;span.copyright&#x27;</span>  <span class="comment"># class为copyright且标签为span的元素（之间无空格或&gt;代表描述的是同一个元素）</span></span><br></pre></td></tr></table></figure></li><li><p>两个选择器联用（逗号分隔，or关系）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">elements = wd.find_elements_by_css_selector(<span class="string">&#x27;.plant ,.animal&#x27;</span>)  <span class="comment"># 选取class属性为plant或animal的元素</span></span><br><span class="line"><span class="keyword">for</span> element <span class="keyword">in</span> elements:</span><br><span class="line">    print(element.get_attribute(<span class="string">&#x27;outerHTML&#x27;</span>))</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/10/18/56664a944a8ec8284e0c18873b7316e5.png" width="70%"/></li><li><p>案例：获取.vsc-initialized 下 #t1 和 #t2 元素的css选择器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;.vsc-initialized (#t1 , #t2)&#x27;</span>  <span class="comment"># 错误，因为括号不能用在css选择器中</span></span><br><span class="line"><span class="string">&#x27;.vsc-initialized #t1 , .vsc-initialized #t2&#x27;</span>  <span class="comment"># 正确方法（略显笨重，不过后面会将其它简单方法）</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/10/18/e6fea07ed8747ec434287e0d1c990f8a.png" width="70%"/></li></ol><h2 id="按次序选择子节点"><a href="#按次序选择子节点" class="headerlink" title="按次序选择子节点"></a>按次序选择子节点</h2><ul><li><p>父元素的第n个子节点：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">element = wd.find_element_by_css_selector(<span class="string">&#x27;span:nth-child(2)&#x27;</span>)  <span class="comment"># 查询第二个span标签</span></span><br><span class="line">print(element.get_attribute(<span class="string">&#x27;outerHTML&#x27;</span>))</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/10/18/dbfeb7f31146fe7da86628420c294ad6.png" width="70%"/><p>注意：</p><ul><li>使用 <code>:nth-last-child(2)</code> 表示选择倒数第二个子元素</li><li>使用 <code>span:nth-child(2)</code> （标签属性联用），表示选择第二个且标签为span的子元素</li></ul></li><li><p>父元素的第几个某类型的子节点：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">element = wd.find_element_by_css_selector(<span class="string">&#x27;span:nth-of-type(2)&#x27;</span>)</span><br><span class="line">print(element.get_attribute(<span class="string">&#x27;outerHTML&#x27;</span>))</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/10/18/ec7a019fae147335a30f7f5df0de74e2.png" width="70%"/></li><li><p>奇数、偶数节点：</p><ol><li><p>案例：选择#t1的偶数子元素：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">element = wd.find_element_by_css_selector(<span class="string">&#x27;span:nth-child(even)&#x27;</span>)</span><br><span class="line">print(element.get_attribute(<span class="string">&#x27;outerHTML&#x27;</span>))</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/10/18/fac322fc1e9584e13acdd207e8a46e95.png" width="70%"/></li><li><p>注意：选取偶数子元素只需将 <code>even</code> 更换为 <code>odd</code> 即可</p></li></ol></li></ul><h2 id="选择弟弟节点"><a href="#选择弟弟节点" class="headerlink" title="选择弟弟节点"></a>选择弟弟节点</h2><ol><li><p>为什么是“弟弟”节点？</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/10/22/41209d7b358bb786fef19983613a3837.png" width="70%"/></li><li><p>案例：使用css选择器中弟弟节点选择方法，选择下图中的span标签</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/10/22/845ace5707b8729df08cb500ecf71300.png" width="70%"/><ul><li><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wd.get(<span class="string">&quot;http://cdn1.python3.vip/files/selenium/sample1a.html&quot;</span>)</span><br><span class="line"></span><br><span class="line">element = wd.find_element_by_css_selector(<span class="string">&#x27;#t2&gt;h3+span&#x27;</span>)  <span class="comment"># css选择器中使用&#x27;+&#x27;表示兄弟节点的选择</span></span><br><span class="line">print(element.text)</span><br></pre></td></tr></table></figure></li><li><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/10/22/1b422069cae9b1a1b9ff1376e1c104ea.png" width="70%"/></li></ul></li></ol><h1 id="切换frame-窗口"><a href="#切换frame-窗口" class="headerlink" title="切换frame/窗口"></a>切换frame/窗口</h1><h2 id="切换frame"><a href="#切换frame" class="headerlink" title="切换frame"></a>切换frame</h2><ol><li><p>frame、iframe的作用：在frame或iframe标签之间存放完整的html代码，实现网页嵌套</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/10/19/30c89561acae9ba4bbaec451c9dea6fb.png" width="70%"/><p>注意：selenium默认不会获取iframe内部元素</p></li><li><p>案例：输出iframe内部满足class=”.plant”的元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">wd.get(<span class="string">&#x27;http://cdn1.python3.vip/files/selenium/sample2.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line">wd.switch_to.frame(<span class="string">&#x27;innerFrame&#x27;</span>)  <span class="comment"># 使用switch_to将操作范围切换到iframe内部，参数为iframe的name属性或一个wb对象</span></span><br><span class="line"></span><br><span class="line">elements = wd.find_elements_by_class_name(<span class="string">&#x27;plant&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> element <span class="keyword">in</span> elements:</span><br><span class="line">    print(element.get_attribute(<span class="string">&#x27;outerHTML&#x27;</span>))</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/10/19/9166de82058cdcd5ed22087e8b6eb026.png" width="70%"/></li><li><p>案例：执行完案例2后点击iframe外部按钮</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wd.switch_to.default_content()  <span class="comment"># 先将操作范围切换到iframe外部</span></span><br><span class="line"></span><br><span class="line">wd.find_element_by_css_selector(<span class="string">&#x27;#outerbutton&#x27;</span>).click()</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/10/19/873979beffd158b8aa9f7bd81eff65c0.png" width="70%"/></li></ol><h2 id="切换窗口"><a href="#切换窗口" class="headerlink" title="切换窗口"></a>切换窗口</h2><blockquote><p>使用js或点击超链接打开新标签页后，窗口并不会自动切换，需要手动操作</p></blockquote><ol><li><p>区分标签页和窗口：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/10/22/01480c63a328411bb159a4f16a6a517b.png" width="70%"/></li><li><p>语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wd.switch_to.window(handle)  <span class="comment"># 使用switch_to.window()将窗口切换为目标窗口，参数为目标窗口的handle值</span></span><br></pre></td></tr></table></figure><p>注意：目标窗口的handle值是未知的，但window_handles中存放了该网页的所有handle值，可依次尝试</p></li><li><p>案例：点击超链接访问必应首页，文本框中输入 “plushine”</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">wd.get(<span class="string">&#x27;http://cdn1.python3.vip/files/selenium/sample3.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line">wd.find_element_by_css_selector(<span class="string">&#x27;a[href=&quot;http://www.bing.com&quot;]&#x27;</span>).click()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> handle <span class="keyword">in</span> wd.window_handles:  <span class="comment"># 遍历所有handle，依次切换，直至满足条件（handle对应的title与目标窗口一致）</span></span><br><span class="line">    wd.switch_to.window(handle)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;必应&#x27;</span> <span class="keyword">in</span> wd.title:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">wd.find_element_by_css_selector(<span class="string">&#x27;input.b_searchbox&#x27;</span>).send_keys(<span class="string">&#x27;plushine&#x27;</span>)</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/10/19/acb8e9e63e2de0d156e57c96d9e94aff.png" width="70%"/></li><li><p>案例：将操作范围切换回原来的标签，并点击按钮</p><ul><li><p>方式一：for循环寻找正确的handle</p></li><li><p>方式二：记录最开始打开的标签handle值，然后直接跳转</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">wd.find_element_by_css_selector(<span class="string">&#x27;a[href=&quot;http://www.bing.com&quot;]&#x27;</span>).click()</span><br><span class="line"></span><br><span class="line">mainHandle = wd.current_window_handle  <span class="comment"># 记录当前窗口handle值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> handle <span class="keyword">in</span> wd.window_handles:</span><br><span class="line">    wd.switch_to.window(handle)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;必应&#x27;</span> <span class="keyword">in</span> wd.title:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">wd.find_element_by_css_selector(<span class="string">&#x27;input.b_searchbox&#x27;</span>).send_keys(<span class="string">&#x27;plushine&#x27;</span>)</span><br><span class="line"></span><br><span class="line">wd.switch_to.window(mainHandle)  <span class="comment"># 跳转到最开始打开的标签</span></span><br><span class="line"></span><br><span class="line">wd.find_element_by_css_selector(<span class="string">&#x27;#outerbutton&#x27;</span>).click()</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/10/19/1e484b620937adb3623ab270e2c24cb7.png" width="70%"/></li></ul></li></ol><h1 id="选择框"><a href="#选择框" class="headerlink" title="选择框"></a>选择框</h1><h2 id="radio"><a href="#radio" class="headerlink" title="radio"></a>radio</h2><ol><li><p>介绍：radio是单选框，最多只能选择一项</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/10/19/a4ab6d2130c6223a98d33bb96ecd7da6.png" width="70%"/></li><li><p>案例：先打印当前选中的老师，再选中小雷老师</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">wd.get(<span class="string">&#x27;http://cdn1.python3.vip/files/selenium/test2.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line">element = wd.find_element_by_css_selector(<span class="string">&#x27;input[type=&quot;radio&quot;][checked=&quot;checked&quot;]&#x27;</span>)</span><br><span class="line"></span><br><span class="line">print(element.get_attribute(<span class="string">&#x27;value&#x27;</span>))</span><br><span class="line"></span><br><span class="line">wd.find_element_by_css_selector(<span class="string">&#x27;input[type=&quot;radio&quot;][value=&quot;小雷老师&quot;]&#x27;</span>).click()</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/10/19/418e72f42a741b9a3b8f652a44ad5dc4.png" width="70%"/><p>注意：使用 <code>element.text</code> 是获取不到其内部文字的，因为input是单标签</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/10/19/968792fe462aef4bc1b758a56de38973.png" width="70%"/></li></ol><h2 id="checkbox"><a href="#checkbox" class="headerlink" title="checkbox"></a>checkbox</h2><ol><li><p>介绍：checkbox是复选框，可选择多项</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/10/19/c215444f28ea2acaaa2bd5a15d553b85.png" width="70%"/></li><li><p>案例：只选中小雷老师</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">wd.get(<span class="string">&#x27;http://cdn1.python3.vip/files/selenium/test2.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line">elements = wd.find_elements_by_css_selector(<span class="string">&#x27;input[type=&quot;checkbox&quot;][checked=&quot;checked&quot;]&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> element <span class="keyword">in</span> elements:</span><br><span class="line">    element.click()</span><br><span class="line"></span><br><span class="line">wd.find_element_by_css_selector(<span class="string">&#x27;input[type=&quot;checkbox&quot;][value=&quot;小雷老师&quot;]&#x27;</span>).click()</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/10/19/587060bbd8d621c1aa400bf48ae9992d.png" width="70%"/></li></ol><h2 id="select"><a href="#select" class="headerlink" title="select"></a>select</h2><ol><li><p>定义：select是下拉框，每个option标签是一个选项，有单选下拉框也有多选下拉框</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/10/20/1dccf0378b14a6429616e3fe9e1d279d.png" width="70%"/></li><li><p>select类：selenium中一个专门操作select下拉框的类</p></li><li><p>案例：单选下拉框中使用select类选择小雷老师</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> Select  <span class="comment"># 导入Select类</span></span><br><span class="line"></span><br><span class="line">wd.get(<span class="string">&#x27;http://cdn1.python3.vip/files/selenium/test2.html&#x27;</span>)</span><br><span class="line">select = Select(wd.find_element_by_css_selector(<span class="string">&#x27;#ss_single&#x27;</span>))  <span class="comment"># 创建select类时的参数为wb对象</span></span><br><span class="line"></span><br><span class="line">select.select_by_index(<span class="number">1</span>)  <span class="comment"># 根据序号选择（从0开始），还有下面两种选择方法（结果相同）</span></span><br><span class="line"><span class="comment"># select.select_by_value(&#x27;小雷老师&#x27;)  # 根据option对应的属性选择</span></span><br><span class="line"><span class="comment"># select.select_by_visible_text(&#x27;小雷老师&#x27;)  # 根据网页可见文字选择</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/10/20/deda84aa745633b8476c57c5e825f3a9.png" width="70%"/></li><li><p>案例：多选下拉框中使用selenium的select类选择小江老师和小凯老师</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> Select  <span class="comment"># 导入Select类</span></span><br><span class="line"></span><br><span class="line">wd.get(<span class="string">&#x27;http://cdn1.python3.vip/files/selenium/test2.html&#x27;</span>)</span><br><span class="line">select = Select(wd.find_element_by_css_selector(<span class="string">&#x27;#ss_multi&#x27;</span>))  <span class="comment"># 创建select类时的参数为WebElement对象</span></span><br><span class="line"></span><br><span class="line">select.deselect_all()  <span class="comment"># 取消全部选择</span></span><br><span class="line"></span><br><span class="line">select.select_by_index(<span class="number">0</span>)  <span class="comment"># 使用下标选取（从0开始）</span></span><br><span class="line">select.select_by_index(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/10/20/ee301c5af17e6bfb2a79e85e8fcb8467.png" width="70%"/><p>注意：<code>select_by_value()</code> 和 <code>select_by_visible_text()</code> 的方法依旧适用于多选框</p></li></ol><h1 id="弹出框"><a href="#弹出框" class="headerlink" title="弹出框"></a>弹出框</h1><h2 id="alert"><a href="#alert" class="headerlink" title="alert"></a>alert</h2><ol><li><p>定义：alert弹框，可以显示一段text文本和一个accept（确定）按钮</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/10/20/5d6bcf9d5d7c0107cb3996edd5385bc2.png" width="50%"/></li><li><p>案例：获取alert弹出框显示的text内容后点击accept（确定）按钮</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wd.get(<span class="string">&#x27;http://cdn1.python3.vip/files/selenium/test4.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line">wd.find_element_by_css_selector(<span class="string">&#x27;#b1&#x27;</span>).click()  <span class="comment"># 点击页面的按钮后显示alert弹窗</span></span><br><span class="line"></span><br><span class="line">print(wd.switch_to.alert.text)  <span class="comment"># 获取alert弹出框显示的text内容</span></span><br><span class="line">wd.switch_to.alert.accept()  <span class="comment"># 点击accept按钮</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/10/20/3f94028ce0c1b3354782d4319b4287f3.png" width="70%"/></li></ol><h2 id="confirm"><a href="#confirm" class="headerlink" title="confirm"></a>confirm</h2><ol><li><p>定义：confirm弹框，可以显示一段text文本、一个accept（确定）按钮和一个dismiss（取消）按钮</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/10/20/7929951416d3ea2cbb1002cefce7b082.png" width="50%"/></li><li><p>案例：获取confirm弹出框显示的text内容后点击dismiss（取消）按钮</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wd.get(<span class="string">&#x27;http://cdn1.python3.vip/files/selenium/test4.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line">wd.find_element_by_css_selector(<span class="string">&#x27;#b2&#x27;</span>).click()  <span class="comment"># 点击页面的按钮后显示confirm弹窗</span></span><br><span class="line"></span><br><span class="line">print(wd.switch_to.alert.text)  <span class="comment"># 获取confirm弹出框显示的text内容</span></span><br><span class="line">wd.switch_to.alert.dismiss()  <span class="comment"># 点击dismiss按钮</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/10/20/1ec98f4134ce71b7429f536b5e27bfe8.png" width="70%"/><p>注意：<code>switch_to.alert.accept()</code> 函数依然适用于confirm 弹出框</p></li></ol><h2 id="prompt"><a href="#prompt" class="headerlink" title="prompt"></a>prompt</h2><ol><li><p>定义：prompt弹框，可以显示一个input文本框、一段text文本、一个accept（确定）按钮和一个dismiss（取消）按钮</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/10/20/90d3963c9f0860784272be96bc12017d.png" width="50%"/></li><li><p>案例：文本框中输入 <code>plushine.cn</code> 后点击确定</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">wd.get(<span class="string">&#x27;http://cdn1.python3.vip/files/selenium/test4.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line">wd.find_element_by_css_selector(<span class="string">&#x27;#b3&#x27;</span>).click()  <span class="comment"># 点击页面的按钮后显示prompt弹窗</span></span><br><span class="line"></span><br><span class="line">print(wd.switch_to.alert.text)  <span class="comment"># 获取prompt弹出框显示的text内容</span></span><br><span class="line">wd.switch_to.alert.send_keys(<span class="string">&#x27;plushine.cn&#x27;</span>)  <span class="comment"># 向文本框中输入文本</span></span><br><span class="line">wd.switch_to.alert.accept()  <span class="comment"># 点击accept按钮</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/10/20/9c5ce0f5669340d74417a87c6be27966.png" width="70%"/></li></ol><h1 id="更多操控方法"><a href="#更多操控方法" class="headerlink" title="更多操控方法"></a>更多操控方法</h1><h2 id="鼠标悬停"><a href="#鼠标悬停" class="headerlink" title="鼠标悬停"></a>鼠标悬停</h2><ol><li><p>引入：在 <a href="https://www.meizu.com/">魅族官网</a> 选择产品时需要将鼠标悬停在导航栏上，才能看到内部元素</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/10/20/e98ca6c4c9a8892f7ee9397bd5ac88e6.png" width="70%"/></li><li><p>ActionChains类：实现右键点击、双击、移动到某个元素、拖拽等鼠标操作</p></li><li><p>案例：将鼠标【移动并悬停】在导航栏中 <code>配件</code> 位置上</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver.common.action_chains <span class="keyword">import</span> ActionChains  <span class="comment"># 导入ActionChains类</span></span><br><span class="line"></span><br><span class="line">wd.get(<span class="string">&#x27;https://www.meizu.com/&#x27;</span>)</span><br><span class="line">ac = ActionChains(wd)  <span class="comment"># 创建ActionChains对象，参数为wd对象</span></span><br><span class="line"></span><br><span class="line">ac.move_to_element(</span><br><span class="line">    wd.find_element_by_css_selector(<span class="string">&#x27;#meizu-header-link &gt; :nth-child(3)&#x27;</span>)</span><br><span class="line">).perform()</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/10/20/4e36a092c467c0849abd1ac5f2c3aa36.png" width="70%"/><p>注意：更多ActionChains类的使用方法请自行查找</p></li></ol><h2 id="冻结界面"><a href="#冻结界面" class="headerlink" title="冻结界面"></a>冻结界面</h2><ol><li><p>问题：通过控制台无法展开商品</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/10/20/21744c041645fc1eadf7106b244a89df.png" width="70%"/></li><li><p>解决：先冻结界面，再通过控制台选择</p><ul><li><p>控制台输入如下JavaScript代码：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(function()&#123;debugger&#125;, 5000)  # 设置定时器，5秒后冻结界面</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/10/20/55d246446458073660523909457c107b.png" width="70%"/></li><li><p>快速将鼠标悬停在网站导航栏中使商品展示：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/10/20/6dd32f70eab647cdb430292fb255cc3e.png" width="70%"/></li><li><p>等待窗口冻结：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/10/20/e69deecbc382d55b7da94a2cee65a0e4.png" width="70%"/></li><li><p>选择商品元素：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/10/20/931a939c84a565222ea604bcf3723fcd.png" width="70%"/></li></ul></li></ol><h2 id="执行js"><a href="#执行js" class="headerlink" title="执行js"></a>执行js</h2><ol><li><p>语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">js = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    console.log(&quot;&#123;&#125;&quot;);</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>.<span class="built_in">format</span>(<span class="string">&#x27;hello world!&#x27;</span>)</span><br><span class="line">wd.execute_script(js)  <span class="comment"># 执行上面的js代码</span></span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>js代码可以使用放在三个双引号之间（如上面格式） </li><li>js中注释符号为//，注意和python注释的符号区分</li></ul></li><li><p>案例：使用js打开一个新的标签页，并将窗口切换到该标签，关闭新标签页并将窗口切换回最开始的标签页</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">wd = webdriver.Chrome(<span class="string">&#x27;D:\environment\chromedriver.exe&#x27;</span>)</span><br><span class="line"></span><br><span class="line">wd.get(<span class="string">&quot;https://plushine.cn&quot;</span>)</span><br><span class="line">print(wd.title)  <span class="comment"># 通过打印窗口title，判断所在的标签页</span></span><br><span class="line"></span><br><span class="line">js = <span class="string">&quot;&quot;&quot; //js代码</span></span><br><span class="line"><span class="string">    window.open(&#x27;https://www.baidu.com&#x27;)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">wd.execute_script(js)  <span class="comment"># 运行js代码</span></span><br><span class="line"></span><br><span class="line">hanldeList = wd.window_handles</span><br><span class="line">wd.switch_to.window(hanldeList[<span class="number">-1</span>])  <span class="comment"># 打开最新的标签页</span></span><br><span class="line">print(wd.title)  <span class="comment"># 打印title，判断窗口是否切换成功</span></span><br><span class="line"></span><br><span class="line">wd.close()  <span class="comment"># 关闭当前标签页</span></span><br><span class="line">wd.switch_to.window(hanldeList[<span class="number">0</span>])  <span class="comment"># 将窗口切换切换到最开始的标签页</span></span><br><span class="line"></span><br><span class="line">print(wd.title)</span><br></pre></td></tr></table></figure><p>运行过程：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/10/22/547b7f736e8eaa653f723a972f41b6f3.png" width="70%"/><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/10/22/f3478d7e506c9216d7d87812f0fedbab.png" width="70%"/><p>注意：常用的窗口切换</p><ul><li><p>handles = wd.window_handles          #获取当前浏览器的所有窗口句柄</p></li><li><p>wd.switch_to.window(handles[-1])     #切换到最新打开的窗口</p></li><li><p>wd.switch_to.window(handles[-2])     #切换到倒数第二个打开的窗口</p><p>…</p></li><li><p>wd.switch_to.window(handles[0])      #切换到最开始打开的窗口</p></li></ul></li></ol><h1 id="Xpath"><a href="#Xpath" class="headerlink" title="Xpath"></a>Xpath</h1><blockquote><p>我一般都是用css选择器，当css不能选择时再使用xpath，所以总结的不全面</p></blockquote><ol><li><p>定义：堂兄节点，下图橙色框中两个节点互为堂兄节点</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/10/22/a34fa436c1a8dc00b80f7110c48eac19.png" width="70%"/></li><li><p>语法：</p><ul><li>选择子节点：/</li><li>选择父节点：/..</li><li>选择div标签：div</li><li>选择第二个子元素且标签为div的节点：div[2]</li></ul></li><li><p>案例：使用css选择器选择上图中的span标签，再使用xpath选择div标签</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">element = wd.find_element_by_css_selector(<span class="string">&#x27;interaction-status evaluation&#x27;</span>)  <span class="comment"># 先使用css选择器，选择span标签</span></span><br><span class="line"><span class="built_in">str</span> = element.find_element_by_xpath(<span class="string">&#x27;./../div[2]&#x27;</span>)  <span class="comment"># 再使用xpath语句选择div</span></span><br><span class="line"></span><br><span class="line">print(<span class="built_in">str</span>.text)</span><br></pre></td></tr></table></figure></li><li><p>注意：</p><ul><li>wb的基础上选择要在xpath语句最前面加上’.’（类似css的局部选择时）</li><li>wd的基础上选择不需要添加</li></ul></li></ol><h1 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h1><ol><li>课程知识很全，老师讲解很细</li><li>b站还有老师的app自动化和Python Qt的课程，有时间就看</li><li>明天开始写云班课互评作业的脚本，有可能就写刷课的脚本，代码到时候会开源</li></ol><hr><p>不足之处，欢迎留言，会及时回复，及时更正！</p><p>创作不易，感谢支持！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://plushine.cn/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="selenium" scheme="https://plushine.cn/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/selenium/"/>
    
    
      <category term="Selenium" scheme="https://plushine.cn/tags/Selenium/"/>
    
  </entry>
  
  <entry>
    <title>QQ推送今日天气(python+云函数)</title>
    <link href="https://plushine.cn/27214.html"/>
    <id>https://plushine.cn/27214.html</id>
    <published>2020-10-16T23:31:45.000Z</published>
    <updated>2020-11-30T08:36:11.907Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>本文章最初发布在 <a href="https://plushine.cn">XJHui’s Blog</a>，未经允许，任何人禁止转载！</p><p><font color="red" style="font-weight:700">注意：</font>最新修改版本已发布在 <a href="https://plushine.cn/27214.html">这里</a>，点击前往查看！</p><h1 id="Weather-Push"><a href="#Weather-Push" class="headerlink" title="Weather-Push"></a>Weather-Push</h1><p>QQ、群推送今日天气（python+云函数）</p><p>github项目地址：<a href="https://github.com/xingjiahui/Weather-Push">https://github.com/xingjiahui/Weather-Push</a></p><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><h2 id="功能介绍"><a href="#功能介绍" class="headerlink" title="功能介绍"></a>功能介绍</h2><ul><li>支持推送到QQ、群，数目无限制</li><li>不同QQ、群可推送不同地区天气</li><li>推送内容丰富（日期，地区，天气，最高气温，最低气温，当前气温，风向，风力，空气指数，pm2.5指数，运动指数，天气小提示，能见度等内容）</li></ul><h2 id="运行界面"><a href="#运行界面" class="headerlink" title="运行界面"></a>运行界面</h2><ol><li><p>执行日志：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/10/bbc3f72840f5c7ba845edb9beae38af2.png" width="70%"/></li><li><p>QQ推送：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/10/55ed82d679b0bfa6fa588763a87e0c14.png" width="70%"/></li><li><p>群推送：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/10/3225d04005669f4812ffc8c0d0b961c9.png" width="70%"/><p>注意：为了降低接口压力和避免不必要问题，两次推送强制间隔20s+。</p></li></ol><h2 id="使用须知"><a href="#使用须知" class="headerlink" title="使用须知"></a>使用须知</h2><ol><li><p>免费，腾讯云函数每月100万次免费调用额度，本项目每天只调用一次：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/10/17/e7d342f9854e007545d4f373e5debe79.png" width="70%"/></li><li><p>所有接收推送的QQ、群均需要添加机器人为好友（不然怎么给你推送）</p></li></ol><h2 id="语言库"><a href="#语言库" class="headerlink" title="语言库"></a>语言库</h2><ul><li>python 3.8</li><li>requests 2.24.0（接口get请求）</li><li>pyyaml 5.3.1（配置文件）</li><li>json 2.0.9（数据格式化）</li></ul><h1 id="使用该项目"><a href="#使用该项目" class="headerlink" title="使用该项目"></a>使用该项目</h1><h2 id="下载项目"><a href="#下载项目" class="headerlink" title="下载项目"></a>下载项目</h2><ol><li><p>进入 <a href="https://github.com/xingjiahui/Weather-Push">Weather-Push</a> 项目主页，按下图依次点击 <code>code</code> 、<code>Download ZIP</code>：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/10/17/d88653d8849d9841b92b51b98f4ecca4.png" width="70%"/></li><li><p>解压缩到桌面：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/10/17/8dbab4406941f24cfca997c2ff99d339.png" width="70%"/><p>注意：尽管云函数有直接上传zip的选项，但我尝试了几次均上传失败，所以请务必解压后上传。</p></li></ol><h2 id="添加好友"><a href="#添加好友" class="headerlink" title="添加好友"></a>添加好友</h2><ol><li><p>qq扫描二维码，添加该机器人为好友：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/10/de589671f1a0cda2eff145a15324bad2.png" width="30%"/></li><li><p>群推送：添加好友后，将其拉入群聊（注意保护群聊隐私）。</p></li></ol><h2 id="创建云函数"><a href="#创建云函数" class="headerlink" title="创建云函数"></a>创建云函数</h2><ol><li><p>进入 <a href="https://console.cloud.tencent.com/scf/index?rid=4">腾讯云函数</a> 首页：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/10/17/f3178eb44e1264a27c02e41e9a51b51e.png" width="70%"/><p>注意：若账号注册有问题，请自行百度</p></li><li><p>点击左侧 <code>函数服务</code> ，<code>新建</code> 云函数：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/10/17/48d34dd37daf27b823f50107b556f37c.png" width="70%"/></li><li><p>填写 <code>基本信息</code>：</p><ul><li>函数名称：自定义</li><li>运行环境：python 3.6</li><li>其余均为默认，点击 <code>下一步</code></li></ul></li><li><p>填写 <code>函数配置</code>：</p><ul><li><p>描述：QQ推送今日天气（python+云函数）</p></li><li><p>高级配置：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/10/bf3ee3ec6efb2f04c0da3cb689dc221c.png" width="70%"/></li><li><p>其余配置项默认即可，点击完成</p></li></ul></li><li><p>按下图 <code>上传</code> 前面解压的文件夹，点击 <code>保存</code>：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/10/17/6329d7786535df00256c291008ef3965.png" width="70%"/></li><li><p>项目上传成功：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/10/17/c8ae64c9a9bfbc323b508d76fcd749cf.png" width="70%"/></li></ol><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><ol><li><p>打开配置文件：左侧文件树中找到 <code>userData.yml</code> 文件，双击打开：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/10/acd985156af55ce53ede998a70e2550d.png" width="70%"/><p>注意：填写完成后，按下快捷键：<code>ctrl+s</code> 保存修改</p></li><li><p>推送到QQ：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/10/ec1c9d12e466ebe0f34bc8fab285fbc0.png" width="70%"/></li><li><p>推送到QQ群：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/09/46bf7e087ec046614b37e8a82ca30e0a.png" width="70%"/><p>注意：要添加多个QQ、群时，按序号依次添加即可，注意缩进。</p></li></ol><h2 id="测试运行"><a href="#测试运行" class="headerlink" title="测试运行"></a>测试运行</h2><ol><li><p>完成以上步骤，点击下图中的 <code>保存并测试</code>：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/10/17/8ca0413e26e52921687ed50881e8646e.png" width="70%"/></li><li><p>运行成功：</p><ul><li><p>执行日志：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/10/bbc3f72840f5c7ba845edb9beae38af2.png" width="70%"/></li><li><p>QQ、群推送：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/10/cad8c973acc2df9ede4bf5e36f9310e7.png" width="40%"/></li><li><p>今日天气：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/10/ada05801aa1fd3e53852ddb9d5abe482.png" width="70%"/></li></ul></li></ol><h1 id="脚本维护"><a href="#脚本维护" class="headerlink" title="脚本维护"></a>脚本维护</h1><h2 id="定时触发"><a href="#定时触发" class="headerlink" title="定时触发"></a>定时触发</h2><ol><li><p>创建触发器：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/10/17/440eab62174e21c346c9f2097261ec0f.png" width="70%"/></li><li><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/10/8ed89283594131b858a4c4fd205afa48.png" width="70%"/><p>注意：不要尝试与推送机器人对话，他不会回复你的</p></li></ol><h2 id="问题反馈"><a href="#问题反馈" class="headerlink" title="问题反馈"></a>问题反馈</h2><ol><li>项目 issues 地址：<a href="https://github.com/xingjiahui/Weather-Push/issues">https://github.com/xingjiahui/Weather-Push/issues</a></li><li>作者博客留言板：<a href="https://plushine.cn/messageboard/">https://plushine.cn/messageboard/</a></li></ol><h2 id="更新日志"><a href="#更新日志" class="headerlink" title="更新日志"></a>更新日志</h2><ul><li><p><code>v2.0</code> 2020.11.10</p><ul><li><p>修复因云函数重复执行导致的重复推送问题</p></li><li><p>修复因qmsg缓存异常导致的推送昨日天气的bugs</p></li><li><p>弃用 <code>高德地图</code> api、<code>一言</code> api、<code>Qmsg酱</code> api</p></li><li><p>简化配置，支持同时推送到QQ和群</p></li><li><p>不同QQ、群可推送不同地区天气</p></li><li><p>丰富推送内容（显示今日天气对应表情）</p></li><li><p>项目快照：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/10/55ed82d679b0bfa6fa588763a87e0c14.png" width="70%"/></li></ul></li><li><p><code>v1.0</code> 2020.10.17</p><ul><li><p>通过高德地图api获取天气信息</p></li><li><p>支持多用户（多地区）天气推送</p></li><li><p>推送内容添加 <code>一言</code> 短句</p></li><li><p>脚本支持部署到云函数</p></li><li><p>项目快照：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/11/10/37933c73b83219eae0e887e61f88d2b0.png" width="70%"/></li></ul></li></ul><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><ul><li>此脚本是作者利用业余时间所写，禁止用于商业、非法用途 </li><li>此脚本无任何恶意代码，但可能存在些许bug，因此所造成的损失与本人无关 </li><li>使用、运行本脚本即代表同意上述声明</li></ul><h1 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h1><ol><li><p>服务支持：</p><ul><li><p><del><a href="https://lbs.amap.com/api/webservice/guide/api/weatherinfo/#t1">高德地图</a>：提供免费天气API</del></p></li><li><p><a href="https://cloud.tencent.com/product/scf">腾讯云函数</a>：触发、执行python项目</p></li><li><p><del><a href="https://qmsg.zendee.cn/">Qmsg酱</a>：QQ消息推送API</del></p></li><li><p><del><a href="https://api.uixsj.cn/hitokoto/index.html">一言</a>：一言API</del></p></li><li><p><a href="http://qqpusher.yanxianjun.com/doc/">QQPusher</a>：QQ、QQ群消息推送API</p></li><li><p><a href="https://tianqiapi.com/index/doc?version=v61">实况天气</a>：天气APi</p></li></ul></li><li><p>技术支持：</p><ul><li><a href="https://www.cnblogs.com/wbw-test/p/11580887.html">博客园-阿宅gogo</a>：python发送get请求</li><li><a href="https://blog.csdn.net/abby1559/article/details/79971957">CSDN-站在风口</a>：python字典初始化</li><li><a href="https://blog.csdn.net/chenzhanhai/article/details/106782325">CSDN-占海</a>：腾讯云函数添加依赖函数库</li><li><a href="https://blog.csdn.net/marselha/article/details/91872832">CSDN-marselha</a>：关于UnicodeDecodeError: ‘gbk’ codec can’t decode byte 的解决方法</li><li><a href="https://blog.csdn.net/qq_40986486/article/details/103934408">CSDN-GhostRiderQin</a>：python加载YAML文件警告：YAMLLoadWarning: calling yaml.load() without… 的解决方法</li><li><a href="http://cn.piliapp.com/emoji/list/weather/">工具邦</a>：天气表情</li></ul></li></ol><hr><p>不足之处，欢迎留言，会及时回复，及时更正！</p><p>创作不易，感谢支持！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="个人项目" scheme="https://plushine.cn/categories/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/"/>
    
      <category term="天气推送(python)" scheme="https://plushine.cn/categories/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/%E5%A4%A9%E6%B0%94%E6%8E%A8%E9%80%81-python/"/>
    
    
  </entry>
  
  <entry>
    <title>linux实用命令（下）</title>
    <link href="https://plushine.cn/4989.html"/>
    <id>https://plushine.cn/4989.html</id>
    <published>2020-10-06T09:49:49.000Z</published>
    <updated>2020-10-06T10:00:17.686Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>本文章最初发布在 <a href="https://plushine.cn">XJHui’s Blog</a>，未经允许，任何人禁止转载！</p><p><font color="red" style="font-weight:700">注意：</font>最新修改版本已发布在 <a href="https://plushine.cn/4989.html">这里</a>，点击前往查看！</p><h1 id="定时任务调度"><a href="#定时任务调度" class="headerlink" title="定时任务调度"></a>定时任务调度</h1><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/27/356dbddea87480c3fe75a2e647acf6f5.png" width="50%"/><h2 id="crond任务调度"><a href="#crond任务调度" class="headerlink" title="crond任务调度"></a>crond任务调度</h2><ol><li><p>概述：</p><ul><li>定义：是指系统在某个特定的时间执行特定的命令或程序</li><li>用处：<ul><li>系统工作：有些重要的工作必须周而复始的执行，如病毒查杀</li><li>用户工作：个别用户需要执行某些程序，比如对mysql数据库备份</li></ul></li></ul></li><li><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">crontab -e  # 编辑crond任务调度</span><br><span class="line">crontab -r  # 终止任务调度</span><br><span class="line">crontab -l  # 列出当前的任务调度</span><br><span class="line">service crond restart  # 重启任务调度</span><br></pre></td></tr></table></figure></li><li><p>案例：新建一条crond任务，每隔一分钟就将/etc/的文件列表覆盖写入/tmp/to.txt文件下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">crontab -e  # 设置个人任务调度</span><br><span class="line">*/1 * * * * ls -l /etc/ &gt;&gt; /tmp/to.txt  # 任务调度内容，*/1 * * * * 为cron时间表达式</span><br></pre></td></tr></table></figure><p>任务调度组成：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/28/e77aecc3ddb89fe7354d24ff156e25ae.png" width="70%"/><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/27/df1b3a25961b706756c25bee76a4dcb4.png" width="70%"/><p>注意：简单命令可以直接在crontab中直接写入，复杂任务需要写脚本运行</p></li><li><p>cron表达式：</p><ul><li><p>组成：_ _ _ _ _ （5个位置）</p></li><li><p>每个位置的含义：</p><ul><li>分（0-59）</li><li>时（0-23）</li><li>日（1-31）</li><li>月（1-12）</li><li>周（0-7）0、7均表示周日</li></ul></li><li><p>特殊符号：</p><ul><li>*：代表任何时间</li><li>，：代表不连续时间</li><li>-：代表连续时间</li><li>*/n：代表每隔多久执行一次</li></ul></li><li><p>案例：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/27/7a419de116bf5dec365ca9c869de3394.png" width="70%"/></li></ul></li></ol><h2 id="cron应用实例"><a href="#cron应用实例" class="headerlink" title="cron应用实例"></a>cron应用实例</h2><blockquote><p>每隔一分钟将当前的日期信息，追加到/root/mydate文件中（脚本实现）</p></blockquote><ol><li><p>先编写一个shell文件 mytask1.sh：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim mytask.sh</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/27/2ace1166cf7b9264a19b8492be60835c.png" width="70%"/><p>注意：命令行输入shell脚本 <code>路径/名称</code> 即可直接运行</p></li><li><p>给shell文件一个可执行权限：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 744 mytask1.sh</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/27/450ba7eac0cc52bbe6ab583e501315b1.png" width="70%"/></li><li><p>在crontab中添加新行即表示添加定时任务：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/28/3028fcce59c96d8060bdf0aed57fda66.png" width="70%"/></li><li><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/27/83f84435a1ed4a3e579a90f9c34c0152.png" width="70%"/></li></ol><h1 id="磁盘分区和挂载"><a href="#磁盘分区和挂载" class="headerlink" title="磁盘分区和挂载"></a>磁盘分区和挂载</h1><h2 id="分区类型"><a href="#分区类型" class="headerlink" title="分区类型"></a>分区类型</h2><ol><li>mbr分区：<ul><li>最多支持四个主分区</li><li>系统只能安装在主分区</li><li>拓展分区要占一个主分区</li><li>MBR最大只支持2TB，但拥有最好的兼容性</li></ul></li><li>gpt分区：<ul><li>支持无限多个主分区（但操作系统可能限制，例如windows下最多128个分区）</li><li>最大支持18EB的容量（1EB=1024PB，1PB=1024TB）</li><li>windows7后64位支持gpt</li></ul></li></ol><h2 id="windows分区"><a href="#windows分区" class="headerlink" title="windows分区"></a>windows分区</h2><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/28/0c0ee2f55224b671dae6c26aeeb7f65c.png" width="50%"/><h2 id="linux分区"><a href="#linux分区" class="headerlink" title="linux分区"></a>linux分区</h2><ol><li><p>原理介绍：</p><ul><li>linux无论几个分区，分给哪一个目录使用，归根结底就只有一个根目录，linux每个分区都是整个文件系统的一部分</li><li>linux采用了一种 ”载入“ 的处理方法，它的文件系统中包含了一整套的文件和目录，且将一个分区和一个目录联系起来</li></ul></li><li><p>原理示意图：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/28/93aac9bfb1672eafcc74c5fc4075805b.png" width="50%"/></li><li><p>查看磁盘分区情况：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsblk -f  # 查看磁盘分区情况</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/28/3a1c86f35de58a622091530f93df63d9.png" width="70%"/></li><li><p>磁盘详细信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsblk  # 显示磁盘详细信息(包含大小)</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/28/982a890f196d1f8344943fe47ffa7d70.png" width="70%"/></li></ol><h2 id="新增磁盘"><a href="#新增磁盘" class="headerlink" title="新增磁盘"></a>新增磁盘</h2><ol><li><p>需求：增加一块硬盘（sdb1，2G），并将其挂载到/home/newdisk</p></li><li><p>示意图：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/28/4d04007a8ee40b01cc67eac05083abf8.png" width="70%"/></li><li><p>如何增加一块硬盘：</p><ul><li><p>虚拟机添加硬盘</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/28/7ee4943cabbf41bf684ced89228ec030.png" width="70%"/><p>使用 <code>lsblk</code> 命令查看磁盘分区情况，新添加的磁盘并未显示：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/28/e4d0f9e1b2920677841f4ddf8685ec1d.png" width="70%"/><p>重启后，重新执行该命令：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/29/716c0832aac26688db08137b433f0fc9.png" width="70%"/></li><li><p>分区</p><blockquote><p>sdb是一整块磁盘，要把它像sda一样分成sdb1…</p></blockquote><ul><li><p>使用 <code>fdisk /dev/sdb</code> 命令将磁盘分区：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/29/0f37a2569884e5a4bfe61dcce9bbd9ac.png" width="70%"/></li><li><p>输入m获取帮助：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/29/7b5dd2927cc501e695ef1f44f6af7b4e.png" width="70%"/></li><li><p>创建新分区：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/29/5d8c281d8447ebdfb2aafbed5b45c7e2.png" width="70%"/></li><li><p>再次使用 <code>lsblk -f</code> 查看磁盘分区情况：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/29/ef05d2e5db8f39171330f1f89d651a62.png" width="70%"/></li></ul></li><li><p>格式化</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkfs -l ext4 /dev/sdb1</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/29/62741e9137fc0533d806fd22098064a5.png" width="70%"/><p>格式化后，使用命令 <code>lsblk -f</code> 可查看其uuid：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/29/fb91f41e30d9da6e4b3147120cba7373.png" width="70%"/></li><li><p>挂载：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount /dev/sdb1 /home/newdisk/</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/29/221550a11b53b2b51521d3a0f992fb79.png" width="70%"/></li><li><p>设置自动挂载：</p><blockquote><p>如果不设置自动挂载，系统重启后挂载会被取消</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/fstab</span><br></pre></td></tr></table></figure><p>添加一行内容：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/29/15e29409adfc75d8208856a33109455b.png" width="70%"/></li></ul></li></ol><h1 id="磁盘情况查询"><a href="#磁盘情况查询" class="headerlink" title="磁盘情况查询"></a>磁盘情况查询</h1><h2 id="df"><a href="#df" class="headerlink" title="df"></a>df</h2><ol><li><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df -l  # 查看系统整体磁盘使用情况</span><br></pre></td></tr></table></figure></li><li><p>案例：查看系统整体磁盘使用情况</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df -lh  # 可选参数h，可将磁盘大小单位替换为K、G、T等</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/29/3335b7f2082b6b4f5bb32e14eb44e3d1.png" width="70%"/></li></ol><h2 id="du"><a href="#du" class="headerlink" title="du"></a>du</h2><ol><li><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">du /目录  # 查看指定目录磁盘占用情况，默认为当前目录</span><br></pre></td></tr></table></figure></li><li><p>可选参数：</p><ul><li>h   # 带计量单位</li><li>a  # 含文件</li><li>s  # 指定目录占用大小汇总</li><li>c  # 列出明细的同时，增加【总用量】</li><li>–max-depth=1  # 子目录深度</li></ul></li><li><p>案例：查看/opt目录的磁盘占用情况，深度为1</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">du -ach --max-depth=1 /opt</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/29/69697b98f4af8d92720243a0a0938825.png" width="70%"/><p>注意：增加depth深度不会影响总用量，但会增加文件搜索深度</p></li></ol><h2 id="wc"><a href="#wc" class="headerlink" title="wc"></a>wc</h2><ol><li><p>统计/home文件夹下文件个数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -l /home/ | grep &quot;^-&quot; | wc -l  # grep后跟的是正则表达式</span><br></pre></td></tr></table></figure></li><li><p>统计/home文件夹下目录个数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -l /home/ | grep &quot;^d&quot; | wc -l</span><br></pre></td></tr></table></figure></li><li><p>统计/home文件夹下文件个数，包含子文件夹中的文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -lR /home/ | grep &quot;^-&quot; | wc -l</span><br></pre></td></tr></table></figure></li><li><p>统计/home文件见下的目录个数，包含子文件夹中的目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -lR /home/ | grep &quot;^d&quot; | wc -l</span><br></pre></td></tr></table></figure></li><li><p>以树状显示/home目录结构</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tree /home</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/29/973e134bf2b322182b033b4f41e5fc22.png" width="70%"/><p>注意：如果出现下图提示，使用 <code>yum install tree</code> 命令安装tree（输入两次y）后，重新执行即可</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/29/69e06a84b713e5700b4ea69c235aa3d5.png" width="70%"/></li></ol><h1 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h1><h2 id="NAT原理图"><a href="#NAT原理图" class="headerlink" title="NAT原理图"></a>NAT原理图</h2><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/29/5a6414c9f2ed9712c8e7243fc77ea8b2.png" width="70%"/><h2 id="动态ip"><a href="#动态ip" class="headerlink" title="动态ip"></a>动态ip</h2><blockquote><p>自动获取，系统开机后不需要手动连接网络</p></blockquote><ol><li><p>进入系统-》首选项-》网络连接，编辑网络，勾选自动连接并应用：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/29/874d748cb3b54876b48b4758aa0c5600.png" width="70%"/></li><li><p>重启系统，观察网络是否自动连接：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/29/60ff1e1880ebf895d09cef135bb73faf.png" width="70%"/><p>缺点：linux每次自动获取的ip可能不一样，因此该方法不适用于服务器（服务器ip是不变的）</p></li></ol><h2 id="静态ip"><a href="#静态ip" class="headerlink" title="静态ip"></a>静态ip</h2><ol><li><p>原理：通过修改配置文件（/etc/sysconfig/network-scripts/ifcfg-eth0）来指定静态ip，并连接到因特网</p></li><li><p>案例：配置ip地址为静态ip</p><ul><li><p>确定要分配的ip地址段：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/29/46a581a874545b4a504e428f8bfbc399.png" width="70%"/></li><li><p>修改配置文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/sysconfig/network-scripts/ifcfg-eth0  # ip地址以192.168.72.130为例</span><br></pre></td></tr></table></figure><p>修改内容：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/10/06/9acede5678a26ad44b142e33878ee67c.png" width="70%"/></li><li><p>重启服务/系统：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service network restart  # 重启网络服务或重启系统（reboot）</span><br></pre></td></tr></table></figure></li></ul></li></ol><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/29/ec6d0fa3bcc40d7a9f8329a834920d55.png" width="70%"/><ul><li><p><code>ifconfig</code> 命令查看系统ip：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/29/ef1ff7a9c0d1c28beb60786ff5d2336f.png" width="70%"/></li><li><p>测试是否能够连接外网：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/29/12f06ef9bba48928f392219334dd3b4b.png" width="70%"/></li></ul><h1 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h1><h2 id="基本认识"><a href="#基本认识" class="headerlink" title="基本认识"></a>基本认识</h2><ol><li><p>在linux中，每个执行的程序（代码）都称为一个进程，每一个进程都分配一个进程id</p></li><li><p>每一个进程都会对应一个父进程，而这个父进程可以复制多个子进程</p></li><li><p>每个进程都能以两种方式存在（前台和后台）：</p><ul><li>前台就是用户目前屏幕上可以进行操作的</li><li>后台进程则是实际在操作的（屏幕上无法看到的进程，通常使用后台方式执行）</li></ul></li><li><p>一般系统的服务都是以后台进程的方式存在，而且都会常驻在系统中，直到关机才结束</p></li></ol><h2 id="系统进程"><a href="#系统进程" class="headerlink" title="系统进程"></a>系统进程</h2><ol><li><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ps -aux[可选项，显示所有进程，用户格式显示，显示进程参数]  # 查看系统进程</span><br><span class="line">ps -ef  # 显示指令的父进程</span><br></pre></td></tr></table></figure></li><li><p>案例：</p><ul><li><p>查找系统全部进程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -aux | more  # 使用more指令分页，方便查看</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/29/300afffdfc6509c57233def020437f92.png" width="70%"/><p>注意：可以使用grep命令从所有命令中筛选出来某个进程（sshd为例）</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/29/2adbf85081ae75a0c9ceee40854af8d1.png" width="70%"/></li><li><p>显示进程的父进程：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | more  # 显示父进程</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/29/f6667bf0ff5f7f087c0ffbf468fe4b6b.png" width="70%"/></li></ul></li></ol><h2 id="进程树"><a href="#进程树" class="headerlink" title="进程树"></a>进程树</h2><ol><li><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pstree -p[可选，显示进程id]  # 树状显示所有进程</span><br></pre></td></tr></table></figure></li><li><p>案例：树状形式显示所有进程及其id号</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/30/c07777eda07bb52bf28eb2825e7518fb.png" width="70%"/></li></ol><h2 id="终止进程"><a href="#终止进程" class="headerlink" title="终止进程"></a>终止进程</h2><ol><li><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kill -9[可选项，强制停止] 进程号  # 停止进程，当要kill的进程是系统进程时如果不加-9该指令会被忽略</span><br><span class="line">killall 进程名称  # 批量终止进程，进程名称支持通配符</span><br></pre></td></tr></table></figure></li><li><p>案例：</p><ul><li><p>踢掉非法登录的用户jerry：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ps -aux | grep sshd  # 获取jerry远程连接（sshd）的进程号*</span><br><span class="line">kill -9 *  # 使用kill命令，将该进程停止</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/29/64b1ad5ca3ef79a2f0f2671c313c6acf.png" width="70%"/></li><li><p>终止所有远程连接：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">killall sshd  # 停止所有sshd服务</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/30/aa63ab9d20f30ad0221a964be066ae07.png" width="70%"/></li><li><p>终止终端进程：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ps -aux | grep bash  # 查询终端（bash）的进程号*</span><br><span class="line">kill -9 *  # 终端为系统进程，单独执行kill *无效果</span><br></pre></td></tr></table></figure><p>查询进程号：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/30/5c080f1fa71554e497776e3735c60f61.png" width="70%"/><p>终止该进程：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/30/a7be70bd9f938af71715d6fcdbd890df.png" width="70%"/></li></ul></li></ol><h2 id="服务管理"><a href="#服务管理" class="headerlink" title="服务管理"></a>服务管理</h2><ol><li><p>介绍：</p><p>服务（service）本质就是进程，但是在后台运行的，通常都会监听某个端口，等待其他程序的请求，例如（mysqld，sshd，防火墙等），因此我们又称为守护进程。</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/30/fb82eaf1a6bd7abb8502004e06ca7ddb.png" width="70%"/></li><li><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service 服务名 [start|stop|restart|reload|status]  # 开启、停止、重启、重新加载（服务不会中断）、状态查询</span><br></pre></td></tr></table></figure></li><li><p>案例：</p><ul><li><p>查看当前防火墙（iptables）的状态，关闭和启动防火墙</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service iptables status  # 查询防火墙状态</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/30/b6d058d320d05816e1e1a284009a37c1.png" width="70%"/></li><li><p>关闭防火墙</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service iptables stop  # 关闭、启动防火墙</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/30/ca48de7a4983f87fd5b765876f9545a2.png" width="70%"/></li></ul></li><li><p>补充：</p><ul><li><p>查看某个端口状态：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">telnet ip地址 端口号</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/30/57096774e02f6c0e99da98b0b574131c.png" width="70%"/></li><li><p>查看所有服务名称：</p><ul><li><p>setup：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/30/d2b39d2efe0c6ba8f1950e0407baaae2.png" width="70%"/></li><li><p>/etc/init.d子目录：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/init.d  # 进入该目录</span><br><span class="line">ls -l  # 查看子目录</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/30/25febe3382b717c97cfe12a90030ba4b.png" width="70%"/><p>注意：每个目录都代表一种服务</p></li></ul></li><li><p>管理每个系统（服务）运行级别下某个服务自启动：</p><ul><li><p>查看自启动状态：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chkconfig --list  # 查看每个运行级别下不同服务的自启动状态</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/30/f5cbbf70c8bb85b482635bacda5977ea.png" width="70%"/></li><li><p>案例：关闭sshd服务运行级别为5时的自启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chkconfig --level 5 sshd off  # 控制自启动状态</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/30/58fd4be6951ed72ffac0d4a6edd34f36.png" width="70%"/></li><li><p>注意：使用chkconfig命令修改自启动后需要重启系统才能生效</p></li></ul></li></ul></li><li><p>实例：</p><ul><li><p>案例1：请显示当前系统所有服务的各个运行级别的运行状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chkconfig --list</span><br></pre></td></tr></table></figure></li><li><p>案例2：请查看sshd服务的运行状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service ssdh status</span><br></pre></td></tr></table></figure></li><li><p>案例3：将sshd服务在运行级别5下设置为不自动启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chkconfig --level 5 sshd off</span><br></pre></td></tr></table></figure></li><li><p>案例4：当运行级别为5时，关闭防火墙</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chkconfig --level 5 iptables off</span><br></pre></td></tr></table></figure></li><li><p>案例5：在所有运行级别下，关闭防火墙</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chkconfig iptables off  # 如果不指定运行级别，则代表全部运行级别</span><br></pre></td></tr></table></figure></li><li><p>案例6：在所有运行级别下，开启防火墙</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chkconfig iptables on</span><br></pre></td></tr></table></figure></li></ul></li></ol><h2 id="动态监控进程"><a href="#动态监控进程" class="headerlink" title="动态监控进程"></a>动态监控进程</h2><ol><li><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">top  # 查看正在运行的进程，与ps的区别是可以动态显示系统进程（每3秒自动刷新一次）</span><br></pre></td></tr></table></figure></li><li><p>案例：</p><ul><li><p>动态显示系统进程，每隔10秒刷新一次：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">top -d 10</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/30/cba804cd0a1aa0522303a8a2a262f47f.png" width="70%"/></li><li><p>查询指定用户进程：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">u  # top状态下按下u键并输入用户名，即可显示指定用户的进程</span><br></pre></td></tr></table></figure></li><li><p>杀死指定进程：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">k  # top状态下按下k键并输入进程id，即可杀死该id对应的进程</span><br></pre></td></tr></table></figure></li><li><p>退出top指令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">q</span><br></pre></td></tr></table></figure></li></ul></li></ol><h2 id="监控网络状态"><a href="#监控网络状态" class="headerlink" title="监控网络状态"></a>监控网络状态</h2><ol><li><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -anp  # 查看系统网络情况</span><br></pre></td></tr></table></figure></li><li><p>案例：监控sshd网络服务状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -anp | grep sshd</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/30/b19dda6cbff690e9da8db2873efda932.png" width="70%"/></li></ol><h1 id="rpm包管理"><a href="#rpm包管理" class="headerlink" title="rpm包管理"></a>rpm包管理</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><pre><code>一种用于互联网下载包的打包及安装工具，生成具有.rpm拓展名的文件。rpm是Redhat Package Manager的缩写，类似windows的setup.exe。</code></pre><h2 id="查询指令"><a href="#查询指令" class="headerlink" title="查询指令"></a>查询指令</h2><ol><li><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa  # 查询系统所安装的全部rpm包</span><br><span class="line">rpm -qi  软件名 # 查询安装包详细信息（版本、安装包）</span><br><span class="line">rpm -ql  软件名 # 查询软件安装路径</span><br><span class="line">rpm -qf  包名  # 查询所属软件包</span><br></pre></td></tr></table></figure></li><li><p>案例：</p><ul><li><p>查询火狐（firefox）的rpm包信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa | grep firefox</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/30/9296abdbc25859c8dfc3bbb2c059cbb1.png" width="70%"/></li><li><p>查询/etc/passwd目录所属软件包：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -qf /etc/passed</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/30/d380893c8d3b609422c276bebeadcb1d.png" width="70%"/></li></ul></li></ol><h2 id="卸载指令"><a href="#卸载指令" class="headerlink" title="卸载指令"></a>卸载指令</h2><ol><li><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -e 软件名  # 卸载软件</span><br></pre></td></tr></table></figure></li><li><p>案例：卸载火狐</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -e firefox</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/30/ca86de1c2a04b2fcc7cc4bf788a24970.png" width="70%"/><p>注意：在卸载时，可能提示 <code>removing these packages would break dependencies:foo is needed by bar-1.0-1</code></p><ul><li>放弃删除</li><li>强制删除：rpm -e –nodeps firefox（不推荐）</li></ul></li></ol><h2 id="安装指令"><a href="#安装指令" class="headerlink" title="安装指令"></a>安装指令</h2><ol><li><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh[install(安装)，verbose(提示)，hash(进度条)] 包名  # 安装软件包</span><br></pre></td></tr></table></figure></li><li><p>案例：安装镜像文件中的firefox软件包</p><ul><li><p>挂载iso镜像：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/30/637e3afd940e4065fb84083c8320e0e5.png" width="70%"/><p>注意：挂载镜像后，就可以在系统中使用指令对镜像中内容进行操作</p></li><li><p>将/media/CentOS_6.8_Final/Packages/firefox-45.0.1-1.el6.centos.x86_64.rpm文件复制到/opt目录下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp firefox-45.0.1-1.el6.centos.x86_64.rpm /opt/</span><br></pre></td></tr></table></figure><p>注意：系统所需的rpm包都在/Packages下</p></li><li><p>进入/opt目录，使用rpm命令安装该软件包：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh firefox-45.0.1-1.el6.centos.x86_64.rpm</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/30/b6a4dc29a039708799d93cf8ce3b96ba.png" width="70%"/></li></ul></li></ol><h1 id="yum包管理"><a href="#yum包管理" class="headerlink" title="yum包管理"></a>yum包管理</h1><h2 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h2><pre><code>Yum是一个Shell前端软件包管理器。基于RPM包管理，能够从指定的服务器下载RPM包并且安装，可以自动处理依赖关系，并且一次安装所有依赖的软件包（使用yum进行包管理需要联网）。</code></pre><h2 id="基本指令"><a href="#基本指令" class="headerlink" title="基本指令"></a>基本指令</h2><ol><li><p>查询yum服务器是否有需要安装的软件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum list | grep xx  # 筛选软件包</span><br></pre></td></tr></table></figure></li><li><p>安装指定的软件包：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install xxx # 下载安装</span><br></pre></td></tr></table></figure></li></ol><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><blockquote><p>使用yum方式安装firefox</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum list | grep firefox  # 查询yum服务器上是否有该软件</span><br><span class="line">yum install firefox  # 安装firefox</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/10/06/94e4434ce355f493b01c0cb2c05f1df3.png" width="70%"/><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>​    linux笔记差不多就这么多啦！</p><p>​    其实后面还有shell编程，但没太多时间再学下去啦，有时间补上。</p><p>​    后面会更新人工智能的笔记，一定要坚持下去呀！</p><hr><p>不足之处，欢迎留言，会及时回复，及时更正！</p><p>创作不易，感谢支持！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://plushine.cn/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="linux" scheme="https://plushine.cn/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/linux/"/>
    
    
      <category term="实用指令" scheme="https://plushine.cn/tags/%E5%AE%9E%E7%94%A8%E6%8C%87%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>linux实用指令（中）</title>
    <link href="https://plushine.cn/62842.html"/>
    <id>https://plushine.cn/62842.html</id>
    <published>2020-09-26T13:57:10.000Z</published>
    <updated>2020-09-27T01:46:13.170Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>本文章最初发布在 <a href="https://plushine.cn">XJHui’s Blog</a>，未经允许，任何人禁止转载！</p><p><font color="red" style="font-weight:700">注意：</font>最新修改版本已发布在 <a href="https://plushine.cn/62842.html">这里</a>，点击前往查看！</p><h1 id="时间日期类"><a href="#时间日期类" class="headerlink" title="时间日期类"></a>时间日期类</h1><h2 id="date日期"><a href="#date日期" class="headerlink" title="date日期"></a>date日期</h2><ol><li><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">date  # 显示当前时间</span><br><span class="line">date &quot;+%Y&quot;  # 显示当前年份</span><br><span class="line">date &quot;+%Y-%m-%d %H:%M:%S&quot;  # 格式化显示当前年月日时分秒，其中-、:可以任意修改</span><br></pre></td></tr></table></figure></li><li><p>案例：</p><ul><li><p>显示当前时间：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">date</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/25/ed14ac00a477b5ffcd3116078e6d21de.png" width="70%"/></li><li><p>显示年月日时分秒：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">date &quot;+%Y-%m-%d %M:%D:%S&quot;</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/25/030a000746aa0fd999493f27a548cd4c.png" width="70%"/></li></ul></li></ol><h2 id="date设置"><a href="#date设置" class="headerlink" title="date设置"></a>date设置</h2><ol><li><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">date -s &#x27;年-月-日 时:分:秒&#x27;  # 设置日期，必须按照此格式设置时间</span><br></pre></td></tr></table></figure></li><li><p>案例：将日期设置为2020-10-01 0:0:0</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">date -s &#x27;2020-10-01 00:00:00&#x27;</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/25/8f57f93104e4657443680caf909d539e.png" width="70%"/></li></ol><h2 id="cal日历"><a href="#cal日历" class="headerlink" title="cal日历"></a>cal日历</h2><ol><li><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cal year[可选，显示该年份日历]  # 显示本月/指定年份的日历</span><br></pre></td></tr></table></figure></li><li><p>案例：显示2024年日历</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cal 2024</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/25/c0e056c9491ec76c4ec678a19f5c41ce.png" width="70%"/></li></ol><h1 id="搜索查找类"><a href="#搜索查找类" class="headerlink" title="搜索查找类"></a>搜索查找类</h1><h2 id="find"><a href="#find" class="headerlink" title="find"></a>find</h2><ol><li><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find 搜索范围 -name,-user,-size[可选一项] 文件名  # 查找文件</span><br></pre></td></tr></table></figure></li><li><p>案例：</p><ul><li><p>在/root目录下查找名称为c.txt的文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find /root/ -name c.txt  # 通配符也适用</span><br></pre></td></tr></table></figure></li><li><p>查找所有者为root用户的文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find /root/ -user root</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/25/c3cd35ba24b43b8fe7a002f63b105c75.png" width="70%"/></li><li><p>查找整个linux系统下大于20m的文件（+n大于，-n小于，n等于）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -size +20M  # 注意：单位为M、k等</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/25/58526532e4615145cb9bd9d4cf434720.png" width="70%"/></li></ul></li></ol><h2 id="locate"><a href="#locate" class="headerlink" title="locate"></a>locate</h2><ol><li><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">locate 搜索文件  # 快速定位文件路径</span><br></pre></td></tr></table></figure><p>注意：locate基于数据库进行查询，所以在第一次运行前要执行updatedb命令以更新数据库</p></li><li><p>案例：使用locate指令快速定位hello.txt文件所在目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">updatedb  # 更新（创建）数据库</span><br><span class="line">locate hello.txt</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/25/c73a815695685783e44bd478916ed569.png" width="70%"/></li></ol><h2 id="grep和"><a href="#grep和" class="headerlink" title="grep和|"></a>grep和|</h2><ol><li><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">grep 字符串  # 查找指定内容</span><br><span class="line">grep -n 字符串  # 查找指定内容并显示行号</span><br><span class="line">grep -i 字符串  # 不区分大小写</span><br></pre></td></tr></table></figure></li><li><p>案例：在hello.txt中查找所有yes并显示行号</p><ul><li><p>hello.txt内容：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/25/2bc536562763004bf08fc95883692e30.png" width="70%"/></li><li><p>代码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat hello.txt | grep -ni yes</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/25/ea106177b26e2a85a2d868c3a00967ec.png" width="70%"/></li></ul></li></ol><h1 id="压缩和解压类"><a href="#压缩和解压类" class="headerlink" title="压缩和解压类"></a>压缩和解压类</h1><h2 id="gzip和gunzip"><a href="#gzip和gunzip" class="headerlink" title="gzip和gunzip"></a>gzip和gunzip</h2><ol><li><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gzip 文件  # 将文件压缩为.gz文件，后跟多个文件名即可压缩多个文件</span><br><span class="line">gunzip 文件.gz  # 将.gz后缀的文件解压</span><br></pre></td></tr></table></figure></li><li><p>案例：</p><ul><li><p>将/root下的hello.txt文件压缩：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gzip hello.txt</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/25/3c432a62ffb8f07efda685cc709fa62a.png" width="70%"/></li><li><p>将hello.txt.gz文件解压缩：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gunzip hello.txt.gz</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/25/fe440bc4a45f4fa44c5fd5a6abf72037.png" width="70%"/><p>注意：gzip只能用来压缩文件不能用来压缩目录，即使使用-r选项指定目录，也只能递归将目录下文件分别压缩</p></li></ul></li></ol><h2 id="zip和unzip"><a href="#zip和unzip" class="headerlink" title="zip和unzip"></a>zip和unzip</h2><ol><li><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zip -r[可选，递归压缩] 压缩包名 文件  # 压缩文件目录</span><br><span class="line">unzip -d[可选，指定压缩后的位置] 文件.zip  # 解压.zip后缀的文件</span><br></pre></td></tr></table></figure></li><li><p>案例：</p><ul><li><p>将/home目录下的所有文件压缩为mypackage.zip：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zip -r mypackage.zip /home/  # 注意：压缩包名在原目录前面</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/25/d4396a796e87dd4e407af6747dcdd5f3.png" width="70%"/></li><li><p>将mypackage.zip解压到/opt/tmp：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip -d /opt/tmp mypackage.zip  # 注意：解压位置在压缩包前面</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/25/b8fcbf0d3c56d81aa93a32eba64a0b10.png" width="70%"/></li></ul></li></ol><h2 id="tar"><a href="#tar" class="headerlink" title="tar"></a>tar</h2><ol><li><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar [可选项，见下图] ***.tar.gz 要打包的内容（可为多个文件、目录）  # 压缩文件或目录</span><br></pre></td></tr></table></figure><p>可选项：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/25/ea2da0be90ba839acae9d9e8733a5f56.png" width="70%"/></li><li><p>案例：</p><ul><li><p>压缩多个文件，将/root/a.txt，/root/b.txt文件压缩成a_b.tar.gz：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zcvf a_b.tar.gz a.txt b.txt</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/25/6ea9afdaad2619ddda14ce745d020483.png" width="70%"/></li><li><p>压缩/home下的所有文件（非压缩/home目录）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zcvf test.tar.gz /root/*  # 要区分/root/和/root/*</span><br></pre></td></tr></table></figure></li><li><p>解压a_b.tar.gz到当前目录：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf a_b.tar.gz </span><br></pre></td></tr></table></figure></li><li><p>解压a_b.tar.gz到/opt/tmp下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf a_b.tar.gz -C /opt/tmp/  # 注意：指定路径需要在路径前添加参数-C（大写），并且路径必须存在</span><br></pre></td></tr></table></figure></li></ul></li></ol><h1 id="组的管理"><a href="#组的管理" class="headerlink" title="组的管理"></a>组的管理</h1><h2 id="组的介绍"><a href="#组的介绍" class="headerlink" title="组的介绍"></a>组的介绍</h2><ol><li>概述：在linux中的每个用户必须属于一个组，不能独立于组外。</li><li>文件/目录：<ul><li>所有者：文件归属的用户</li><li>所在组：所有者所在的用户组的用户</li><li>其他组：非所在组的其它用户</li></ul></li></ol><h2 id="所有者"><a href="#所有者" class="headerlink" title="所有者"></a>所有者</h2><ol><li><p>查看文件所有者</p><ul><li><p>定义：一般为文件的创建者，谁创建了该文件，就自然成为该文件的创建者。</p></li><li><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -ahl  # 查看文件所有者，a（显示全部文件），h（human，使用M,k作为文件大小单位显示），l（列表显示）</span><br></pre></td></tr></table></figure></li><li><p>案例：创建一个组police，再创建一个用户tom属于组police，然后使用tom来创建一个文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">groupadd police  # 创建police用户组</span><br><span class="line">useradd -g police tom  # police用户组下创建用户tom</span><br><span class="line">passwd tom  # 设置用户tom的密码</span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用tom用户登录服务器</span></span><br><span class="line">touch 1.txt  # 创建文件1.txt</span><br><span class="line">ls -ahl  # 使用ls命令查看1.txt文件的所有者</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/26/8623b6f8c415774b642dbb813b20f7c5.png" width="70%"/></li></ul></li><li><p>修改文件所有者：</p><ul><li><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown 用户 文件  # 将文件所有者修改为用户</span><br></pre></td></tr></table></figure></li><li><p>案例：使用root创建一个apple.txt的文件，将其所有者修改为tom</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">touch apple.txt  # root账户下创建apple.txt文件</span><br><span class="line">ls -ahl  # 查看该文件所有者信息</span><br><span class="line">chown tom apple.txt  # 将apple.txt文件的所有者修改为tom</span><br><span class="line">ls -ahl  # 再次查看该文件所有者信息</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/26/6bfb550923d9ceacd1cad5b44dcb5d7f.png" width="70%"/><p>注意：虽然所有者改变了，但修改前后用户所在组均为root，所以仅修改所有者不会改变其所在组。</p></li></ul></li></ol><h2 id="所在组"><a href="#所在组" class="headerlink" title="所在组"></a>所在组</h2><ol><li><p>定义：当某个用户创建了一个文件后，默认这个文件的所在组就是该用户所在的组</p></li><li><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ls -ahl  # 查看文件所在组</span><br><span class="line">chgrp 用户组 文件  # 修改文件所在组为用户组</span><br></pre></td></tr></table></figure></li><li><p>案例：/root下创建文件aorange.txt文件，使用chgrp指令修改文件所在组为police</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">touch aorange.txt  # 创建文件</span><br><span class="line">ls -ahl  # 查看文件所在组</span><br><span class="line">chgrp police aorange.txt  # 修改文件所在组</span><br><span class="line">ls -ahl  # 再次查看文件所在组</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/26/9386789ef28331729b0549a707c698af.png" width="70%"/></li><li><p>同时修改文件所有者和所在组：</p><ul><li><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chown -R 用户 文件  # 单独使用chown</span><br><span class="line">chgrp -R 用户组 文件  # 单独使用chgrp</span><br><span class="line">chown -R[可选，递归修改所有文件所有者和所在组] 用户:所在组 文件  # 同时修改文件所有者和所在组</span><br></pre></td></tr></table></figure></li><li><p>案例：修改/home/tom下文件的所有者和所在组为tom</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown -R tom:tom tom/</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/26/2442bf9b47f45cb77b3f83335aa3d233.png" width="70%"/></li></ul></li></ol><h2 id="其他组"><a href="#其他组" class="headerlink" title="其他组"></a>其他组</h2><p>​    定义：除文件的所有者和所在组的用户外，系统的其它用户都是文件的其它组</p><h1 id="权限的管理"><a href="#权限的管理" class="headerlink" title="权限的管理"></a>权限的管理</h1><h2 id="权限介绍"><a href="#权限介绍" class="headerlink" title="权限介绍"></a>权限介绍</h2><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/26/cd4bddd312731ad7d1a5b2ad3102f8bc.png" width="70%"/><h2 id="rwx权限"><a href="#rwx权限" class="headerlink" title="rwx权限"></a>rwx权限</h2><ol><li><p>作用到文件：</p><ul><li>r（read）：可查看</li><li>w（write）：可修改，但不代表具有删除的权限（对文件所在目录具有w权限时，才可删除）</li><li>x（execute）：可被执行</li></ul></li><li><p>作用到目录：</p><ul><li>r：可读，ls查看目录内容</li><li>w：可写，目录内创建、删除、重命名</li><li>x：可执行，cd进入该目录</li></ul></li><li><p>注意：关于子目录数量</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/26/1aaf9676f82ab6fe02dec47f04154971.png" width="70%"/></li></ol><h2 id="修改权限"><a href="#修改权限" class="headerlink" title="修改权限"></a>修改权限</h2><ol><li><p>说明：使用chmod指令，可以修改文件或者目录的权限</p></li><li><p>使用+、-、=变更权限：</p><ul><li><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> u：所有者，g：所在组，o：其他组，a：所有用户（u+g+o）</span></span><br><span class="line">chmod u=rwx,g=x,o=x 文件/目录名  # 给文件/目录赋权限</span><br><span class="line">chmod o+w 文件/目录名  # 给文件/目录的其他组（o）添加一个写（w）权限</span><br><span class="line">chmod a-x  文件/目录名  # 给文件/目录的所有用户都减一个执行权限</span><br></pre></td></tr></table></figure></li><li><p>案例：</p><ul><li><p>给abc文件的所有者读写执行的权限，给所在组读执行的权限，给其他组用户执行权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod u=rwx,g=rx,u=x abc</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/26/0c7fb644d42886f4fdc133831f6999f0.png" width="70%"/></li><li><p>给abc文件的所有者除去执行权限，给所在组增加一个写的权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod u-x,g+w abc</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/26/018bd385c29bc5cb74cf2814244846ee.png" width="70%"/></li><li><p>给abc所有用户增加读的权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod a+w abc</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/26/b078a9364d6f348af32bb8db8b6a4447.png" width="70%"/></li></ul></li></ul></li><li><p>使用数字变更权限：</p><ul><li><p>语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 规则：r=4，w=2，x=1</span></span><br><span class="line">chmod 751 abc  <span class="comment"># 等价于chmod u=rwx,g=rx,o=x abc</span></span><br></pre></td></tr></table></figure></li><li><p>案例：给abc文件的所有者读写执行的权限，给所在组读执行的权限，给其他组用户执行权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># u=rwx(7),g=wx(3),o=x(1)</span></span><br><span class="line">chmod 731 abc</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/26/8d26763066066285f8e8e2a3db58bbcc.png" width="70%"/></li></ul></li></ol><h1 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h1><h2 id="警察和土匪"><a href="#警察和土匪" class="headerlink" title="警察和土匪"></a>警察和土匪</h2><ol><li><p>题设：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">police,bandit  # 用户组</span><br><span class="line">jack,jerry  # 警察用户</span><br><span class="line">xh,xq  # 土匪用户</span><br></pre></td></tr></table></figure></li><li><p>题目：</p><ul><li><p>创建组</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">groupadd police</span><br><span class="line">groupadd bandit</span><br></pre></td></tr></table></figure></li><li><p>创建用户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">useradd -g police jack</span><br><span class="line">passwd jack</span><br><span class="line">useradd -g police jerry</span><br><span class="line">passwd jerry</span><br><span class="line">useradd -g bandit xh</span><br><span class="line">passwd xh</span><br><span class="line">useradd -g bandit xq</span><br><span class="line">passwd xq</span><br></pre></td></tr></table></figure></li><li><p>使用jack用户登录并创建一个文件，自己可以读写，本组人可以读，其他组没有任何权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">touch a1.txt</span><br><span class="line">chmod 640 a1.txt </span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/26/262b38663f8f0c32cdc2dd4e175b05d3.png" width="70%"/></li><li><p>jack修改文件权限，让其他组人可以读，所在组用户可以写</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod o+r,g+w a1.txt</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/26/159149dea26272e70fea73b4743195dc.png" width="70%"/><p>验证同组可以修改：</p><ul><li><p>jerry账号登录并尝试进入/home/jack目录下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /home/jack/</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/26/4c335b6a0b924ca3877c4478ee0d3dff.png" width="70%"/><p>原因：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/26/3df90833b7d7c7e34dee07a2f009d6a3.png" width="70%"/><p>注意：这个很好理解，在自己家里有权限但在整栋楼不一定有权限</p></li><li><p>使用jack账户修改/home/jack文件的权限：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 750 jack/</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/26/c17c9a4bdf35d67e06515fcef42da18d.png" width="70%"/><p>注意：为什么给所在组5的权限？因为需要进入（x：1）和查看（r：4），所以总权限是4+1=5</p></li><li><p>再次尝试修改a1.txt文件内容：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/26/1da37c4123cd2514e580fe4ddd4b2d4f.png" width="70%"/></li></ul></li><li><p>xh投靠警察，看看是否可以读写</p><ul><li><p>修改xh的所在组：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usermod -g police xh  # 注意：修改某个用户所在组需要root账户下操作</span><br></pre></td></tr></table></figure></li><li><p>尝试读写a1.txt文件：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/26/9644b246a2ff769b68d337be24b850f2.png" width="70%"/></li></ul></li></ul></li></ol><hr><p>不足之处，欢迎留言，会及时回复，及时更正！</p><p>创作不易，感谢支持！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://plushine.cn/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="linux" scheme="https://plushine.cn/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/linux/"/>
    
    
      <category term="实用指令" scheme="https://plushine.cn/tags/%E5%AE%9E%E7%94%A8%E6%8C%87%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>linux实用指令（上）</title>
    <link href="https://plushine.cn/41524.html"/>
    <id>https://plushine.cn/41524.html</id>
    <published>2020-09-25T07:53:07.000Z</published>
    <updated>2020-09-25T11:52:02.643Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>本文章最初发布在 <a href="https://plushine.cn">XJHui’s Blog</a>，未经允许，任何人禁止转载！</p><p><font color="red" style="font-weight:700">注意：</font>最新修改版本已发布在 <a href="https://plushine.cn/41524.html">这里</a>，点击前往查看！</p><h1 id="运行级别"><a href="#运行级别" class="headerlink" title="运行级别"></a>运行级别</h1><h2 id="级别概述"><a href="#级别概述" class="headerlink" title="级别概述"></a>级别概述</h2><ol><li><p>系统运行级别示意图：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/22/f8bc49ce02fee07208170efc5006b01a.png" width="50%"/></li><li><p>运行级别介绍：</p><ul><li>0关机</li><li>1单用户【找回root密码】</li><li>2多用户状态【无网络服务】</li><li>3多用户状态，有网络服务【常用】</li><li>4保留</li><li>5图形界面【常用】</li><li>6重启</li></ul></li><li><p>查看当前系统运行级别：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/inittab </span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/22/11a75b05339465732b0311429a84eb61.png" width="70%"/></li></ol><h2 id="切换运行级别"><a href="#切换运行级别" class="headerlink" title="切换运行级别"></a>切换运行级别</h2><ol><li><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">init [0,6]  # 不要使用4，因为4未被指定</span><br></pre></td></tr></table></figure></li><li><p>实例：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/22/9133d3f148bcb5b4bf1b35998e1e1cdb.png" width="70%"/><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/22/a8db499bd3175caa8644ec6a1aaebef9.png" width="70%"/><p>切换为图形化界面：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/22/56bde9f334dc6398d35d7f0ad81e764e.png" width="70%"/><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/24/6bfe7f6b12456ee9ad47aa3bcc145041.png" width="70%"/></li><li><p>特殊级别：</p><ul><li><p>级别0：关机</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">init 0</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/24/a9012b255d09c312bca4df0e4781fc26.png" width="70%"/></li><li><p>级别6：重启</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">init 6</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/24/2bb0f72363d952ecbea5517dd4d82775.png" width="70%"/></li></ul></li><li><p>两种修改方式的区别：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/inittable  # 在该文件中将系统运行级别修改为3，系统每次重启后运行级别均为3</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">init 3  # 命令行中执行init3，系统重启后运行级别与/etc/inittable中一致，未必是3</span><br></pre></td></tr></table></figure><p>注意：如果编辑/etc/inittable将系统运行级别设置为0，系统会无限重启！如何解决？看完下面的面试题就知道了</p></li></ol><h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><blockquote><p>如何找回丢失的root密码？</p></blockquote><ol><li><p>原理：进入单用户模式（系统运行级别为1），修改root密码（进入单用户模式不需要输入root密码）</p></li><li><p>操作：</p><ul><li><p>服务器启动时，按下enter键，输入e，上下移动光标选中第二行，再输入e：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/24/3f4c878dc981bf7cee98de474c48bb59.png" width="70%"/></li><li><p>下图命令行中输入 <code>空格1</code>，按下回车，输入b：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/24/4e3928c2246059f685b4ac4ab34b097e.png" width="70%"/></li><li><p>成功进入系统（无需root密码）：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/24/6c89232f77dcd7c9fce53b46b3287256.png" width="70%"/></li><li><p>使用passwd命令修改密码：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/24/7e6e92a15ab5757764a2fd907cdf163c.png" width="70%"/></li></ul></li><li><p>安全：该方法只能在服务器操作（不可远程）且一般的人也接触不到服务器，所以足够安全。个人电脑，安全？？</p></li></ol><h1 id="帮助指令"><a href="#帮助指令" class="headerlink" title="帮助指令"></a>帮助指令</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><pre><code>当对某个命令不熟悉时，可以使用linux提供的帮助指令来了解这个命令的使用方法。</code></pre><h2 id="man指令"><a href="#man指令" class="headerlink" title="man指令"></a>man指令</h2><ol><li><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">man [命令或配置文件]  # 获取该命令的使用方法以及其它信息</span><br></pre></td></tr></table></figure></li><li><p>案例：查看ls命令的帮助信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">man ls</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/24/c137fab4e55fe5427bdf94a89f0dbdf9.png" width="70%"/><p>注意：按q退出man指令</p></li></ol><h2 id="help指令"><a href="#help指令" class="headerlink" title="help指令"></a>help指令</h2><ol><li><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">help 命令  # 获取该命令的使用方法以及其它信息</span><br></pre></td></tr></table></figure></li><li><p>实例：查看cd目录作用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">help cd</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/24/7342eda6db48335244e39a3fa63d72b8.png" width="70%"/></li></ol><h1 id="文件目录类"><a href="#文件目录类" class="headerlink" title="文件目录类"></a>文件目录类</h1><h2 id="pwd"><a href="#pwd" class="headerlink" title="pwd"></a>pwd</h2><ol><li><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pwd  # 显示当前工作目录的绝对路径</span><br></pre></td></tr></table></figure></li><li><p>案例：显示当前工作目录</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/24/7e1a16362a82cdae01f1b7029ba35c54.png" width="70%"/></li></ol><h2 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h2><ol><li><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ls  # 显示当前目录下所有文件和文件夹</span><br><span class="line">ls -l  # 显示文件和文件夹的详细信息，可简写为ll</span><br><span class="line">ls -lh  # 显示文件和文件夹的详细信息，大小非字节</span><br><span class="line">ls -al  # 显示所有文件（含隐藏文件）的详细信息</span><br></pre></td></tr></table></figure></li><li><p>案例：查看当前路径下所有文件详细信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -al</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/24/4cba51fe870a746fc9a9d88eacacad29.png" width="70%"/></li></ol><h2 id="cd"><a href="#cd" class="headerlink" title="cd"></a>cd</h2><ol><li><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd 目录  # 切换到指定路径</span><br></pre></td></tr></table></figure></li><li><p>绝对路径和相对路径：当前所在路径为/root要求切换到/home路径下</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/24/f1033ff24b03c6937d884df7003588e8.png" width="70%"/><ul><li>绝对路径：/home</li><li>相对路径：../home（..代表返回上一级目录）</li></ul></li><li><p>案例：</p><ul><li><p>使用绝对路径切换到root目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /root</span><br></pre></td></tr></table></figure></li><li><p>回到上一级</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ..</span><br></pre></td></tr></table></figure></li><li><p>回到家目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ~</span><br></pre></td></tr></table></figure></li></ul></li></ol><h2 id="mkdir"><a href="#mkdir" class="headerlink" title="mkdir"></a>mkdir</h2><ol><li><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p[可选，创建多级目录] 目录名  # 创建文件夹</span><br></pre></td></tr></table></figure></li><li><p>案例：</p><ul><li><p>/home目录下创建dog目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir /home/dog</span><br></pre></td></tr></table></figure></li><li><p>/home目录下创建/animal/tiger</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /animal/tiger</span><br></pre></td></tr></table></figure></li></ul></li></ol><h2 id="rmdir"><a href="#rmdir" class="headerlink" title="rmdir"></a>rmdir</h2><ol><li><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rmdir 目录名  # 只能删除空目录</span><br></pre></td></tr></table></figure></li><li><p>案例：</p><ul><li><p>删除空目录tiger：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rmdir tiger/</span><br></pre></td></tr></table></figure></li><li><p>删除非空目录animal：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf animal/</span><br></pre></td></tr></table></figure><p>注意：rmdir不能删除非空目录，可以使用rm -rf命令代替</p></li></ul></li></ol><h2 id="touch"><a href="#touch" class="headerlink" title="touch"></a>touch</h2><ol><li><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch 文件名  # 创建空文件</span><br></pre></td></tr></table></figure></li><li><p>案例：</p><ul><li><p>创建一个空文件hello.txt</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch hello.txt</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/24/7c57551e51bb89a15fa22624b620b9ef.png" width="70%"/></li><li><p>一次创建多个文件 hello1.txt hello2.txt</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch hello1.txt hello1.txt</span><br></pre></td></tr></table></figure></li></ul></li></ol><h2 id="cp"><a href="#cp" class="headerlink" title="cp"></a>cp</h2><ol><li><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp -r[递归复制] source dest  # 将source拷贝到dest路径中</span><br></pre></td></tr></table></figure></li><li><p>案例：</p><ul><li><p>将aaa.txt移动到/root/test/中：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv aaa.txt /root/test/</span><br></pre></td></tr></table></figure></li><li><p>将/root/test目录拷贝到/home中：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp -r /root/test /home  # 递归复制</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/24/73b709fa80ccba08504275c315b0f430.png" width="70%"/></li><li><p>再次执行上个案例的拷贝命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp -r /root/test /home  # 递归复制</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/24/4c9beb97ad3b9de5561da90015918b8e.png" width="70%"/><p>如何跳过询问，强制覆盖？使用\cp命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\cp -r /root/test/ home/</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/24/6f17d8fdd7075dd265a98a872cfeec39.png" width="70%"/></li></ul></li></ol><h2 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h2><ol><li><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -r[可选，递归删除] f[可选，强制删除不提示] 文件名/目录  # 移除文件或目录</span><br></pre></td></tr></table></figure></li><li><p>案例：</p><ul><li><p>删除/root/linux.txt文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm linux.txt</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/25/a804d5dc872e8afefa28c4b1d4c8c3ae.png" width="70%"/></li><li><p>删除/root/windows.txt文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -f windows.txt  # 不提示，强制删除</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/25/40e860355013d5f57647dc73a8175722.png" width="70%"/><p>注意：和上一个案例区分，加上-f则不再询问是否删除</p></li><li><p>删除/root/bbb（非空）目录：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf /root/bbb  # 强制递归删除非空目录</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/25/bba8f885a79ab990551be1f4e52f3ed3.png" width="70%"/></li></ul></li></ol><h2 id="mv"><a href="#mv" class="headerlink" title="mv"></a>mv</h2><ol><li><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mv 文件名 文件名  # 重命名</span><br><span class="line">mv 文件名 路径  # 移动文件</span><br></pre></td></tr></table></figure></li><li><p>案例：</p><ul><li><p>将文件hello.cpp重命名为nihao.cpp：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv hello.cpp nihao.cpp</span><br></pre></td></tr></table></figure></li><li><p>将文件nihao.txt移动到/home/animal目录下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv nihao.cpp /home/animal/</span><br></pre></td></tr></table></figure></li></ul></li></ol><h2 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h2><ol><li><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat -n[可选，显示行号] 文件名  # 查看文件内容</span><br></pre></td></tr></table></figure></li><li><p>案例：查看/etx/profile文件内容，并显示行号</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat -n /etc/profile</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/24/d79e470be1298c73846d55dfaf569b18.png" width="70%"/><p>注意：执行cat命令后，文件内容会被一次显示，使用管道符|可分页显示</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat -n /etc/profile | more</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/24/961bbee5e976e32c58ea2e6bc7725715.png" width="70%"/><p>注意：按空格键可向下翻页，此方法不支持向上翻页，按q退出more指令</p></li></ol><h2 id="more"><a href="#more" class="headerlink" title="more"></a>more</h2><ol><li><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">more 文件名  # 全屏方式按页显示文本文件内容</span><br></pre></td></tr></table></figure></li><li><p>案例：采用more指令查看文件 /etc/profile</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">more /etc/profile</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/25/1e5bc4cdc67362bd5ba22058e7e5089c.png" width="70%"/><p>快捷键：</p><ul><li>下翻一行：enter</li><li>下翻页：空格、ctrl+f</li><li>上翻页：b、ctrl+b</li><li>退出more：q</li></ul></li></ol><h2 id="less"><a href="#less" class="headerlink" title="less"></a>less</h2><ol><li><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">less 文件名  # 按需加载，适合大文件的查看</span><br></pre></td></tr></table></figure></li><li><p>案例：使用less命令查看/etc/profile的内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">less /etc/profile</span><br></pre></td></tr></table></figure><p>快捷键与more基本相同，使用 <code>/字符串</code> 实现查询功能，n向下查询，N向上查询</p></li></ol><h2 id="gt-和-gt-gt"><a href="#gt-和-gt-gt" class="headerlink" title="&gt;和&gt;&gt;"></a>&gt;和&gt;&gt;</h2><ol><li><p>含义：</p><ul><li>&gt; （输出重定向）：会将文件原来的内容覆盖</li><li>&gt;&gt;（追加写）：不覆盖而是追加到文件的尾部</li></ul></li><li><p>案例：</p><ul><li><p>将ls -l指令显示的内容写入到a.txt文件中：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -l &gt; a.txt</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/25/65b4adb3fe8858593829945960db4c48.png" width="70%"/></li><li><p>将ls 指令显示的内容追加写到a.txt文件中：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls &gt;&gt; a.txt</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/25/8c464b6134a7335894e729f65c03a3c7.png" width="70%"/></li><li><p>将/etc/profile的内容写入到b.txt文件中：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/profile &gt; b.txt  # 与cat|more|less等命令搭配使用</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/25/b254bb86a31fd63a22f0f05536246bc8.png" width="70%"/></li><li><p>将 <code>hello world</code> 覆盖写入到a.txt文件中：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;hello world&quot; &gt; a.txt</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/25/81ddc9bdb53596602888676dde882d43.png" width="70%"/></li><li><p>请在当前目录（/home）打印/root的文件列表：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -l /root  # 打印其他路径下的文件目录，可以不cd到该路径下</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/25/1d6cff2f5fac04bbec50ebe5040509c3.png" width="70%"/></li></ul></li></ol><h2 id="echo"><a href="#echo" class="headerlink" title="echo"></a>echo</h2><ol><li><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo 变量/文本  # 输出环境变量、文本</span><br></pre></td></tr></table></figure></li><li><p>案例：输入linux的path路径</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo $PATH  # $PATH与windows下的path环境变量类似</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/25/8f0cfdf1d8ed4c9868c71874f7e1cc82.png" width="70%"/></li></ol><h2 id="head"><a href="#head" class="headerlink" title="head"></a>head</h2><ol><li><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">head -n 5[可选，显示指定行数] 文件名  # 显示文件开头内容，默认显示前10行 </span><br></pre></td></tr></table></figure></li><li><p>案例</p><ul><li><p>使用head命令显示/etc/profile文件的内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">head /etc/profile  # 默认显示前10行</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/25/a4bfe6bedf45205ff2a5610ab15d8a14.png" width="70%"/></li><li><p>使用head命令显示/etc/profile文件的前5行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">head -n 5 /etc/profile  # 显示具体行数要加参数-n</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/25/6e8afdc664a6599d2ed643499de5f23d.png" width="70%"/></li></ul></li></ol><h2 id="tail"><a href="#tail" class="headerlink" title="tail"></a>tail</h2><ol><li><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tail 文件  # 默认显示文件后10行内容</span><br><span class="line">tail -n x 文件  # 与head类似也可以使用参数-n来显示具体后n行内容</span><br><span class="line">tail -f 文件  # 实时追踪该文档的所有更新，工作中很常用</span><br></pre></td></tr></table></figure></li><li><p>案例：</p><ul><li><p>显示/etc/profile后5行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tail -n 5 /etc/profile</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/25/234e7642ce433a7c85e74ce85d982cf0.png" width="70%"/></li><li><p>实时追踪c.txt文件的变化：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 在虚拟机中向c.txt文件追加写入内容，并在xshell中使用tail -f监控文件变化</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/25/a3163efb4b39b62e8809778cfb67db1d.png" width="70%"/><p>注意：使用快捷键ctrl+c退出追踪</p></li></ul></li></ol><h2 id="ln"><a href="#ln" class="headerlink" title="ln"></a>ln</h2><ol><li><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s [原文件或目录] [软链接]  # 给原文件创建一个软链接（类似windows中个快捷方式）</span><br></pre></td></tr></table></figure></li><li><p>案例：</p><ul><li><p>/root目录下创建一个软链接，链接到/root目录：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /root linkToRoot</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/25/1c0ca11c0d52f35c3a502e86323fce41.png" width="70%"/><p>软链接的使用：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd linkToRoot/</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/25/a676b3a9508e4daa7843e5fdf4ec77a2.png" width="70%"/></li><li><p>软链接的删除：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf linkToRoot  # 注意：删除软链接时最后不要添加/</span><br></pre></td></tr></table></figure></li></ul></li></ol><h2 id="history"><a href="#history" class="headerlink" title="history"></a>history</h2><ol><li><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">history  # 显示所有历史指令</span><br><span class="line">history 5  # 显示最近执行的5条指令</span><br><span class="line">!123  # 执行history中第123条指令</span><br></pre></td></tr></table></figure></li><li><p>案例：</p><ul><li><p>显示最近执行的6条指令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">history 6</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/25/aaf8724cbbd723af92c5781ff30091f2.png" width="70%"/></li><li><p>执行第286行指令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!286</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/25/1b81b5ae777e89cf193c3e9ac3eb70c8.png" width="70%"/></li></ul></li></ol><hr><p>不足之处，欢迎留言，会及时回复，及时更正！</p><p>创作不易，感谢支持！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://plushine.cn/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="linux" scheme="https://plushine.cn/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/linux/"/>
    
    
      <category term="实用指令" scheme="https://plushine.cn/tags/%E5%AE%9E%E7%94%A8%E6%8C%87%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>用户与用户组的管理</title>
    <link href="https://plushine.cn/41140.html"/>
    <id>https://plushine.cn/41140.html</id>
    <published>2020-09-22T00:13:06.000Z</published>
    <updated>2020-09-26T07:07:48.727Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>本文章最初发布在 <a href="https://plushine.cn">XJHui’s Blog</a>，未经允许，任何人禁止转载！</p><p><font color="red" style="font-weight:700">注意：</font>最新修改版本已发布在 <a href="https://plushine.cn/41140.html">这里</a>，点击前往查看！</p><h1 id="关系概图"><a href="#关系概图" class="headerlink" title="关系概图"></a>关系概图</h1><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/22/8c6bfbc6dda8f5d1cd46abce01143710.png" width="70%"/><h1 id="用户"><a href="#用户" class="headerlink" title="用户"></a>用户</h1><h2 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h2><ol><li><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useradd 用户名</span><br></pre></td></tr></table></figure><p>案例：创建用户xl</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/26/a1f6d5cf1c767ab687de0b2be090ae17.png" width="70%"/><p>说明：</p><ul><li><p>如果不指明家目录，会自动创建与用户同名的家目录/home/xl</p></li><li><p>创建用户并指明家目录：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useradd -d 目录 用户名  # 指定家目录（指定/home下不存在的目录）</span><br></pre></td></tr></table></figure><p>案例：创建用户xj，家目录为/home/tigger</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/22/4f6d1824ef35fb28f4066e8d5ca63c13.png" width="70%"/></li></ul></li><li><p>设置用户密码：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/22/215c9d1609f888d8858b048a4c5074df.png" width="70%"/></li><li><p>登录新账户：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">user: xh</span><br><span class="line">passed: xh</span><br></pre></td></tr></table></figure><p>登录成功（默认进入到家目录）：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/22/59ee3cf7a4a2f40985fbe5171f426d8d.png" width="70%"/></li></ol><h2 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h2><ol><li><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">userdel 用户名</span><br></pre></td></tr></table></figure></li><li><p>案例：</p><ul><li><p>删除用户xl，保留家目录：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/22/8196af0df2928d0028a9ff5754785c7f.png" width="70%"/></li><li><p>删除用户xj和家目录（/home/tigger）：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/22/5a98015dd5beb1be45b35b79abb61a5c.png" width="70%"/></li></ul></li><li><p>思考：正常工作中是否要删除家目录？</p><p>因为用户在工作中产生的代码会存放在家目录中，所以家目录一般不需要删除</p></li></ol><h2 id="查询用户信息"><a href="#查询用户信息" class="headerlink" title="查询用户信息"></a>查询用户信息</h2><ol><li><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id 用户名</span><br></pre></td></tr></table></figure></li><li><p>案例：查询root用户信息</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/22/88acdf3737111f3962fb59272cbc1d2c.png" width="70%"/><p>注意：如果用户不存在，会返回 “无此用户”</p></li></ol><h2 id="切换用户"><a href="#切换用户" class="headerlink" title="切换用户"></a>切换用户</h2><ol><li><p>介绍：</p><p>在linux中，如果用户权限不够，可以通过su - 命令切换到高权限用户（例如root）</p></li><li><p>案例：在zf用户下使用 <code>su - root</code> 命令，切换回root用户</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/22/4b1a8b9e8f56904e9d9838fd295d9637.png" width="70%"/><p>注意：</p><ul><li><p>从高权限到低权限切换用户不需要输入密码，反之需要</p></li><li><p><code>exit</code> 命令可切换为原来的用户</p></li><li><p><code>whoami</code>（<code>who am i</code>） 命令可查看当前用户名称（用户信息）</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/22/f14d4c26327427b34d023a20f81b68ed.png" width="70%"/></li></ul></li></ol><h1 id="用户组"><a href="#用户组" class="headerlink" title="用户组"></a>用户组</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>​    类似于小组，系统可以对有共性的多个用户进行统一的管理</p><h2 id="组的操作"><a href="#组的操作" class="headerlink" title="组的操作"></a>组的操作</h2><ol><li><p>创建用户组：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupadd wudang</span><br></pre></td></tr></table></figure></li><li><p>删除用户组：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupdel wudang</span><br></pre></td></tr></table></figure><p>案例：创建用户zwj并将其添加到用户组wudang中</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/22/f775e474299c516bb43b8ef118a95681.png" width="70%"/><p>注意：家目录和用户组不是一个东西，要区分开</p></li><li><p>修改用户组：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usermod -g 用户新组名 用户名</span><br></pre></td></tr></table></figure><p>案例：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/22/63fca35ab5399ba517dd9c8ae0104acc.png" width="70%"/></li></ol><h1 id="用户和组的相关文件"><a href="#用户和组的相关文件" class="headerlink" title="用户和组的相关文件"></a>用户和组的相关文件</h1><h2 id="用户配置信息"><a href="#用户配置信息" class="headerlink" title="用户配置信息"></a>用户配置信息</h2><blockquote><p>存放用户基本信息</p></blockquote><ol><li><p>路径：/etc/passwd</p></li><li><p>配置信息组成：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/22/605c5f1ffaf3a6ef28497c10271d2194.png" width="70%"/></li></ol><h2 id="口令配置文件"><a href="#口令配置文件" class="headerlink" title="口令配置文件"></a>口令配置文件</h2><blockquote><p>存放用户密码</p></blockquote><ol><li>路径：/etc/shadow</li><li>配置信息组成：</li></ol><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/22/09732b9242a62fd2576e6664e8516839.png" width="70%"/><h2 id="组配置文件"><a href="#组配置文件" class="headerlink" title="组配置文件"></a>组配置文件</h2><blockquote><p>记录linux包含的组的信息</p></blockquote><ol><li><p>路径：/etc/group</p></li><li><p>配置信息组成：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/22/6f622e816978ea864576e037e3f2587f.png" width="70%"/></li></ol><hr><p>不足之处，欢迎留言，会及时回复，及时更正！</p><p>创作不易，感谢支持！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://plushine.cn/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="linux" scheme="https://plushine.cn/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/linux/"/>
    
    
      <category term="用户" scheme="https://plushine.cn/tags/%E7%94%A8%E6%88%B7/"/>
    
      <category term="用户组" scheme="https://plushine.cn/tags/%E7%94%A8%E6%88%B7%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>Vi和Vim编辑器与服务器关机和重启</title>
    <link href="https://plushine.cn/49560.html"/>
    <id>https://plushine.cn/49560.html</id>
    <published>2020-09-21T07:42:27.000Z</published>
    <updated>2020-09-21T13:18:51.829Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>本文章最初发布在 <a href="https://plushine.cn">XJHui’s Blog</a>，未经允许，任何人禁止转载！</p><p><font color="red" style="font-weight:700">注意：</font>最新修改版本已发布在 <a href="https://plushine.cn/49560.html">这里</a>，点击前往查看！</p><h1 id="Vi和Vim基本介绍"><a href="#Vi和Vim基本介绍" class="headerlink" title="Vi和Vim基本介绍"></a>Vi和Vim基本介绍</h1><blockquote><p>所有的linux系统都会内置vi文本编辑器</p></blockquote><h2 id="两者区别"><a href="#两者区别" class="headerlink" title="两者区别"></a>两者区别</h2><ul><li>vim是vi的 ‘增强版’ ，具有程序编辑能力</li><li>可根据字体颜色辨别语法的正确性，方便程序设计</li><li>代码补全、编译、错误跳转等功能丰富</li></ul><h2 id="vi和vim常用的三种模式"><a href="#vi和vim常用的三种模式" class="headerlink" title="vi和vim常用的三种模式"></a>vi和vim常用的三种模式</h2><ul><li>正常（一般）模式：可以使用快捷键</li><li>插入（编辑）模式：可以输入内容，i、o等字母进入编辑模式</li><li>命令行模式：实现保存、替换、添加行号、离开vim等功能</li></ul><h2 id="快速入门案例"><a href="#快速入门案例" class="headerlink" title="快速入门案例"></a>快速入门案例</h2><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/21/37dddf6254e63db344a58947f40fcb1b.png" width="55%"/><ol><li><p>进入正常模式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim hello.cpp</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/21/5c41c5bc6b0965a9f21d6ef1396cb6bf.png" width="55%"/></li><li><p>按 <code>i</code> 键进入编辑模式：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/21/c960e7bbdd6968744e8484ded3b89dc3.png" width="55%"/><p>输入代码：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/21/37be8630f07d267a3881b9a26ad60024.png" width="55%"/></li><li><p>按下 <code>Esc</code> 键进入命令模式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wq  # 保存退出</span><br><span class="line">:q  # 不保存退出（内容为改变）</span><br><span class="line">:q!  # 强制退出（内容改变）</span><br></pre></td></tr></table></figure><p>保存退出：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/21/add50f605be901b547c13d814e01c394.png" width="55%"/><p>再次进入正常模式，之前输入的代码依然存在：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/21/299b828f2924a1f03191e13404cbe483.png" width="55%"/></li></ol><h1 id="Vi和Vim快捷键"><a href="#Vi和Vim快捷键" class="headerlink" title="Vi和Vim快捷键"></a>Vi和Vim快捷键</h1><blockquote><p>来源：<a href="https://www.runoob.com/linux/linux-vim.html">菜鸟教程</a></p></blockquote><h2 id="正常模式"><a href="#正常模式" class="headerlink" title="正常模式"></a>正常模式</h2><table><thead><tr><th align="left">h 或 向左箭头键(←)</th><th>光标向左移动一个字符</th></tr></thead><tbody><tr><td align="left">j 或 向下箭头键(↓)</td><td>光标向下移动一个字符</td></tr><tr><td align="left">k 或 向上箭头键(↑)</td><td>光标向上移动一个字符</td></tr><tr><td align="left">l 或 向右箭头键(→)</td><td>光标向右移动一个字符</td></tr><tr><td align="left">[Ctrl] + [f]</td><td>屏幕『向下』移动一页，相当于 [Page Down]按键 (常用)</td></tr><tr><td align="left">[Ctrl] + [b]</td><td>屏幕『向上』移动一页，相当于 [Page Up] 按键 (常用)</td></tr><tr><td align="left">[Ctrl] + [d]</td><td>屏幕『向下』移动半页</td></tr><tr><td align="left">[Ctrl] + [u]</td><td>屏幕『向上』移动半页</td></tr><tr><td align="left">+</td><td>光标移动到非空格符的下一行</td></tr><tr><td align="left">-</td><td>光标移动到非空格符的上一行</td></tr><tr><td align="left">n<space></td><td>那个 n 表示『数字』，例如 20 。按下数字后再按空格键，光标会向右移动这一行的 n 个字符。例如 20<space> 则光标会向后面移动 20 个字符距离。</td></tr><tr><td align="left">0 或功能键[Home]</td><td>这是数字『 0 』：移动到这一行的最前面字符处 (常用)</td></tr><tr><td align="left">$ 或功能键[End]</td><td>移动到这一行的最后面字符处(常用)</td></tr><tr><td align="left">H</td><td>光标移动到这个屏幕的最上方那一行的第一个字符</td></tr><tr><td align="left">M</td><td>光标移动到这个屏幕的中央那一行的第一个字符</td></tr><tr><td align="left">L</td><td>光标移动到这个屏幕的最下方那一行的第一个字符</td></tr><tr><td align="left">G</td><td>移动到这个档案的最后一行(常用)</td></tr><tr><td align="left">nG</td><td>n 为数字。移动到这个档案的第 n 行。例如 20G 则会移动到这个档案的第 20 行(可配合 :set nu)</td></tr><tr><td align="left">gg</td><td>移动到这个档案的第一行，相当于 1G 啊！ (常用)</td></tr><tr><td align="left">n<Enter></td><td>n 为数字。光标向下移10动 n 行(常用)</td></tr><tr><td align="left"><strong>搜索替换</strong></td><td></td></tr><tr><td align="left">/word</td><td>向光标之下寻找一个名称为 word 的字符串。例如要在档案内搜寻 vbird 这个字符串，就输入 /vbird 即可！ (常用)</td></tr><tr><td align="left">?word</td><td>向光标之上寻找一个字符串名称为 word 的字符串。</td></tr><tr><td align="left">n</td><td>这个 n 是英文按键。代表重复前一个搜寻的动作。举例来说， 如果刚刚我们执行 /vbird 去向下搜寻 vbird 这个字符串，则按下 n 后，会向下继续搜寻下一个名称为 vbird 的字符串。如果是执行 ?vbird 的话，那么按下 n 则会向上继续搜寻名称为 vbird 的字符串！</td></tr><tr><td align="left">N</td><td>这个 N 是英文按键。与 n 刚好相反，为『反向』进行前一个搜寻动作。 例如 /vbird 后，按下 N 则表示『向上』搜寻 vbird 。</td></tr><tr><td align="left">使用 /word 配合 n 及 N 是非常有帮助的！可以让你重复的找到一些你搜寻的关键词！</td><td></td></tr><tr><td align="left">:n1,n2s/word1/word2/g</td><td>n1 与 n2 为数字。在第 n1 与 n2 行之间寻找 word1 这个字符串，并将该字符串取代为 word2 ！举例来说，在 100 到 200 行之间搜寻 vbird 并取代为 VBIRD 则： 『:100,200s/vbird/VBIRD/g』。(常用)</td></tr><tr><td align="left"><strong>:1,$s/word1/word2/g</strong> 或 <strong>:%s/word1/word2/g</strong></td><td>从第一行到最后一行寻找 word1 字符串，并将该字符串取代为 word2 ！(常用)</td></tr><tr><td align="left"><strong>:1,$s/word1/word2/gc</strong> 或 <strong>:%s/word1/word2/gc</strong></td><td>从第一行到最后一行寻找 word1 字符串，并将该字符串取代为 word2 ！且在取代前显示提示字符给用户确认 (confirm) 是否需要取代！(常用)</td></tr><tr><td align="left">删除、复制与粘贴</td><td></td></tr><tr><td align="left">x, X</td><td>在一行字当中，x 为向后删除一个字符 (相当于 [del] 按键)， X 为向前删除一个字符(相当于 [backspace] 亦即是退格键) (常用)</td></tr><tr><td align="left">nx</td><td>n 为数字，连续向后删除 n 个字符。举例来说，我要连续删除 10 个字符， 『10x』。</td></tr><tr><td align="left">dd</td><td>删除游标所在的那一整行(常用)</td></tr><tr><td align="left">ndd</td><td>n 为数字。删除光标所在的向下 n 行，例如 20dd 则是删除 20 行 (常用)</td></tr><tr><td align="left">d1G</td><td>删除光标所在到第一行的所有数据</td></tr><tr><td align="left">dG</td><td>删除光标所在到最后一行的所有数据</td></tr><tr><td align="left">d$</td><td>删除游标所在处，到该行的最后一个字符</td></tr><tr><td align="left">d0</td><td>那个是数字的 0 ，删除游标所在处，到该行的最前面一个字符</td></tr><tr><td align="left">yy</td><td>复制游标所在的那一行(常用)</td></tr><tr><td align="left">nyy</td><td>n 为数字。复制光标所在的向下 n 行，例如 20yy 则是复制 20 行(常用)</td></tr><tr><td align="left">y1G</td><td>复制游标所在行到第一行的所有数据</td></tr><tr><td align="left">yG</td><td>复制游标所在行到最后一行的所有数据</td></tr><tr><td align="left">y0</td><td>复制光标所在的那个字符到该行行首的所有数据</td></tr><tr><td align="left">y$</td><td>复制光标所在的那个字符到该行行尾的所有数据</td></tr><tr><td align="left">p, P</td><td>p 为将已复制的数据在光标下一行贴上，P 则为贴在游标上一行！ 举例来说，我目前光标在第 20 行，且已经复制了 10 行数据。则按下 p 后， 那 10 行数据会贴在原本的 20 行之后，亦即由 21 行开始贴。但如果是按下 P 呢？ 那么原本的第 20 行会被推到变成 30 行。 (常用)</td></tr><tr><td align="left">J</td><td>将光标所在行与下一行的数据结合成同一行</td></tr><tr><td align="left">c</td><td>重复删除多个数据，例如向下删除 10 行，[ 10cj ]</td></tr><tr><td align="left">u</td><td>复原前一个动作。(常用)</td></tr><tr><td align="left">[Ctrl]+r</td><td>重做上一个动作。(常用)</td></tr><tr><td align="left">这个 u 与 [Ctrl]+r 是很常用的指令！一个是复原，另一个则是重做一次～ 利用这两个功能按键，你的编辑，嘿嘿！很快乐的啦！</td><td></td></tr><tr><td align="left">.</td><td>不要怀疑！这就是小数点！意思是重复前一个动作的意思。 如果你想要重复删除、重复贴上等等动作，按下小数点『.』就好了！ (常用)</td></tr></tbody></table><h2 id="切换到编辑模式"><a href="#切换到编辑模式" class="headerlink" title="切换到编辑模式"></a>切换到编辑模式</h2><table><thead><tr><th align="left">i, I</th><th>进入输入模式(Insert mode)： i 为『从目前光标所在处输入』， I 为『在目前所在行的第一个非空格符处开始输入』。 (常用)</th></tr></thead><tbody><tr><td align="left">a, A</td><td>进入输入模式(Insert mode)： a 为『从目前光标所在的下一个字符处开始输入』， A 为『从光标所在行的最后一个字符处开始输入』。(常用)</td></tr><tr><td align="left">o, O</td><td>进入输入模式(Insert mode)： 这是英文字母 o 的大小写。o 为『在目前光标所在的下一行处输入新的一行』； O 为在目前光标所在处的上一行输入新的一行！(常用)</td></tr><tr><td align="left">r, R</td><td>进入取代模式(Replace mode)： r 只会取代光标所在的那一个字符一次；R会一直取代光标所在的文字，直到按下 ESC 为止；(常用)</td></tr><tr><td align="left">上面这些按键中，在 vi 画面的左下角处会出现『–INSERT–』或『–REPLACE–』的字样。 由名称就知道该动作了吧！！特别注意的是，我们上面也提过了，你想要在档案里面输入字符时， 一定要在左下角处看到 INSERT 或 REPLACE 才能输入喔！</td><td></td></tr><tr><td align="left">[Esc]</td><td>退出编辑模式，回到一般模式中(常用)</td></tr></tbody></table><h2 id="指令模式"><a href="#指令模式" class="headerlink" title="指令模式"></a>指令模式</h2><table><thead><tr><th align="left">:w</th><th>将编辑的数据写入硬盘档案中(常用)</th></tr></thead><tbody><tr><td align="left">:w!</td><td>若文件属性为『只读』时，强制写入该档案。不过，到底能不能写入， 还是跟你对该档案的档案权限有关啊！</td></tr><tr><td align="left">:q</td><td>离开 vi (常用)</td></tr><tr><td align="left">:q!</td><td>若曾修改过档案，又不想储存，使用 ! 为强制离开不储存档案。</td></tr><tr><td align="left">注意一下啊，那个惊叹号 (!) 在 vi 当中，常常具有『强制』的意思～</td><td></td></tr><tr><td align="left">:wq</td><td>储存后离开，若为 :wq! 则为强制储存后离开 (常用)</td></tr><tr><td align="left">ZZ</td><td>这是大写的 Z 喔！如果修改过，保存当前文件，然后退出！效果等同于(保存并退出)</td></tr><tr><td align="left">ZQ</td><td>不保存，强制退出。效果等同于 :q!。</td></tr><tr><td align="left">:w [filename]</td><td>将编辑的数据储存成另一个档案（类似另存新档）</td></tr><tr><td align="left">:r [filename]</td><td>在编辑的数据中，读入另一个档案的数据。亦即将 『filename』 这个档案内容加到游标所在行后面</td></tr><tr><td align="left">:n1,n2 w [filename]</td><td>将 n1 到 n2 的内容储存成 filename 这个档案。</td></tr><tr><td align="left">:! command</td><td>暂时离开 vi 到指令行模式下执行 command 的显示结果！例如 『:! ls /home』即可在 vi 当中察看 /home 底下以 ls 输出的档案信息！</td></tr><tr><td align="left">vim 环境的变更</td><td></td></tr><tr><td align="left">:set nu</td><td>显示行号，设定之后，会在每一行的前缀显示该行的行号</td></tr><tr><td align="left">:set nonu</td><td>与 set nu 相反，为取消行号！</td></tr></tbody></table><h1 id="关机和重启"><a href="#关机和重启" class="headerlink" title="关机和重启"></a>关机和重启</h1><h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><ul><li>shutdown：可关机，可重启，详见下文</li><li>halt：关机</li><li>reboot：重启计算机</li><li>sync：把内存中的数据同步到磁盘（关机、重启前执行，防止数据丢失）</li></ul><h2 id="shutdown"><a href="#shutdown" class="headerlink" title="shutdown"></a>shutdown</h2><ol><li><p>关机：</p><ul><li>立即关机：shutdown -h now</li><li>x分钟后关机：shutdown -h x</li></ul></li><li><p>重启：</p><ul><li>立即重启：shutdown -r now</li><li>x分钟后重启：shutdown -r x</li></ul><p>注意：-h代表关机，-r代表重启，now代表立刻，x代表x分钟后</p></li></ol><h2 id="退出远程连接"><a href="#退出远程连接" class="headerlink" title="退出远程连接"></a>退出远程连接</h2><p>命令行输入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logout</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/21/e536cbaf68331849814a8aca9bfe5e9d.png" width="55%"/><hr><p><strong>不足之处，欢迎留言，会及时回复，及时更正！</strong></p><p><strong>创作不易，感谢支持！</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://plushine.cn/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="linux" scheme="https://plushine.cn/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/linux/"/>
    
    
      <category term="Vim编辑器" scheme="https://plushine.cn/tags/Vim%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>与服务器的远程连接和文件传输</title>
    <link href="https://plushine.cn/41011.html"/>
    <id>https://plushine.cn/41011.html</id>
    <published>2020-09-20T12:50:57.000Z</published>
    <updated>2020-09-21T07:35:07.865Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>本文章最初发布在 <a href="https://plushine.cn">XJHui’s Blog</a>，未经允许，任何人禁止转载！</p><p><font color="red" style="font-weight:700">注意：</font>最新修改版本已发布在 <a href="https://plushine.cn/41011.html">这里</a>，点击前往查看！</p><h1 id="远程连接"><a href="#远程连接" class="headerlink" title="远程连接"></a>远程连接</h1><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/20/fbeedb45db59115cc1e59bbce7f158da.png" width="60%"/><ol><li><p>为什么要远程连接？</p><ul><li><p>公司服务器不是个人电脑更不是虚拟机，其有独立的机房存放</p></li><li><p>补充：有的机房 “藏” 在山里，一方面可以防止人为干扰，另一方面气温较低有助于服务器冷却</p></li></ul></li><li><p>如何远程连接？用什么软件？</p><ul><li>Xshell：实现远程连接、命令行操控服务器</li><li>Xftp：帮助服务器实现文件的上传和下载</li></ul><p>注意：上面只是比较常用的两款工具与其它软件大同小异</p></li></ol><h1 id="Xshell"><a href="#Xshell" class="headerlink" title="Xshell"></a>Xshell</h1><h2 id="软件特点"><a href="#软件特点" class="headerlink" title="软件特点"></a>软件特点</h2><ul><li>速度流畅</li><li>完美解决了中文乱码的问题</li><li>支持windows平台</li></ul><h2 id="下载、安装"><a href="#下载、安装" class="headerlink" title="下载、安装"></a>下载、安装</h2><ul><li><p>下载地址：<a href="https://xjhui.lanzous.com/b00zts8lc">在这</a>  感谢：<a href="http://www.lanzou.com/account.php?action=register&USBfNAUzDTxUZwNhWzJROFs7BzUBaA==">蓝奏云</a></p></li><li><p>访问密码: 348h  </p></li></ul><h2 id="连接服务器"><a href="#连接服务器" class="headerlink" title="连接服务器"></a>连接服务器</h2><blockquote><p>虚拟机为例</p></blockquote><ol><li><p>开启虚拟机的sshd（22号）端口</p><ul><li><p>虚拟机桌面右键-》在终端中打开-》输入命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setup</span><br></pre></td></tr></table></figure><p>回车：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/20/849377d5850f8976f757f9352004a063.png" width="55%"/><p>光标移动到 <code>系统服务</code>（方向下键）回车，找到 <code>sshd</code>：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/20/bb688e5a511b8ca4f5936bb8b7180035.png" width="55%"/><p>如果没有开启，光标选中后按下空格即可开启</p><p>按下tab键，光标移动到 <code>取消</code> ，再次按下回车键即可关闭弹窗</p></li></ul></li><li><p>查看虚拟机ip地址</p><p>命令行输入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/20/ccb6c65c89ff289fde1bc4f1b65e90f6.png" width="55%"/><p>注意：</p><ul><li>如果找不到IP地址，尝试重新连接网络</li><li>上图框选出的内容即为虚拟机分配的ip地址</li></ul></li><li><p>打开xshell，新建连接-》输入上面获取的ip地址-》点击确定：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/20/be571adf84a801e1828b0b3501ee1f01.png" width="55%"/></li><li><p>连接虚拟机：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/20/747da70cc77b26357a4d3dbf08a3d6d4.png" width="55%"/></li><li><p>接受主机密钥-》输入用户名（root）和密码（安装系统时设置的）：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/20/8fd5c7e05a992c8890f31c4c7dd72a8d.png" width="55%"/></li><li><p>连接成功：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/20/9766dbc3921d462f0f8e892b2ebc3be6.png" width="55%"/></li></ol><h2 id="其它设置"><a href="#其它设置" class="headerlink" title="其它设置"></a>其它设置</h2><ol><li><p>配色方案：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/20/e882127e2f84abca2e270ec5e677e2dc.png" width="55%"/></li><li><p>字体：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/20/8881c38f612c864fbd512041dda914cf.png" width="55%"/></li></ol><h1 id="Xftp"><a href="#Xftp" class="headerlink" title="Xftp"></a>Xftp</h1><h2 id="软件特点-1"><a href="#软件特点-1" class="headerlink" title="软件特点"></a>软件特点</h2><ul><li>支持sftp、ftp文件传输</li><li>基于windows平台</li></ul><h2 id="下载、安装-1"><a href="#下载、安装-1" class="headerlink" title="下载、安装"></a>下载、安装</h2><ul><li>下载地址：<a href="https://xjhui.lanzous.com/b00zts8lc">在这</a>  感谢：<a href="http://www.lanzou.com/account.php?action=register&USBfNAUzDTxUZwNhWzJROFs7BzUBaA==">蓝奏云</a></li><li>访问密码: 348h</li></ul><h2 id="连接服务器-1"><a href="#连接服务器-1" class="headerlink" title="连接服务器"></a>连接服务器</h2><blockquote><p>虚拟机为例，类似Xshell</p></blockquote><ol><li><p>新建连接，输入服务器信息：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/21/b6e74b3eb1f9a7c8a31ee1cc100c0cc4.png" width="55%"/></li><li><p>连接成功：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/21/35792b47ade853a4da9d7bdab1ea6d89.png" width="55%"/></li><li><p>如果linux文件名出现乱码，按下图操作：</p><ul><li><p>修改编码：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/21/82a109561347fb6c73e1ced952a81edc.png" width="55%"/></li><li><p>在空白位置，鼠标右键选择刷新，就解决啦：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/21/47d63706844eb7aa94b2a23d9e0a6ed1.png" width="55%"/></li></ul></li></ol><h2 id="软件使用"><a href="#软件使用" class="headerlink" title="软件使用"></a>软件使用</h2><blockquote><p>拖动文件即可实现传输，详见下gif</p></blockquote><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/21/4560371f198fe72e0a7722f47788673a.png" width="80%"/><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><ul><li>这篇文章水了点（内容少），不过真的有收获（sshd:22）</li><li>老师作图用的Excel着实是秀到我了，我也在尝试用它画图</li></ul><hr><p>不足之处，欢迎留言，会及时回复，及时更正！</p><p>创作不易，感谢支持！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://plushine.cn/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="linux" scheme="https://plushine.cn/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/linux/"/>
    
    
      <category term="Xshell" scheme="https://plushine.cn/tags/Xshell/"/>
    
      <category term="Xftp" scheme="https://plushine.cn/tags/Xftp/"/>
    
  </entry>
  
  <entry>
    <title>VMware安装CentOS6及其配置方法</title>
    <link href="https://plushine.cn/47550.html"/>
    <id>https://plushine.cn/47550.html</id>
    <published>2020-09-20T00:52:13.000Z</published>
    <updated>2020-09-20T11:29:50.755Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>本文章最初发布在 <a href="https://plushine.cn">XJHui’s Blog</a>，未经允许，任何人禁止转载！</p><p><font color="red" style="font-weight:700">注意：</font>最新修改版本已发布在 <a href="https://plushine.cn/47550.html">这里</a>，点击前往查看！</p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>视频地址： <a href="https://www.bilibili.com/video/BV1dW411M7xL?p=1">传送门</a> ，一起来b站学习吧！</p><p>这是linux的第一篇笔记，因为之前对linux的发展史稍微有了了解，故博客中不再做相关描述。</p><p>基本每个教程（视频/博客）开始都会讲这些发展史，有兴趣可以去看看。</p><h1 id="准备阶段"><a href="#准备阶段" class="headerlink" title="准备阶段"></a>准备阶段</h1><h2 id="虚拟机"><a href="#虚拟机" class="headerlink" title="虚拟机"></a>虚拟机</h2><p>本教程以VMware16 PRO为例，安装（pojie）教程自行百度</p><h2 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h2><blockquote><p>CentOS版本是6.8</p></blockquote><p>下载链接：<a href="https://mirrors.tuna.tsinghua.edu.cn/centos-vault/6.8/isos/x86_64/CentOS-6.8-x86_64-bin-DVD1.iso">在这里</a>，感谢：<a href="https://mirrors.tuna.tsinghua.edu.cn/">清华大学开源软件镜像站</a></p><h2 id="BIOS虚拟化"><a href="#BIOS虚拟化" class="headerlink" title="BIOS虚拟化"></a>BIOS虚拟化</h2><p>设置步骤：<a href="https://jingyan.baidu.com/article/ab0b56305f2882c15afa7dda.html">在这里</a>，感谢：百度经验</p><p>注意：务必要开启此功能，否则后面操作系统会安装失败</p><h1 id="安装阶段"><a href="#安装阶段" class="headerlink" title="安装阶段"></a>安装阶段</h1><h2 id="创建虚拟机"><a href="#创建虚拟机" class="headerlink" title="创建虚拟机"></a>创建虚拟机</h2><ol><li><p>新建虚拟机：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/20/823caefb7fb9948ea844bfbc056242e8.png" width="50%"/></li><li><p>选择 <code>典型值</code>  后点击 <code>下一步</code> ：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/20/4612e38ccbfefb06189efb0a7d6291b9.png" width="50%"/></li><li><p>选择 <code>稍后安装操作系统</code>：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/20/8bdc9af74c265a1905c4bd51998ae4f1.png" width="50%"/></li><li><p>版本号选择 <code>CentOS6 64位</code>：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/20/72dedf168c67d5c172ff532ba0e8f531.png" width="50%"/></li><li><p>修改虚拟机名称和硬盘位置：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/20/bf3817ecad7f85439d0587d0a24c9924.png" width="50%"/></li><li><p>设置虚拟机硬盘大小：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/20/9f7d4e7b52c3d33d289be1fb37bae583.png" width="50%"/><p>注意：不是一次性占据20GB，而是随着系统的使用不断扩大，以后可挂载其他磁盘来扩充容量</p></li><li><p>点击 <code>完成</code>：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/20/fc6c37689ce045cde1cf0047f9210f0d.png" width="50%"/></li><li><p>虚拟机创建完成</p><ul><li><p>虚拟机主页：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/20/edede8ad2f8d6c480ad26d41c57c6c8a.png" width="70%"/></li><li><p>虚拟机所在文件夹：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/20/c6e62b6fcf14ebc772a307f53eecd5b3.png" width="70%"/><p>注意：目前只是将虚拟机创建完成，由于未安装系统镜像故无法开机运行</p></li></ul></li></ol><h2 id="安装操作系统"><a href="#安装操作系统" class="headerlink" title="安装操作系统"></a>安装操作系统</h2><ol><li><p>点击 <code>编辑虚拟机</code>：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/20/9686395b160153c982cca65652247f4a.png" width="50%"/></li><li><p>配置 <code>内存</code>：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/20/b9e13d75c3bbcc029d146dd1cd118238.png" width="50%"/></li><li><p>配置 <code>处理器</code>：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/20/7ac2222167d8b90a0711a792fa338e45.png" width="50%"/><p>注意：不要超过计算机总处理器数目，超过会有提示：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/20/42268cbb4e7f555c6b81cf4050766a7c.png" width="50%"/></li><li><p>配置 <code>网络适配器</code>：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/20/e206b091a81ec3ffea330ae758b95c5a.png" width="50%"/><p>图解网络连接：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/20/a44cbe1d8563b2a561c6c48cf33842b8.png" width="50%"/><ul><li>桥接模式：linux可与其它系统通讯，但可能造成ip冲突（windows和linux全在同一字段，ip数量有限）</li><li>NAT模式（网络地址转换方式）：linux可以访问外网，不会造成ip冲突</li><li>主机模式：你的linux是一个独立的主机，不能访问外网</li></ul></li><li><p>安装iso镜像：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/20/5ba0f0e4b6fe15d1de6b308785fdcf08.png" width="50%"/><p>注意：iso镜像为前面准备阶段所下载的</p></li></ol><h2 id="开机配置"><a href="#开机配置" class="headerlink" title="开机配置"></a>开机配置</h2><ol><li><p>若虚拟机出现下图提示，点击x关闭即可：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/20/252b3339a647aa0771cc872c850c559f.png" width="60%"/></li><li><p>启动虚拟机，按下回车安装CentOS6：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/20/4c9b1e9d5f9b6e293111157a41ae7dcb.png" width="50%"/><p>注意：</p><ul><li>如果按下回车无反应，鼠标点击虚拟机界面后再次尝试</li><li>如果鼠标被限制在虚拟机界面，可以使用ctrl+alt解除限制</li></ul></li><li><p>跳过磁盘检测：按下Tab键光标移动后按回车确定，否则会耗费很长时间</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/20/0724f5850887441ad199146d09b2c95d.png" width="50%"/></li><li><p>点击next，选择语言（中文简体）、键盘（美国英语式）：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/20/3b0cac5f55bdd97587319ea305d0bec0.png" width="50%"/><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/20/72236006b44c60909bcae19be0b52969.png" width="50%"/></li><li><p>选择 <code>基本存储设备</code> ，弹窗中选择 <code>是,忽略所有数据</code> ：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/20/58a1d6680000269d72a473d2d5a3ffb7.png" width="50%"/></li><li><p>输入 <code>主机名</code> ，时区（上海），密码：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/20/b2d1b53ed3f7e796536d30bb135293b7.png" width="50%"/></li><li><p>选择 <code>创建自定义布局</code> ：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/20/f9272c0c6be0cad8c70d809252f40550.png" width="50%"/><p>注意：为了详细了解linux磁盘分区，才选择自定义布局</p></li><li><p>创建分区</p><ul><li><p>光标选中空闲硬盘，点击创建：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/20/e3aa18a466bad5a150697668b780c73c.png" width="50%"/></li><li><p>选择标准分区，点击创建：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/20/876cda05ec096519debb172b8c1e80ac.png" width="20%"/></li><li><p>按照下图，分三次创建三个不同的分区：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/20/5541a266b9a2bb83a4e9165fc9b34970.png" width="50%"/><p>注意：</p><ul><li>/boot分区：存放启动时的引导文件</li><li>swap分区：当内存不足时，使用该区域硬盘充当</li><li>/分区：占剩余全部空间</li></ul></li><li><p>格式化磁盘，将修改写入磁盘：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/20/b7ea9e696479f6d3d781b7fd3a61f0fc.png" width="50%"/></li><li><p>下图界面中选择下一步：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/20/c78da2c97d00d93dedcdbb196451acca.png" width="50%"/></li></ul></li><li><p>安装桌面，选择 <code>现在自定义</code>：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/20/54d56e449804b6835b7b842c9624e36c.png" width="50%"/></li><li><p>选择需要的软件，点击下一步：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/20/2d203bd07fafbf1fcc835a9d2e7bf3a0.png" width="50%"/><p>等待安装完成：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/20/f522193371ea5285ccc5d7374398564f.png" width="50%"/><p>选择重新引导，等待重启：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/20/7e965fa0b4189d767338811a5251e431.png" width="50%"/></li><li><p>进入欢迎页面：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/20/2b2a7466ef5ab2ffaee0729077bb3552.png" width="50%"/></li><li><p>点击前进，暂不创建用户（使用root账户登录）：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/20/4a88d09e31942a4894457be9eab7a370.png" width="50%"/></li></ol><h1 id="系统配置"><a href="#系统配置" class="headerlink" title="系统配置"></a>系统配置</h1><h2 id="登录系统"><a href="#登录系统" class="headerlink" title="登录系统"></a>登录系统</h2><ol><li><p>进入系统，点击 <code>其他</code>：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/20/f2e4f76cdfee0eeec89bbe9fbfe0efd3.png" width="50%"/></li><li><p>账号：root，密码为安装系统时设置的：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/20/f3d6679551a01eeef8a5829d13ea5824.png" width="50%"/></li><li><p>关闭警告：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/20/9e89f00332d502bca4f4ea5f10f4720f.png" width="50%"/></li><li><p>进入系统：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/20/4f2b91589fafa1019e4faad6d410ad54.png" width="50%"/></li></ol><h2 id="配置网络"><a href="#配置网络" class="headerlink" title="配置网络"></a>配置网络</h2><ol><li><p>打开浏览器，进入百度首页：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/20/3e6d700e5050d4d2e83daf7c4c7c39ae.png" width="50%"/><p>注意：提示找不到服务器，说明网络无连接</p></li><li><p>按下图操作，连接网络：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/20/e6cf239b25e7e07617c21674db086a87.png" width="50%"/></li><li><p>再次进入浏览器，可访问百度首页：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/20/4ece8657bf17a6663c017c258c5df9e8.png" width="50%"/></li></ol><h2 id="VMtools"><a href="#VMtools" class="headerlink" title="VMtools"></a>VMtools</h2><ol><li><p>插件作用：</p><ul><li>windows与linux之间复制、粘贴文本</li><li>windows与linux均可操作的公共文件夹</li><li>屏幕比例自适应</li></ul></li><li><p>安装：</p><ul><li><p>点击VMware菜单栏中的虚拟机-》安装VMware Tools：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/20/2eb1db2040c8e2ca7fedcdfbcd6f8f86.png" width="60%"/><p>会自动在桌面弹窗显示：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/20/1d7514d54e4349b9741c9832b593d4a8.png" width="50%"/></li><li><p>复制上图.tar.gz后缀的文件到虚拟机/opt目录下：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/20/ce90dbf3ef58e32d8721c25a7cb6a379.png" width="50%"/></li><li><p>/opt文件夹内右键选择 <code>在终端打开</code>：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/20/ec9961b78ac29d88ed28e884e67b90b4.png" width="50%"/></li><li><p>依次输入以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf VMwareTools-10.3.22-15902021.tar.gz</span><br><span class="line">cd vmware-tools-distrib</span><br><span class="line">./vmware-install.pl</span><br></pre></td></tr></table></figure><p>注意：执行上面命令后，一路回车直至出现下图表示安装成功</p></li><li><p>安装成功：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/20/bf55f1a3523fb6245bfef5266705915e.png" width="50%"/></li><li><p>重启虚拟机：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure></li></ul></li><li><p>使用</p><ul><li><p>windows与linux之间复制粘贴请自行测试</p></li><li><p>屏幕自适应前后截图：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/20/46c02518ed4c696c0714dcb6e82e1f13.png" width="50%"/><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/20/3ba1c1c4693f07db637fe1d98b41e64b.png" width="50%"/></li><li><p>共享文件夹：</p><ul><li><p>windows下创建要共享的文件夹：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/20/911e2fdad35ced878dc1766945c7c687.png" width="50%"/></li><li><p>vmware导航栏选择 <code>虚拟机</code> ，点击 <code>设置</code>：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/20/9f7ca597b8bdaec9b2abb026cf2f014d.png" width="50%"/></li><li><p>按下图，添加路径后点击确定：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/20/4c0194d80b37a8a61d12918436c9185a.png" width="50%"/></li><li><p>依次进入虚拟机 /mnt/hgfs/MyShare文件夹中新建文件（test），并写入内容（打开方式为编辑）：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/20/793314bea119d692e48caefa09839cac.png" width="50%"/></li><li><p>从windows进入共享文件夹查看该文件内容：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/20/8a608868b612f8fd5c2808edb4aeacfa.png" width="50%"/></li></ul></li></ul></li></ol><hr><p>不足之处，欢迎留言，会及时回复，及时更正！</p><p>创作不易，感谢支持！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://plushine.cn/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="linux" scheme="https://plushine.cn/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/linux/"/>
    
    
      <category term="VMware" scheme="https://plushine.cn/tags/VMware/"/>
    
      <category term="Centos6" scheme="https://plushine.cn/tags/Centos6/"/>
    
  </entry>
  
  <entry>
    <title>Day12 正则表达式</title>
    <link href="https://plushine.cn/42406.html"/>
    <id>https://plushine.cn/42406.html</id>
    <published>2020-09-15T09:12:23.000Z</published>
    <updated>2020-09-18T05:47:00.255Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>本文章最初发布在 <a href="https://plushine.cn">XJHui’s Blog</a>，未经允许，任何人禁止转载！</p><p><font color="red" style="font-weight:700">注意：</font>最新修改版本已发布在 <a href="https://plushine.cn/42406.html">这里</a>，点击前往查看！</p><h1 id="re模块"><a href="#re模块" class="headerlink" title="re模块"></a>re模块</h1><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><ol><li>正则表达式：被用来检索（主要用途）、替换符合某个规则的字符</li><li>re模块和正则的关系：先有正则后有re模块（C语言编写，速度快）， re是python中用来实现正则功能的模块</li></ol><h2 id="mach"><a href="#mach" class="headerlink" title="mach()"></a>mach()</h2><blockquote><p>匹配符合正则表达式规则的字符串  mach(pattern,data,flag=0) </p></blockquote><ol><li><p>案例（无标志位flag）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re  <span class="comment"># 导入re模块</span></span><br><span class="line"></span><br><span class="line">strData = <span class="string">&#x27;hello world&#x27;</span>  <span class="comment"># 字符串数据</span></span><br><span class="line">res = re.match(<span class="string">&#x27;h&#x27;</span>, strData)  <span class="comment"># 两个参数分别代表：正则表达式、字符串数据</span></span><br><span class="line"><span class="keyword">if</span> res:</span><br><span class="line">    print(<span class="string">&#x27;匹配成功&#x27;</span>)</span><br><span class="line">    print(res.group())  <span class="comment"># 使用res.group()返回匹配结果</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&#x27;匹配失败&#x27;</span>)</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/15/6c71b5943e37341b25359fd7aa843a7a.png" width="80%"/></li><li><p>案例（有标志位flag）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">strData = <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line">res = re.match(<span class="string">&#x27;H&#x27;</span>, strData, re.I)  <span class="comment"># 第三个参数为标志位：re.I代表大小写不敏感</span></span><br><span class="line"><span class="keyword">if</span> res:</span><br><span class="line">    print(<span class="string">&#x27;匹配成功&#x27;</span>)</span><br><span class="line">    print(res.group())  <span class="comment"># 如果匹配失败，使用res.group()则会报错</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&#x27;匹配失败&#x27;</span>)</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/15/a6c0232157afa119331a084a8a047254.png" width="80%"/><p>标志位可选参数：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/15/6afebaf09698e07841191b4943a57a7a.png" width="80%"/></li><li><p>group()：</p><blockquote><p>匹配结果会返回到group中</p></blockquote><ul><li><p>下标：</p><ul><li>group(0)（0可省略）：匹配结果</li><li>group(1)：返回第一组匹配结果</li><li>groups()：返回所有组匹配结果</li></ul></li><li><p>案例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">  </span><br><span class="line">  strData = <span class="string">&#x27;Python is the best language in the world&#x27;</span></span><br><span class="line">  res = re.match(<span class="string">&#x27;(.*) is (.*?) .*&#x27;</span>, strData, re.I)  <span class="comment"># 第三个参数为标志位：re.I代表大小写不敏感</span></span><br><span class="line">  <span class="keyword">if</span> res:</span><br><span class="line">      print(<span class="string">&#x27;匹配成功&#x27;</span>)</span><br><span class="line">      print(<span class="string">&#x27;res.groups()：&#x27;</span>, res.groups())  <span class="comment"># groups(陪陪)</span></span><br><span class="line">      print(<span class="string">&#x27;res.group()：&#x27;</span>, res.group())</span><br><span class="line">      print(<span class="string">&#x27;res.group(0)：&#x27;</span>, res.group(<span class="number">0</span>))</span><br><span class="line">      print(<span class="string">&#x27;res.group(1)：&#x27;</span>, res.group(<span class="number">1</span>))</span><br><span class="line">      print(<span class="string">&#x27;res.group(2)：&#x27;</span>, res.group(<span class="number">2</span>))</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">      print(<span class="string">&#x27;匹配失败&#x27;</span>)</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/16/5ac50f6b3e38b2eb0942061a28c059d4.png" width="80%"/></li><li><p>注意：</p><ul><li>有几组匹配结果的判断方法后面会讲解</li><li>group(0)、group()效果是一致的<h2 id="compile"><a href="#compile" class="headerlink" title="compile()"></a>compile()</h2></li></ul></li></ul></li></ol><blockquote><p>将正则表达式编译成一个正则表达式对象，以提高效率</p></blockquote><ol><li><p>为什么会提高效率？当使用match匹配时，python每次都会将正则表达式转换成对象，而使用compile只需要转换一次</p></li><li><p>案例：匹配4位数字</p><ul><li><p>match方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">htmlTag = <span class="string">&#x27;12345677&#x27;</span></span><br><span class="line">pattern = <span class="string">&#x27;\d&#123;4&#125;&#x27;</span>  <span class="comment"># 固定个数可使用&#123;num&#125;表示，下面具体会讲解</span></span><br><span class="line">res = re.match(pattern, htmlTag)</span><br><span class="line">print(res.group())</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/18/064ff82aa39229dbb5341f9f3b50314c.png" width="80%"/></li><li><p>compile方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">reobj = re.<span class="built_in">compile</span>(<span class="string">&#x27;\d&#123;4&#125;&#x27;</span>)</span><br><span class="line">res = reobj.match(<span class="string">&#x27;12345677&#x27;</span>)</span><br><span class="line">print(res.group())</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/18/6cac6191a222c86a222997c0c2291e71.png" width="80%"/></li><li><p>注意：</p><ul><li>两种方法结果是一致的，只是速度有差别</li><li>下文案例主要使用match方法讲解，但推荐使用compile方法</li></ul></li></ul></li></ol><h2 id="search"><a href="#search" class="headerlink" title="search()"></a>search()</h2><blockquote><p>全文查找，找到一个就返回，而match必须是从开头开始匹配</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">data = <span class="string">&#x27;I love China!&#x27;</span></span><br><span class="line">pattern = <span class="string">&#x27;China&#x27;</span></span><br><span class="line">res = re.search(pattern, data)</span><br><span class="line">print(res)</span><br><span class="line">print(res.group())</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/18/b917b78821d96e896cdc81e05b761c2e.png" width="80%"/><h2 id="findall"><a href="#findall" class="headerlink" title="findall()"></a>findall()</h2><blockquote><p>将所有匹配结果保存到列表中返回，而search只是返回第一个</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">data = <span class="string">&#x27;I love China, China!&#x27;</span></span><br><span class="line">pattern = <span class="string">&#x27;China&#x27;</span></span><br><span class="line">res = re.findall(pattern, data)</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/18/3da3c353702c7cf9d7a5f61cfad9bf47.png" width="80%"/><h2 id="sub"><a href="#sub" class="headerlink" title="sub()"></a>sub()</h2><blockquote><p>将匹配到的数据进行替换 re.sub(pattern,replace,data,count,flags=0)</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">data = <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line">pattern = <span class="string">&#x27;l&#x27;</span></span><br><span class="line">res = re.sub(pattern, <span class="string">&#x27;L&#x27;</span>, data, <span class="number">2</span>)  <span class="comment"># 将匹配的字符换成L，并限制替换次数为2</span></span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/18/4ebb3224236e43c544436a53e2a0cb1f.png" width="80%"/><h2 id="split"><a href="#split" class="headerlink" title="split()"></a>split()</h2><blockquote><p>分隔字符串（前面有讲过），最后返回一个列表</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">data = <span class="string">&#x27;1,2,3,4,5,6&#x27;</span></span><br><span class="line">res = re.split(<span class="string">&#x27;,&#x27;</span>, data)</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/18/5974aadb95bfbd6f7ad5e5f386b9f1d6.png" width="80%"/><h1 id="常用匹配规则"><a href="#常用匹配规则" class="headerlink" title="常用匹配规则"></a>常用匹配规则</h1><h2 id="匹配字符"><a href="#匹配字符" class="headerlink" title="匹配字符"></a>匹配字符</h2><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/17/fb46349ae74d14204ceeaab95668f417.png" width="60%"/><ol><li><p>.（点）</p><blockquote><p>匹配任意1个字符（除了换行符\n）</p></blockquote><p>案例：匹配 ‘李娜’</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">name = <span class="string">&#x27;李娜&#x27;</span>  <span class="comment"># 数据</span></span><br><span class="line">pattern = <span class="string">&#x27;李.&#x27;</span>  <span class="comment"># 正则表达式</span></span><br><span class="line">res = re.match(pattern, name)  <span class="comment"># match方法</span></span><br><span class="line">print(res.group())</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/17/2f32dcaa322f6a59d22e5e90051a7050.png" width="80%"/></li><li><p>[]</p><blockquote><p>匹配括号中的任意一个字符</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">name = <span class="string">&#x27;elloh&#x27;</span></span><br><span class="line">pattern = <span class="string">&#x27;[he]&#x27;</span></span><br><span class="line">res = re.match(pattern, name)</span><br><span class="line">print(res.group(<span class="number">0</span>))</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/17/6cc9843cfbd73aeeb1f53eb3fdd80bd5.png" width="80%"/><p>注意：[a-z]、[A-Z]、[0-9]语法是正确的，甚至可以写成[a-zA-Z0-9]</p></li><li><p>\d、\D</p><blockquote><p>匹配一个数字（0-9）、一个非数字</p></blockquote><ul><li><p>案例1（\d，匹配一个数字）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">data = <span class="string">&#x27;1123aaa&#x27;</span></span><br><span class="line">pattern = <span class="string">&#x27;\d&#x27;</span></span><br><span class="line">print(re.match(pattern, data).group())</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/17/afcf9c7bdfc859a130b21094519809a5.png" width="80%"/></li><li><p>案例2（\D，匹配一个非数字）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">data = <span class="string">&#x27;a1123a&#x27;</span></span><br><span class="line">pattern = <span class="string">&#x27;\D&#x27;</span></span><br><span class="line">print(re.match(pattern, data).group())</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/17/70e6d616bd842ce5d86e10526a016454.png" width="80%"/></li></ul></li><li><p>\s、\S</p><blockquote><p>匹配一个空字符、一个非空字符</p></blockquote><ul><li><p>\s（匹配一个空字符）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">data = <span class="string">&#x27; a1123a&#x27;</span></span><br><span class="line">pattern = <span class="string">&#x27;\s&#x27;</span></span><br><span class="line">print(re.match(pattern, data).group())</span><br></pre></td></tr></table></figure></li><li><p>\S（匹配一个非空字符）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">data = <span class="string">&#x27;a1123a&#x27;</span></span><br><span class="line">pattern = <span class="string">&#x27;\S&#x27;</span></span><br><span class="line">print(re.match(pattern, data).group())</span><br></pre></td></tr></table></figure></li></ul></li><li><p>\w、\W</p><blockquote><p>匹配一个单词字符（0-9、a-z、A-Z、_）、一个非单词字符</p></blockquote><ul><li><p>\w</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">data = <span class="string">&#x27;a1123a&#x27;</span></span><br><span class="line">pattern = <span class="string">&#x27;\w&#x27;</span></span><br><span class="line">print(re.match(pattern, data).group())</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/17/836fc869d3a7cb5d52e040f3151ee295.png" width="80%"/></li><li><p>\W</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">data = <span class="string">&#x27; a1123a&#x27;</span></span><br><span class="line">pattern = <span class="string">&#x27;\W&#x27;</span>  <span class="comment"># 匹配一个空字符</span></span><br><span class="line">print(re.match(pattern, data).group())</span><br></pre></td></tr></table></figure></li></ul></li></ol><h2 id="匹配字符数量"><a href="#匹配字符数量" class="headerlink" title="匹配字符数量"></a>匹配字符数量</h2><blockquote><p>匹配字符数量的符号满足前一个匹配规则的次数</p></blockquote><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/17/9d280b2b3a30bbab52b68529047a1547.png" width="60%"/><ol><li><p>*</p><blockquote><p>满足前一个匹配规则0或无限次</p></blockquote><ul><li><p>案例1：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">print(re.match(<span class="string">&#x27;[A-Z]*&#x27;</span>, <span class="string">&#x27;MAAA&#x27;</span>).group())</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/17/8150bce81badd46620f570b437064cff.png" width="80%"/></li><li><p>综合案例：匹配符合规范的python变量名（不能以数字开头，只能包含字母和数字）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">pattern = <span class="string">&#x27;[a-zA-Z_]+\w*&#x27;</span>  <span class="comment"># 正则表达式（匹配字符要搭配一个数量），a-zA-Z0-9不需要加任何分隔符</span></span><br><span class="line">dataList = [<span class="string">&#x27;1nihao&#x27;</span>, <span class="string">&#x27;nihao&#x27;</span>, <span class="string">&#x27;Test111&#x27;</span>, <span class="string">&#x27;Tes t_&#x27;</span>, <span class="string">&#x27;Test_t&#x27;</span>, <span class="string">&#x27;**test&#x27;</span>]  <span class="comment"># 测试数据</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> dataList:  </span><br><span class="line">    <span class="keyword">try</span>:  <span class="comment"># 异常处理</span></span><br><span class="line">        res = re.match(pattern, item)</span><br><span class="line">        print(res.group())</span><br><span class="line">    <span class="keyword">except</span> AttributeError: </span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/17/74e5b70847b6a279d46a52d691d0cea9.png" width="80%"/></li></ul></li><li><p>+</p><blockquote><p>满足前一个匹配规则至少1次</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">print(re.match(<span class="string">&#x27;[a-bA-B]+&#x27;</span>, <span class="string">&#x27;aabbcd&#x27;</span>).group())  <span class="comment"># 注意：[a-b]表示[ab]，其余同理</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/17/d86fda446fe5dd5fc1213249605625d9.png" width="80%"/></li><li><p>{,max}、{min,}、{min,max}，？</p><blockquote><p>满足前一个匹配规则最多max次、最少min次、min-max次，0-1次</p></blockquote><ul><li><p>案例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;\d&#123;,5&#125;&#x27;</span>, re.match(<span class="string">&#x27;\d&#123;,5&#125;&#x27;</span>, <span class="string">&#x27;12344555a1&#x27;</span>).group())  </span><br><span class="line">print(<span class="string">&#x27;\d&#123;1,&#125;&#x27;</span>, re.match(<span class="string">&#x27;\d&#123;1,&#125;&#x27;</span>, <span class="string">&#x27;12344555a1&#x27;</span>).group())</span><br><span class="line">print(<span class="string">&#x27;\d&#123;1,5&#125;&#x27;</span>, re.match(<span class="string">&#x27;\d&#123;1,5&#125;&#x27;</span>, <span class="string">&#x27;12344555a1&#x27;</span>).group())</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/17/e58297ba7da7a1fde05acf35469a0177.png" width="80%"/><p>注意：</p><ul><li>?的含义和{0,1}相同</li><li>固定次数为5，可以使用{5}来实现</li></ul></li><li><p>综合案例：匹配qq邮箱（数字@qq.com）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">pattern = <span class="string">&#x27;\d&#123;1,&#125;@qq.com&#x27;</span></span><br><span class="line">dataList = [<span class="string">&#x27;123@qq.com&#x27;</span>, <span class="string">&#x27;123@qq1.com&#x27;</span>, <span class="string">&#x27;a123@qq.com&#x27;</span>, <span class="string">&#x27;123@qq.cn&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> dataList:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        res = re.match(pattern, item)</span><br><span class="line">        print(res.group())</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">except</span> AttributeError:</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/17/7744093335eb087f12eed3a5dc2feb49.png" width="80%"/></li></ul></li></ol><h2 id="原生字符串"><a href="#原生字符串" class="headerlink" title="原生字符串"></a>原生字符串</h2><blockquote><p>python读取字符串时会对\后面的字符自动进行转义，从而引起一些问题</p></blockquote><ol><li><p>引入案例：打印路径 ‘d:\next\1day\4class’</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="string">&#x27;d:\python\next\1day\4class&#x27;</span></span><br><span class="line">print(<span class="built_in">str</span>)</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/17/dcab2a37b3155879dd816a72ad479ed2.png" width="80%"/><p>解决方法：在所有的\前面再添加一个转义字符\</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="string">&#x27;d:\\python\\next\\1day\\4class&#x27;</span></span><br><span class="line">print(<span class="built_in">str</span>)</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/17/01006d42726f317c321a5a516cfe5f86.png" width="80%"/></li><li><p>匹配路径：’d:\\test’</p><ul><li><p>直接匹配：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">print(re.match(<span class="string">&#x27;d:\\test&#x27;</span>, <span class="string">&#x27;d:\\test&#x27;</span>).group())</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/17/8a247c61a46c4db36bce88cbf9bb1de0.png" width="80%"/><p>注意：在匹配时，正则表达式中会被转义成 ‘d:\test’ 故不能与 ‘d:\test’ 匹配成功</p></li><li><p>解决方法1：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">print(re.match(<span class="string">&#x27;d:\\\\test&#x27;</span>, <span class="string">&#x27;d:\\test&#x27;</span>).group())</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/17/c7e666301db5da82f0072d9f9813a6f1.png" width="80%"/><p>注意：</p><ul><li><p>为什么要加两个\：因为匹配串中每个\都需要一个\去取消转义</p></li><li><p>虽然上图结果是 ‘d:\test’ 但匹配成功的字符串肯定是 ‘d:\test’，因为只有 ‘d:\\test’ 打印出来才是 ‘d:\test’ ：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/17/b19f132e3d971c3a049a37d203ec5934.png" width="80%"/></li></ul></li><li><p>解决方法2：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">print(re.match(<span class="string">r&#x27;d:\\test&#x27;</span>, <span class="string">&#x27;d:\\test&#x27;</span>).group())  <span class="comment"># 保证两个串中\个数一致，在正则前面加r</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/17/07b0fd0726a1cd4e63b3325e2c88da3a.png" width="80%"/><p>注意：如果你疑惑为什么少了个\，就去看解决方法1中的注2</p></li></ul></li></ol><h2 id="匹配开头结尾"><a href="#匹配开头结尾" class="headerlink" title="匹配开头结尾"></a>匹配开头结尾</h2><ol><li><p>^</p><blockquote><p>匹配字符串的开头</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">print(re.match(<span class="string">&#x27;^P.*&#x27;</span>, <span class="string">&#x27;Python is good&#x27;</span>).group())</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/17/206d5ab90fbf3c3b4da74189f9aab323.png" width="80%"/></li><li><p>$</p><blockquote><p>匹配字符串的结尾</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">print(re.match(<span class="string">&#x27;\d&#123;1,13&#125;@qq.com$&#x27;</span>, <span class="string">&#x27;1231@qq.com&#x27;</span>).group())</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/17/1a1cbd79c149dbb22c1d93d19cb16aae.png" width="80%"/></li></ol><h2 id="分组匹配"><a href="#分组匹配" class="headerlink" title="分组匹配"></a>分组匹配</h2><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/18/b983c1291efaa211e7ebc0b3e96120d9.png" width="80%"/><ol><li><p>|</p><blockquote><p>匹配左右任意一个表达式</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">pattern = <span class="string">&#x27;[1-9]?\d$|100&#x27;</span></span><br><span class="line">print(re.match(pattern, <span class="string">&#x27;78&#x27;</span>).group())</span><br><span class="line">print(re.match(pattern, <span class="string">&#x27;100&#x27;</span>).group())</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/18/50bdf8453cf14274b40cec0f0cea1666.png" width="80%"/><p>上面的正则表达式可分别匹配78、100，为便于理解，可将正则表达式分别如下：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/18/1ea0a361b1d4910d5e91e91562cdde03.png" width="50%"/></li><li><p>(ab)</p><blockquote><p>将括号中的字符作为一个分组</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配电话号码 ****-12345678</span></span><br><span class="line">pattern = <span class="string">&#x27;(\d&#123;4,4&#125;)-(\d&#123;8,8&#125;)&#x27;</span></span><br><span class="line">print(re.match(pattern, <span class="string">&#x27;0101-12334234&#x27;</span>).group(<span class="number">0</span>))</span><br><span class="line">print(re.match(pattern, <span class="string">&#x27;0101-12334234&#x27;</span>).group(<span class="number">1</span>))  <span class="comment"># 分组后的第一组</span></span><br><span class="line">print(re.match(pattern, <span class="string">&#x27;0101-12334234&#x27;</span>).group(<span class="number">2</span>))  <span class="comment"># 分组后的第二组</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/18/276461dc375fe2bc065cc1d07fb068d5.png" width="80%"/><p>注意：每一个()对应一个匹配结果</p></li><li><p>\num</p><blockquote><p>引用前面分组的字符串</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">htmlTag = <span class="string">&#x27;&lt;html&gt;&lt;h1&gt;你好啊&lt;/h1&gt;&lt;/html&gt;&#x27;</span></span><br><span class="line">pattern = <span class="string">r&#x27;&lt;(.+)&gt;&lt;(.+)&gt;(.+)&lt;/\2&gt;&lt;/\1&gt;&#x27;</span>  <span class="comment"># /2、/1分别代表前面分组2（h1）和分组1（html），注意r可以加在&#x27;&#x27;前面</span></span><br><span class="line">res = re.match(pattern, htmlTag)</span><br><span class="line">print(res.group(<span class="number">0</span>))</span><br><span class="line">print(res.group(<span class="number">1</span>))</span><br><span class="line">print(res.group(<span class="number">2</span>))</span><br><span class="line">print(res.group(<span class="number">3</span>))</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/18/34b2386e079d1a6358cf0a12afb5f0a0.png" width="80%"/></li><li><p>?P</p><blockquote><p>起别名：?P&lt;名字&gt;  使用别名：(?P=名字)</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配html</span></span><br><span class="line">htmlTag = <span class="string">&#x27;&lt;html&gt;&lt;h1&gt;你好啊&lt;/h1&gt;&lt;/html&gt;&#x27;</span></span><br><span class="line">pattern = <span class="string">r&#x27;&lt;(?P&lt;html&gt;.+)&gt;&lt;(?P&lt;h1&gt;.+)&gt;(.+)&lt;/(?P=h1)&gt;&lt;/(?P=html)&gt;&#x27;</span></span><br><span class="line">res = re.match(pattern, htmlTag)</span><br><span class="line">print(res.group(<span class="number">0</span>))</span><br><span class="line">print(res.group(<span class="number">1</span>))</span><br><span class="line">print(res.group(<span class="number">2</span>))</span><br><span class="line">print(res.group(<span class="number">3</span>))</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/18/c589257e45536fa09c0aed46e6fd0e46.png" width="80%"/></li></ol><h1 id="贪婪模式"><a href="#贪婪模式" class="headerlink" title="贪婪模式"></a>贪婪模式</h1><blockquote><p>默认情况下会尽可能多的去匹配满足条件的数据</p></blockquote><ol><li><p>案例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">data = <span class="string">&#x27;123456&#x27;</span></span><br><span class="line">pattern = <span class="string">&#x27;\d&#123;3,6&#125;&#x27;</span></span><br><span class="line">pattern_no = <span class="string">&#x27;\d&#123;3,6&#125;?&#x27;</span>  <span class="comment"># 非贪婪只需要在最后添加一个？</span></span><br><span class="line">print(<span class="string">&#x27;贪婪：&#x27;</span>, re.match(pattern, data).group())  <span class="comment"># 默认为贪婪模式</span></span><br><span class="line">print(<span class="string">&#x27;非贪婪：&#x27;</span>, re.match(pattern_no, data).group())</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/18/79e16bfe3ef62beb0ff7c6f3e8358d22.png" width="80%"/><p>注意：非贪婪模式会尽可能少的去匹配满足条件的数据，非贪婪模式中的？其实就是前面匹配字符数量中的？</p></li><li><p>优先级问题（极易错）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">content = <span class="string">&#x27;aacbacbc&#x27;</span></span><br><span class="line">pattern = re.<span class="built_in">compile</span>(<span class="string">&#x27;a.*?b&#x27;</span>)</span><br><span class="line">result = re.search(pattern,content)</span><br><span class="line">print(result.group())</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/18/7280eb323a6a0e9a8b01efc17d53ea59.png" width="80%"/><p>答案为什么不是acb？ 因为最先开始的匹配拥有最高的优先权，即：</p><p>匹配到的第一个a具有最高优先权，只要之后没有发生匹配失败的情况，它就会一直匹配下去，直到匹配成功，感谢 <a href="https://blog.csdn.net/Sirow/article/details/89512885">Siro阿希</a> ！</p></li></ol><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>好啦，python基础的学习到这里就结束了！</p><p>后面会更新linux的学习笔记，期待吧！一起加油！</p><p>终于成功入门了一次，hahaha…</p><hr><p>不足之处，欢迎留言，会及时回复，及时更正！</p><p>创作不易，感谢支持！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://plushine.cn/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="python" scheme="https://plushine.cn/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/python/"/>
    
    
      <category term="python基础" scheme="https://plushine.cn/tags/python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Day11 文件操作和模块</title>
    <link href="https://plushine.cn/65489.html"/>
    <id>https://plushine.cn/65489.html</id>
    <published>2020-08-27T03:39:32.000Z</published>
    <updated>2020-09-18T05:46:57.794Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>本文章最初发布在 <a href="https://plushine.cn">XJHui’s Blog</a>，未经允许，任何人禁止转载！</p><p><font color="red" style="font-weight:700">注意：</font>最新修改版本已发布在 <a href="https://plushine.cn/65489.html">这里</a>，点击前往查看！</p><h1 id="文件打开关闭"><a href="#文件打开关闭" class="headerlink" title="文件打开关闭"></a>文件打开关闭</h1><h2 id="打开"><a href="#打开" class="headerlink" title="打开"></a>打开</h2><blockquote><p>使用open函数，可以打开已存在的文件或者创建一个新文件</p></blockquote><ol><li><p>语法格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">open</span>(<span class="string">&#x27;文件名称&#x27;</span>,<span class="string">&#x27;打开模式&#x27;</span>)  <span class="comment"># 打开模式也要使用引号</span></span><br></pre></td></tr></table></figure></li><li><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>)  </span><br></pre></td></tr></table></figure></li><li><p>文件打开模式：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/08/27/d6421dba7a7c8f115dd9b584e04ee592.png" width="80%"/></li><li><p>案例：使用w打开模式，打开Test.txt文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">open</span>(<span class="string">&#x27;./Test.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)  <span class="comment"># 打开一个不存在的文件</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/08/27/38698c70b8fd8889e883e9bb23203e62.png" width="80%"/><p>注意：打开模式为w时，若文件不存在则会自动创建</p></li></ol><h2 id="关闭"><a href="#关闭" class="headerlink" title="关闭"></a>关闭</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fobj = <span class="built_in">open</span>(<span class="string">&#x27;./Test.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)  <span class="comment"># open函数返回文件对象，使用fobj接受这个对象</span></span><br><span class="line">fobj.close()  <span class="comment"># 使用：文件对象.close() 关闭打开的文件</span></span><br></pre></td></tr></table></figure><h1 id="文件的写入"><a href="#文件的写入" class="headerlink" title="文件的写入"></a>文件的写入</h1><blockquote><p>将 hello world 写入test.txt 文件中</p></blockquote><h2 id="w-只写"><a href="#w-只写" class="headerlink" title="w-只写"></a>w-只写</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fobj = <span class="built_in">open</span>(<span class="string">&#x27;./test.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)  <span class="comment"># 使用open函数在w打开模式下打开test.txt文件</span></span><br><span class="line">fobj.write(<span class="string">&#x27;hello world&#x27;</span>)  <span class="comment"># 使用：文件对象.write(要写入的内容) 将字符串写入文件</span></span><br><span class="line">fobj.close()  <span class="comment"># 写入后记得要关闭</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/08/27/e220063fc31b926ad5e5ff4a172abd3a.png" width="80%"/><p>注意：默认的编码是gbk，为防止乱码：</p><ul><li><p>方法一（打开文件时）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fobj = <span class="built_in">open</span>(<span class="string">&#x27;./test.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p>方法二（写入文件时）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">obj.write(<span class="string">&#x27;hello world&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>)) </span><br></pre></td></tr></table></figure></li></ul><h2 id="wb-只二进制写"><a href="#wb-只二进制写" class="headerlink" title="wb-只二进制写"></a>wb-只二进制写</h2><blockquote><p>01字符串</p></blockquote>   <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fobj = <span class="built_in">open</span>(<span class="string">&#x27;./test.txt&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">fobj.write(<span class="string">&#x27;hello world&#x27;</span>)</span><br><span class="line">fobj.close()</span><br></pre></td></tr></table></figure><p>报错：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/08/27/f8676f4a755832c8a288f1ed77e3d986.png" width="80%"/><p>注意：wb写入时，要指定写入值的类型 <code>obj.write(&#39;hello world&#39;.encode(&#39;utf-8&#39;))</code></p><p>修改后运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/08/27/47c1ee90951c6de300c0d8f6fdf86fcb.png" width="80%"/><h2 id="a-只追加写"><a href="#a-只追加写" class="headerlink" title="a-只追加写"></a>a-只追加写</h2><blockquote><p>追加：存在则在原来基础上接着写，不存在则从头写</p></blockquote>   <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fobj = <span class="built_in">open</span>(<span class="string">&#x27;./test.txt&#x27;</span>, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">fobj.write(<span class="string">&#x27;这是追加的内容&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">fobj.close()</span><br></pre></td></tr></table></figure><p>报错：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/08/27/3895f9d47c2eae8fae8d81eaf7ef7381.png" width="80%"/><p>注意：a打开模式，写入内容必须是字符串，不需要添加encode。</p><p>修改后报错：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/08/27/74f5867df3d9739793af03a649ada3f2.png" width="80%"/><p>注意：虽然是字符串类型写入的，但打开后依然显示乱码，在打开文件时使用 <code>encoding = &#39;utf-8&#39;</code></p><p>修改后运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/08/27/303e3b118af96de5df9a2d75a073ffcc.png" width="80%"/><h2 id="ab-只二进制追加"><a href="#ab-只二进制追加" class="headerlink" title="ab-只二进制追加"></a>ab-只二进制追加</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fobj = <span class="built_in">open</span>(<span class="string">&#x27;./test.txt&#x27;</span>, <span class="string">&#x27;ab&#x27;</span>)</span><br><span class="line">fobj.write(<span class="string">&#x27;\n这还是追加的内容&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">fobj.close()</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/08/27/6bc08c85532d56a2487e9e4f09ebafe9.png" width="80%"/><p>注意：’\n’在写入时表示换行符！</p><h1 id="文件的读取"><a href="#文件的读取" class="headerlink" title="文件的读取"></a>文件的读取</h1><h2 id="read"><a href="#read" class="headerlink" title="read()"></a>read()</h2><blockquote><p>read()表示读取全部内容，r打开模式下：read(2)读取前两个字符，rb模式下表示读取前两个字节</p></blockquote><p>案例：读取test.txt文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)  <span class="comment"># 打开模式使用r（只读）</span></span><br><span class="line">print(f.read(<span class="number">10</span>))  <span class="comment"># 读取10个字符</span></span><br><span class="line">print(<span class="string">&#x27;---------------&#x27;</span>)</span><br><span class="line">print(f.read())  <span class="comment"># 读取全部内容</span></span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/08/27/e88572140a3330b5be30ccf4d99bf0e7.png" width="80%"/><p>注意：第二个read()开始读取的位置为第一个read()读取结束的位置+1。</p><h2 id="readline"><a href="#readline" class="headerlink" title="readline()"></a>readline()</h2><blockquote><p>读取一行</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">print(f.readline())</span><br><span class="line">print(f.readline())</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/08/27/8031c5d46310e51dbaaf29a4042c9838.png" width="80%"/><p>注意：每行最后都会跟一个空行，想避免这个问题可以使用<code>end=&#39;&#39;</code></p><h2 id="readlines"><a href="#readlines" class="headerlink" title="readlines()"></a>readlines()</h2><blockquote><p>按行读取所有内容并将读取到的数据存入列表中</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)  <span class="comment"># 使用r打开模式，打开文件</span></span><br><span class="line">dataList = f.readlines()  <span class="comment"># readlines()读取文件所有内容</span></span><br><span class="line">print(<span class="built_in">type</span>(dataList))  <span class="comment"># 打印存放读取数据的列表</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> dataList:  <span class="comment"># 遍历该列表，输出文件内容</span></span><br><span class="line">    print(item, end=<span class="string">&#x27;&#x27;</span>)  <span class="comment"># 使用end=&#x27;&#x27; 避免出现空行的问题</span></span><br><span class="line">f.close()  <span class="comment"># 关闭文件</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/08/27/b2a119beaeba366c862166b249c7c952.png" width="80%"/><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><ol><li><p>解码：decode</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>)  <span class="comment"># 二进制读取</span></span><br><span class="line">data = f.read()</span><br><span class="line">print(data.decode(<span class="string">&#x27;utf-8&#x27;</span>))  <span class="comment"># decode解码</span></span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/08/27/6b76168d66d2c5f6868d96df57b182fc.png" width="80%"/></li><li><p>with关键字</p><blockquote><p>使用open()函数打开文件后，容易忘记关闭文件，使用with关键字打开文件可避免因此带来的问题</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    print(f.read())</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/08/27/76e0af42599c7d83b5384a91cef72f5e.png" width="80%"/></li></ol><h1 id="文件备份脚本"><a href="#文件备份脚本" class="headerlink" title="文件备份脚本"></a>文件备份脚本</h1><h2 id="小文件"><a href="#小文件" class="headerlink" title="小文件"></a>小文件</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">smallFileCopy</span>():</span></span><br><span class="line">    old_name = <span class="built_in">input</span>(<span class="string">&#x27;请输入要备份的文件名：&#x27;</span>)</span><br><span class="line">    old_nameList = old_name.split(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">    new_name = old_nameList[<span class="number">0</span>] + <span class="string">&#x27;备份.&#x27;</span> + old_nameList[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(old_name, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> old_file, <span class="built_in">open</span>(new_name, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> new_file:  <span class="comment"># 要同时打开多个文件是，可以只使用一个with，多个open()之间使用逗号分隔</span></span><br><span class="line">        fileData = old_file.read()</span><br><span class="line">        new_file.write(fileData)</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">smallFileCopy()</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/08/28/a0ac036f5f8ccf6aca0814e1fc761b26.png" width="80%"/><p>注意：该代码仅适用于小型文件，因为使用read()一次读取全部会消耗较大内存。</p><h2 id="大文件"><a href="#大文件" class="headerlink" title="大文件"></a>大文件</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bigFileCopy</span>():</span></span><br><span class="line">    old_name = <span class="built_in">input</span>(<span class="string">&#x27;请输入要备份的文件名：&#x27;</span>)</span><br><span class="line">    old_nameList = old_name.split(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">    new_name = old_nameList[<span class="number">0</span>] + <span class="string">&#x27;备份.&#x27;</span> + old_nameList[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(old_name, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> old_file, <span class="built_in">open</span>(new_name, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> new_file:</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            fileData = old_file.read(<span class="number">1024</span>)</span><br><span class="line">            new_file.write(fileData)</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(fileData) &lt; <span class="number">1024</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">bigFileCopy()</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/08/28/6135d0729851d8322f7b5f11d362a927.png" width="80%"/><p>注意：每次读取固定大小字符，避免一次读取过多内容。</p><h1 id="文件定位"><a href="#文件定位" class="headerlink" title="文件定位"></a>文件定位</h1><h2 id="tell"><a href="#tell" class="headerlink" title="tell"></a>tell</h2><blockquote><p>获取文件指针位置（字节）</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    print(f.read(<span class="number">6</span>))  <span class="comment"># 读取6个字符</span></span><br><span class="line">    print(f.tell())  <span class="comment"># 打印文件指针位置</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/08/28/177b07dfbed6da6fc174f66a035a2dd5.png" width="80%"/><p>注意：</p><ul><li>utf-8编码下：汉字所占字节数为3</li><li>gbk编码下：汉字所占字节数为2</li><li>英文所占字节数，在上面两种编码下均为1个</li></ul><p>案例中所用编码格式为utf-8，共读取6个字符，故文件指针位置在第3*6=18个字节处</p><h2 id="truncate"><a href="#truncate" class="headerlink" title="truncate"></a>truncate</h2><blockquote><p>f.truncate(10)：保留前10个字节的内容</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;r+&#x27;</span>, encoding=<span class="string">&#x27;gbk&#x27;</span>) <span class="keyword">as</span> f:  <span class="comment"># gbk编码格式，每个中文占2个字节</span></span><br><span class="line">    f.truncate(<span class="number">10</span>)  <span class="comment"># 字节</span></span><br><span class="line">    print(<span class="string">&#x27;-------截取后文件的内容：-------&#x27;</span>)</span><br><span class="line">    print(f.read())</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/08/28/c6b3173ec42d6969baba7bcd849aefe4.png" width="80%"/><h2 id="seek"><a href="#seek" class="headerlink" title="seek"></a>seek</h2><blockquote><p>设置文件指针的位置</p></blockquote><ol><li><p>语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f.seek(offset,<span class="keyword">from</span>)</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>offset：表示偏移量（字节，为负表示向前移动）</li><li>from：0-从头，1-从当前位置，2-从文件末尾</li></ul></li><li><p>案例1：seek的简单使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;test备份.txt&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    print(f.read(<span class="number">3</span>).decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    f.seek(<span class="number">-3</span>, <span class="number">1</span>)  <span class="comment"># 文件指针回溯3个字节</span></span><br><span class="line">    print(f.read(<span class="number">6</span>).decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/14/36b401155a0ae56fbec6a5f6de9a915d.png" width="80%"/></li><li><p>当文件打开方式为非二进制时，只允许从文件的开头计算相对位置。</p></li></ol><h1 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h1><h2 id="import"><a href="#import" class="headerlink" title="import"></a>import</h2><blockquote><p>导入模块中所有的功能</p></blockquote><ol><li><p>导入和使用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time  <span class="comment"># 导入</span></span><br><span class="line"></span><br><span class="line">print(time.ctime())  <span class="comment"># 调用</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/15/6a1fd93399170b3baac6aef2ce04acc9.png" width="80%"/></li><li><p>首次导入模块时，系统的操作：</p><ul><li>打开模块文件</li><li>执行该文件，将执行过程中产生的名字都丢到模块的名称空间</li><li>在程序中会有一个模块的名称指向模块的名称空间去</li></ul></li><li><p>模块搜索路径：</p><ul><li><p>优先搜索当前目录（自定义模块中的函数名不要和系统中的重复）</p></li><li><p>sys模块中搜索：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/15/7c54b315967481f1b36662cff5ac1482.png" width="80%"/></li><li><p>第三方模块默认安放位置：</p><ul><li>linux：/usr/local/lib/python</li><li>windows：环境变量位置\Lib\site-package</li></ul></li></ul></li><li><p>as 起别名：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time <span class="keyword">as</span> t  <span class="comment"># 别名为t</span></span><br><span class="line"></span><br><span class="line">print(t.ctime())  <span class="comment"># 模块名称不可使用</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/15/9e80592b50773c133bd36a8ebaf5cf02.png" width="80%"/></li></ol><h2 id="from…import"><a href="#from…import" class="headerlink" title="from…import"></a>from…import</h2><blockquote><p>只导入其中部分函数</p></blockquote><ol><li><p>导入和使用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> ctime, time  <span class="comment"># 导入两个函数，不需要添加括号</span></span><br><span class="line"></span><br><span class="line">print(ctime())  <span class="comment"># 不再需要模块名称</span></span><br></pre></td></tr></table></figure><p>导入全部：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> *  <span class="comment"># 导入全部函数</span></span><br><span class="line"></span><br><span class="line">print(ctime())  <span class="comment"># 不再需要模块名称</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/15/b6f46f106ee865194f553d213ec06b91.png" width="80%"/></li><li><p>首次导入模块时，系统的操作：</p><ul><li>以模块为准创建一个名称空间</li><li>执行该模块文件，将执行过程中产生的名字都丢到模块的名称空间</li><li>在程序中拿到一个名字，该名字直接指向模块中的某一个名字</li></ul><p>缺点：容易与本地文件中的函数名称冲突</p></li></ol><h2 id="os模块"><a href="#os模块" class="headerlink" title="os模块"></a>os模块</h2><ol><li><p>重命名：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">os.rename(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;test_重命名.txt&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p>删除文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">os.remove(<span class="string">&#x27;test备份.txt&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p>创建文件夹：</p><ul><li><p>创建一级目录：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">os.mkdir(<span class="string">&#x27;hello&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p>创建多级目录：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">os.makedirs(<span class="string">&#x27;world\hello&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>删除文件夹：</p><ul><li><p>删除空目录：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">os.rmdir(<span class="string">&#x27;hello&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p>删除非空目录：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> shutil <span class="keyword">as</span> st</span><br><span class="line"></span><br><span class="line">st.rmtree(<span class="string">&#x27;world&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>打印当前程序目录：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(os.getcwd())</span><br></pre></td></tr></table></figure></li><li><p>遍历d盘根目录下文件名称：</p><ul><li><p>os.listdir()：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">rs = os.listdir(<span class="string">&#x27;d:/&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> rs:</span><br><span class="line">    print(item)</span><br></pre></td></tr></table></figure></li><li><p>os.scandir()：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> os.scandir(<span class="string">&#x27;d:/&#x27;</span>) <span class="keyword">as</span> sc:</span><br><span class="line">    <span class="keyword">for</span> rs <span class="keyword">in</span> sc:</span><br><span class="line">        print(rs.name)</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/15/54468b6242f06a26acf77699c892b5c6.png" width="80%"/><p>注意：d盘根目录的表示方法 ‘d:/‘</p></li></ul></li><li><p>判断是否是目录/文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(os.path.isdir(<span class="string">&#x27;world&#x27;</span>))  <span class="comment"># 返回值为布尔类型</span></span><br></pre></td></tr></table></figure><p>注意：可以通过递归实现打印某个目录下的全部文件</p></li><li><p>其它的一些操作：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/15/0a903842a4d704834028c39c4e502ccc.png" width="80%"/></li></ol><h2 id="制作模块"><a href="#制作模块" class="headerlink" title="制作模块"></a>制作模块</h2><blockquote><p>制作模块实现返回两个数的和</p></blockquote><ol><li><p>模块内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    返回a与b的和</span></span><br><span class="line"><span class="string">    :param a: 数a</span></span><br><span class="line"><span class="string">    :param b: 数b</span></span><br><span class="line"><span class="string">    :return: a+b</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line">rs = add(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">print(<span class="string">&#x27;测试结果：&#x27;</span>, rs)</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/15/5a8f152d728fd9705c3a4c309ee4d552.png" width="80%"/></li><li><p>导入模块：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> modudelTest  <span class="comment"># 导入自定义模块</span></span><br><span class="line"></span><br><span class="line">rs = modudelTest.add(<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">print(<span class="string">&#x27;测试结果：&#x27;</span>, rs)</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/15/e145411cdbfe538eb0b746f6bc79f8b1.png" width="80%"/><p>注意：导入模块时，其内部的测试代码也会被执行</p></li><li><p>模块内输出魔术变量__name__的值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    返回a与b的和</span></span><br><span class="line"><span class="string">    :param a: 数a</span></span><br><span class="line"><span class="string">    :param b: 数b</span></span><br><span class="line"><span class="string">    :return: a+b</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line">print(<span class="string">&#x27;__name__的值是：&#x27;</span>, __name__)</span><br></pre></td></tr></table></figure><ul><li><p>运行模块文件：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/15/35d65942e1eec0fcee532740f59fa1d2.png" width="80%"/></li><li><p>导入模块：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> modudelTest  <span class="comment"># 导入自定义模块</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/15/bcbe7a2cc2e8e79bcb0689f1ff2fd73c.png" width="80%"/></li></ul><p>注意：可以看出__name__在模块内和程序内的值是不同的，我们可以通过该特征解决2中的问题</p></li><li><p>根据3中性质修改后的模块代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    返回a与b的和</span></span><br><span class="line"><span class="string">    :param a: 数a</span></span><br><span class="line"><span class="string">    :param b: 数b</span></span><br><span class="line"><span class="string">    :return: a+b</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:  <span class="comment"># 判断__name__的值决定是否运行下面的代码 </span></span><br><span class="line">    rs = add(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">    print(<span class="string">&#x27;测试结果：&#x27;</span>, rs)</span><br></pre></td></tr></table></figure></li><li><p>__all__魔术变量：</p><blockquote><p>当模块中定义了__all__的值，使用from…import * 则只能导入all中存在的函数名</p></blockquote><ul><li><p>模板内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">__all__ = [<span class="string">&#x27;add&#x27;</span>, <span class="string">&#x27;diff&#x27;</span>]  <span class="comment"># 魔术变量__all__</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">diff</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    <span class="keyword">return</span> a - b</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printInfo</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;这是输出的信息&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>使用import导入模板：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> modudelTest  <span class="comment"># 导入自定义模块</span></span><br><span class="line"></span><br><span class="line">print(modudelTest.add(<span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line">print(modudelTest.diff(<span class="number">5</span>, <span class="number">4</span>))</span><br><span class="line">print(modudelTest.printInfo())</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/15/765cfc69735ad4117a404d020bdcedbf.png" width="80%"/></li><li><p>使用from…import *导入模板：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> modudelTest <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">print(add(<span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line">print(diff(<span class="number">5</span>, <span class="number">4</span>))</span><br><span class="line">print(printInfo())</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/15/13c175e9f067149ebc5523c0e7b425f8.png" width="80%"/><p>报错原因：模板中定义了__all__的值为 [‘add’, ‘diff’]，当私用from导入全部函数时，只可导入all中定义的函数</p></li></ul></li></ol><h2 id="发布模块"><a href="#发布模块" class="headerlink" title="发布模块"></a>发布模块</h2><blockquote><p>让其他开发者安装后使用</p></blockquote><ol><li><p>新建文件夹并将模块文件移入其中：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/15/78228dae60be78f8d59c8455377f6d4a.png" width="80%"/></li><li><p>文件夹中新建setup.py ,按照注释补充模板内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> distutils.core <span class="keyword">import</span> setup</span><br><span class="line"></span><br><span class="line"><span class="comment"># name 模块名称</span></span><br><span class="line"><span class="comment"># version 版本号</span></span><br><span class="line"><span class="comment"># description 描述</span></span><br><span class="line"><span class="comment"># author 作者</span></span><br><span class="line"><span class="comment"># py_modules 要发布的内容</span></span><br><span class="line">setup(name=<span class="string">&quot;moduelTest&quot;</span>, version=<span class="string">&quot;1.0&quot;</span>, description=<span class="string">&quot;两位数加、减法、输出字符串&quot;</span>,</span><br><span class="line">      author=<span class="string">&quot;XJHui&quot;</span>, py_modules=[<span class="string">&#x27;modudelTest&#x27;</span>])  <span class="comment"># 不需要写文件后缀</span></span><br></pre></td></tr></table></figure></li><li><p>在新建文件夹下执行命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python setup.py build</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/15/23fa0186340b7f77d66b54d8ff0ad33b.png" width="80%"/></li><li><p>生成压缩包：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python setup.py sdist</span><br></pre></td></tr></table></figure></li><li><p>找到压缩包，分享后安装即可使用</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/15/f8be8c72c808a92eb02d04af0e616054.png" width="80%"/></li></ol><h2 id="安装模块"><a href="#安装模块" class="headerlink" title="安装模块"></a>安装模块</h2><ol><li><p>压缩包所在文件夹中执行命令：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install moduelTest<span class="number">-1.0</span>.tar.gz</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/15/8f1264b04332791ef509701d52048f17.png" width="80%"/></li><li><p>使用模块：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> modudelTest <span class="keyword">as</span> mt</span><br><span class="line"></span><br><span class="line">print(mt.add(<span class="number">1</span>, <span class="number">5</span>))</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/09/15/e992b4b302f87ad7cdee17cebf832a1e.png" width="80%"/></li></ol><hr><p>不足之处，欢迎留言，会及时回复，及时更正！</p><p>创作不易，感谢支持！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://plushine.cn/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="python" scheme="https://plushine.cn/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/python/"/>
    
    
      <category term="python基础" scheme="https://plushine.cn/tags/python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Day10 项目-飞机大战游戏</title>
    <link href="https://plushine.cn/16144.html"/>
    <id>https://plushine.cn/16144.html</id>
    <published>2020-08-11T04:00:44.000Z</published>
    <updated>2020-09-18T05:46:56.113Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>本文章最初发布在 <a href="https://plushine.cn">XJHui’s Blog</a>，未经允许，任何人禁止转载！</p><p><font color="red" style="font-weight:700">注意：</font>最新修改版本已发布在 <a href="https://plushine.cn/16144.html">这里</a>，点击前往查看！</p><h1 id="项目需求"><a href="#项目需求" class="headerlink" title="项目需求"></a>项目需求</h1><ol><li><p>存在四个对象：</p><ul><li>我方飞机</li><li>敌方飞机</li><li>我方子弹</li><li>敌方子弹</li></ul></li><li><p>功能：</p><ul><li><p>背景音乐的添加</p></li><li><p>我方飞机可以移动【根据按键来控制的】</p></li><li><p>敌方飞机也可以移动【随机的自动移动】</p></li><li><p>双方飞机都可以发送子弹</p></li></ul></li><li><p>步骤:</p><ul><li>创建一个窗口【搭建界面】</li><li>创建一个我方飞机，根据方向键左右的移动【键盘监测】</li><li>给我方飞机添加发射子弹的功能【按下空格键去发送】</li><li>创建一个敌人飞机</li><li>敌人飞机可以自由的移动</li><li>敌人飞机可以自动的发射子弹</li></ul></li></ol><h1 id="环境安装和调试"><a href="#环境安装和调试" class="headerlink" title="环境安装和调试"></a>环境安装和调试</h1><h2 id="安装pygame"><a href="#安装pygame" class="headerlink" title="安装pygame"></a>安装pygame</h2><blockquote><p>利用SDL（C语言编写）库编写的python游戏库，需要手动安装</p></blockquote><ul><li><p>安装库：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pygame</span><br></pre></td></tr></table></figure><p>安装完成：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/08/11/556f2fbfb4cf08ab32668b85483011cb.png" width="80%"/><p>注意：可能会因为网络原因下载中断导致安装失败，建议科学上网。</p></li><li><p>验证安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip list</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/08/11/2924dd9ddacca13251af6905857b7577.png" width="80%"/></li></ul><h2 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h2><ul><li><p>新建python项目：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/08/11/75446b0a893b2297f8d0c55b72c594e5.png" width="80%"/><p>注意：要勾选红框中的内容，代表使用新的虚拟环境。</p></li><li><p>导入pygame文件：</p><p>点击下方Terminal：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/08/11/eaaedb0d68726fd20273b3cf537d4cd7.png" width="80%"/><p>输入：pip list查看已安装的第三方库，发现pygame未安装</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/08/11/aa5cc82f0f693de57b80757aef5dc311.png" width="80%"/></li><li><p>输入：pip install pygame</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/08/11/9523d9092254d82dcda416c5aa2a0e38.png" width="80%"/><p>如果cmd中安装成功，pycharm中安装失败，可以按照以下步骤操作：</p><ul><li><p>输入：pip show pygame</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/08/11/94c3b11f3107dd599eba753d7997be59.png" width="80%"/></li><li><p>访问该路径，找到下图所示文件夹并复制：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/08/11/cdec911178dd016be138fb06b224d2bb.png" width="80%"/></li><li><p>粘贴到 <code>游戏项目\venv\Lib\site-packages</code> 路径下：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/08/11/180610e214105e2b5dff5bf62cf1dc3a.png" width="80%"/></li></ul></li><li><p>验证安装成功：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/08/11/2f2c19dd872cf2aa3b6e0b80f682a936.png" width="80%"/></li></ul><h2 id="验证库"><a href="#验证库" class="headerlink" title="验证库"></a>验证库</h2><p>运行代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;可以正常使用！&#x27;</span>)</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/08/11/5342483d5fd103694111c022ca85dc91.png" width="80%"/><h1 id="界面配置"><a href="#界面配置" class="headerlink" title="界面配置"></a>界面配置</h1><h2 id="搭建界面"><a href="#搭建界面" class="headerlink" title="搭建界面"></a>搭建界面</h2><ol><li><p>游戏界面：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/08/11/9b6b712d68c2cc8ff1c0ca0e11798bc2.png" width="40%"/></li><li><p>程序代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pygame  <span class="comment"># 导入pygame包</span></span><br><span class="line"><span class="keyword">from</span> pygame.<span class="built_in">locals</span> <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    搭建界面，显示背景图片</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    screen = pygame.display.set_mode((<span class="number">350</span>, <span class="number">500</span>))  <span class="comment"># 设置界面大小</span></span><br><span class="line">    background = pygame.image.load(<span class="string">&quot;./feiji/background.png&quot;</span>)  <span class="comment"># 导入背景图片</span></span><br><span class="line"></span><br><span class="line">    pygame.display.set_caption(<span class="string">&#x27;飞机大作战&#x27;</span>)  <span class="comment"># 界面名称</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        screen.blit(background, (<span class="number">0</span>, <span class="number">0</span>))  <span class="comment"># 在界面中心位置显示背景图片</span></span><br><span class="line"></span><br><span class="line">        pygame.display.update()  <span class="comment"># 刷新界面</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()  <span class="comment"># 调用创建界面的函数</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="键盘监测"><a href="#键盘监测" class="headerlink" title="键盘监测"></a>键盘监测</h2><ol><li><p>程序代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">eventList = pygame.event.get()  <span class="comment"># event.gey()可以监听键盘的输入</span></span><br><span class="line"><span class="keyword">for</span> event <span class="keyword">in</span> eventList:  <span class="comment"># 遍历读取到的信息</span></span><br><span class="line">print(event)</span><br><span class="line"><span class="keyword">if</span> event.<span class="built_in">type</span> == QUIT:  <span class="comment"># 先判断读取到的信息的类型</span></span><br><span class="line">        print(<span class="string">&#x27;退出！&#x27;</span>)</span><br><span class="line">exit()</span><br><span class="line"><span class="keyword">elif</span> event.<span class="built_in">type</span> == KEYDOWN:</span><br><span class="line"><span class="keyword">if</span> event.key == K_a <span class="keyword">or</span> event.key == K_LEFT:  <span class="comment"># 如果是a或者左方向键</span></span><br><span class="line">print(<span class="string">&#x27;left&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> event.key == K_d <span class="keyword">or</span> event.key == K_RIGHT:</span><br><span class="line">print(<span class="string">&#x27;right&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> event.key == K_SPACE:</span><br><span class="line">print(<span class="string">&#x27;space&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/08/11/a81e1fee8fb760199b70d82930d783a5.png" width="80%"/></li></ol><h2 id="背景音乐"><a href="#背景音乐" class="headerlink" title="背景音乐"></a>背景音乐</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pygame.mixer.init()  <span class="comment"># 初始化音乐播放器</span></span><br><span class="line">pygame.mixer.music.load(<span class="string">&quot;./feiji/backgrou</span></span><br><span class="line"><span class="string">pygame.mixer.music.set_volume(0.5)  # 设置背景音乐音量</span></span><br><span class="line"><span class="string">pygame.mixer.music.play(-1)  # 无限循环</span></span><br></pre></td></tr></table></figure><h2 id="玩家样式"><a href="#玩家样式" class="headerlink" title="玩家样式"></a>玩家样式</h2><ol><li><p>程序代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pygame  <span class="comment"># 导入pygame包</span></span><br><span class="line"><span class="keyword">from</span> pygame.<span class="built_in">locals</span> <span class="keyword">import</span> *  <span class="comment"># 导入包中的一些函数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    搭建界面，显示背景图片</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    screen = pygame.display.set_mode((<span class="number">350</span>, <span class="number">500</span>), depth=<span class="number">32</span>)  <span class="comment"># 设置界面大小</span></span><br><span class="line">    background = pygame.image.load(<span class="string">&quot;./feiji/background.png&quot;</span>)  <span class="comment"># 导入背景图片</span></span><br><span class="line">    hero = pygame.image.load(<span class="string">&#x27;./feiji/hero.png&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    pygame.display.set_caption(<span class="string">&#x27;飞机大作战&#x27;</span>)  <span class="comment"># 界面名称</span></span><br><span class="line"></span><br><span class="line">    pygame.mixer.init()  <span class="comment"># 初始化音乐播放器</span></span><br><span class="line">    pygame.mixer.music.load(<span class="string">&quot;./feiji/background.mp3&quot;</span>)  <span class="comment"># 导入背景音乐</span></span><br><span class="line">    pygame.mixer.music.set_volume(<span class="number">0.5</span>)  <span class="comment"># 设置背景音乐音量</span></span><br><span class="line">    pygame.mixer.music.play(<span class="number">-1</span>)  <span class="comment"># 无限循环</span></span><br><span class="line">    x, y = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        screen.blit(background, (<span class="number">0</span>, <span class="number">0</span>))  <span class="comment"># 在界面中心位置显示背景图片</span></span><br><span class="line">        screen.blit(hero, (x, y))  <span class="comment"># 在界面中心位置显示背景图片</span></span><br><span class="line"></span><br><span class="line">        eventList = pygame.event.get()  <span class="comment"># event.gey()可以监听键盘的输入</span></span><br><span class="line">        <span class="keyword">for</span> event <span class="keyword">in</span> eventList:  <span class="comment"># 遍历读取到的信息</span></span><br><span class="line">            print(event)</span><br><span class="line">            <span class="keyword">if</span> event.<span class="built_in">type</span> == QUIT:  <span class="comment"># 先判断读取到的信息的类型</span></span><br><span class="line">                print(<span class="string">&#x27;退出！&#x27;</span>)</span><br><span class="line">                exit()</span><br><span class="line">            <span class="keyword">elif</span> event.<span class="built_in">type</span> == KEYDOWN:</span><br><span class="line">                <span class="keyword">if</span> event.key == K_a <span class="keyword">or</span> event.key == K_LEFT:  <span class="comment"># 如果是a或者左方向键</span></span><br><span class="line">                    print(<span class="string">&#x27;left&#x27;</span>)</span><br><span class="line">                    <span class="keyword">if</span> x &gt; <span class="number">0</span>:</span><br><span class="line">                        x -= <span class="number">5</span></span><br><span class="line">                <span class="keyword">elif</span> event.key == K_d <span class="keyword">or</span> event.key == K_RIGHT:</span><br><span class="line">                    <span class="keyword">if</span> x &lt; <span class="number">310</span>:</span><br><span class="line">                        x += <span class="number">5</span></span><br><span class="line">                    print(<span class="string">&#x27;right&#x27;</span>)</span><br><span class="line">                <span class="keyword">elif</span> event.key == K_SPACE:</span><br><span class="line">                    print(<span class="string">&#x27;space&#x27;</span>)</span><br><span class="line">        pygame.display.update()  <span class="comment"># 刷新界面</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()  <span class="comment"># 调用创建界面的函数</span></span><br></pre></td></tr></table></figure></li><li><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/08/12/cfe775ca59ada975e4838f4bfa5b1647.png" width="80%"/></li></ol><h1 id="面向对象实现"><a href="#面向对象实现" class="headerlink" title="面向对象实现"></a>面向对象实现</h1><ol><li><p>代码：<a href="https://pasteme.cn/48332">在这</a></p></li><li><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/08/12/07260a51dcb4ef327f15f4c1be5aa3ff.png" width="80%"/></li></ol><h1 id="发射子弹"><a href="#发射子弹" class="headerlink" title="发射子弹"></a>发射子弹</h1><ol><li><p>代码：<a href="https://pasteme.cn/48379">在这</a></p></li><li><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/08/12/a9b924ed5ee694961a1bcd3863977240.png" width="80%"/></li></ol><h1 id="显示敌机和子弹"><a href="#显示敌机和子弹" class="headerlink" title="显示敌机和子弹"></a>显示敌机和子弹</h1><ol><li><p>代码：<a href="https://pasteme.cn/50192">在这</a></p></li><li><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/08/27/680e2aca039731988549e89c044e87ce.png" width="80%"/></li></ol><h1 id="代码优化"><a href="#代码优化" class="headerlink" title="代码优化"></a>代码优化</h1><p>可优化项：继承（避免过度冗余）</p><p>代码：<a href="https://pasteme.cn/50203">在这</a></p><hr><p>不足之处，欢迎留言，会及时回复，及时更正！</p><p>创作不易，感谢支持！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://plushine.cn/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="python" scheme="https://plushine.cn/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/python/"/>
    
    
      <category term="python基础" scheme="https://plushine.cn/tags/python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Day09 面向对象基础（下）</title>
    <link href="https://plushine.cn/43473.html"/>
    <id>https://plushine.cn/43473.html</id>
    <published>2020-08-07T01:55:06.000Z</published>
    <updated>2020-09-18T05:46:54.567Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>本文章最初发布在 <a href="https://plushine.cn">XJHui’s Blog</a>，未经允许，任何人禁止转载！</p><p><font color="red" style="font-weight:700">注意：</font>最新修改版本已发布在 <a href="https://plushine.cn/43473.html">这里</a>，点击前往查看！</p><h1 id="私有化属性"><a href="#私有化属性" class="headerlink" title="私有化属性"></a>私有化属性</h1><blockquote><p>有些属性不想让别人随意修改或者防止被意外修改，就要对属性进行私有化</p></blockquote><h2 id="基本概述"><a href="#基本概述" class="headerlink" title="基本概述"></a>基本概述</h2><ol><li><p>定义：</p><p>为了保证属性安全（不能被随意修改），可以将属性定义为私有属性</p></li><li><p>使用场景：</p><ul><li>属性不想被类的外部直接调用</li><li>属性值不想随意被改变</li><li>不想被子类继承</li></ul></li><li><p>语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">       __name = <span class="string">&#x27;张三&#x27;</span>  <span class="comment"># 属性名前加两个下划线将该属性私有化</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="使用私有属性"><a href="#使用私有属性" class="headerlink" title="使用私有属性"></a>使用私有属性</h2><ol><li><p>案例：验证实例属性私有化后在类的外部不可调用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">       <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">           self.name = <span class="string">&#x27;张三&#x27;</span>  <span class="comment"># 实例属性</span></span><br><span class="line">           self.__age = <span class="number">17</span>  <span class="comment"># 私有属性</span></span><br><span class="line">           <span class="keyword">pass</span></span><br><span class="line">   </span><br><span class="line">       <span class="keyword">pass</span></span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">   p1 = Person()</span><br><span class="line">   print(p1.name)  <span class="comment"># 打印实例属性</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/08/07/22cb76f330dc9bb0ffc1e1d5ebd71abb.png" width="80%"/><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(p1.age)  <span class="comment"># 打印私有属性</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/08/07/d293c87bc7b4d126b3464b54187295a3.png" width="80%"/></li><li><p>案例：验证私有化属性可在类的内部调用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">       <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">           self.name = <span class="string">&#x27;张三&#x27;</span></span><br><span class="line">           self.__age = <span class="number">17</span></span><br><span class="line">           <span class="keyword">pass</span></span><br><span class="line">   </span><br><span class="line">       <span class="function"><span class="keyword">def</span> <span class="title">printData</span>(<span class="params">self</span>):</span>  <span class="comment"># 实例方法，打印私有属性age</span></span><br><span class="line">           print(self.__age)</span><br><span class="line">   </span><br><span class="line">       <span class="keyword">pass</span></span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">   p1 = Person()</span><br><span class="line">   p1.printData()  <span class="comment"># 通过调用实例方法，验证在类的内部可直接访问私有属性</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/08/07/e46aff47681438414db36531fde0ad44.png" width="80%"/><p>   总结：将属性私有化后，就不可以在类的外部访问了，但内部使用不受任何影响</p></li><li><p>私有化属性可继承性：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span>  <span class="comment"># 父类</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.__name = <span class="string">&#x27;张三&#x27;</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span>(<span class="params">Person</span>):</span>  <span class="comment"># 子类调用父类</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test</span>(<span class="params">self</span>):</span>  <span class="comment"># 子类中打印父类中的私有属性</span></span><br><span class="line">        print(self.__name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">t1 = Teacher()</span><br><span class="line">t1.test()</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/08/10/a89ad1b07037bfb6523478ba75bf9107.png" width="80%"/><p>总结：父类的私有属性不可被子类继承</p></li></ol><h1 id="私有化方法"><a href="#私有化方法" class="headerlink" title="私有化方法"></a>私有化方法</h1><blockquote><p>有些重要的方法，不允许外部调用或防止子类意外重写，可以把普通方法设置成私有化方法</p></blockquote><h2 id="语法规则"><a href="#语法规则" class="headerlink" title="语法规则"></a>语法规则</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__showInfo</span>(<span class="params">self</span>):</span>  <span class="comment"># 方法名前面加两个下划线</span></span><br><span class="line">        print(<span class="string">&#x27;这是动物类！&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="使用私有化方法"><a href="#使用私有化方法" class="headerlink" title="使用私有化方法"></a>使用私有化方法</h2><ol><li><p>案例：验证私有方法不可被外部直接访问且不可被继承</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__showInfo</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;这是动物类！&#x27;</span>)</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bird</span>(<span class="params">Animal</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">b1 = Bird()</span><br><span class="line">b1.__showInfo()</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/08/07/328e987a44164c53ffb31f1ae5be43cc.png" width="80%"/></li><li><p>案例：私有方法在类的内部可正常访问</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__showInfo</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;这是动物类！&#x27;</span>)</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">printData</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.__showInfo()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bird</span>(<span class="params">Animal</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">b1 = Bird()</span><br><span class="line">b1.printData()</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/08/07/58987f0345a563f320155aa97a4033af.png" width="80%"/></li><li><p>总结：</p><ul><li>私有方法不可被外部访问且不可被继承</li><li>私有方法在类内部可正常访问</li></ul></li></ol><h2 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h2><ol><li>头单下划线：保护类变量（不常用） _name</li><li>头双下划线：私有属性【方法】 __name</li><li>头尾双下划线：魔术方法【系统所有】，不可自定义 _<em>init_</em></li><li>尾单下划线： 避免变量名与关键字冲突时可使用 class_</li></ol><h1 id="Property属性"><a href="#Property属性" class="headerlink" title="Property属性"></a>Property属性</h1><blockquote><p>获取和修改私有属性的值</p></blockquote><p>方法一：调用set方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span>:</span></span><br><span class="line">    __name = <span class="string">&#x27;张三&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getName</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.__name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setName</span>(<span class="params">self, data</span>):</span></span><br><span class="line">        self.__name = data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a1 = Animal()</span><br><span class="line">a1.setName(<span class="string">&#x27;李四&#x27;</span>)  <span class="comment"># 通过调用set方法实现私有属性值的修改</span></span><br><span class="line">print(a1.getName())  <span class="comment"># 调用get方法实现私有属性值的获取</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/08/07/8861c5d6acc8bbfb4289cdc557d0c569.png" width="80%"/><p>方法二：使用Property属性函数</p><blockquote><p>Property属性函数可以通过点语法来获取、修改私有属性的值</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span>:</span></span><br><span class="line">    __name = <span class="string">&#x27;张三&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getName</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.__name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setName</span>(<span class="params">self, data</span>):</span></span><br><span class="line">        self.__name = data</span><br><span class="line"></span><br><span class="line">    name = <span class="built_in">property</span>(getName, setName)  <span class="comment"># property()方法有两个参数，分别为get、set的方法名</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a1 = Animal()</span><br><span class="line">a1.name = <span class="string">&#x27;李四&#x27;</span>  <span class="comment"># 点语法实现值的修改</span></span><br><span class="line">print(a1.name)  <span class="comment"># 点语法实现值的获取</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/08/07/58094986cae0dcf5f7aad2fc6215f052.png" width="80%"/><h1 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h1><blockquote><p>实现整个系统中某个类的实例只创建一次</p></blockquote><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>网站登录（例如淘宝网，只允许一个账号同时浏览）</p><h2 id="创建单例对象"><a href="#创建单例对象" class="headerlink" title="创建单例对象"></a>创建单例对象</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    __instance = <span class="literal">None</span>  <span class="comment"># 私有属性用来存放首次创建的对象</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;对象创建成功！&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span>(<span class="params">cls, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> cls.__instance:  <span class="comment"># 如果 __instance 为None，说明该类还未曾创建过对象</span></span><br><span class="line">            cls.__instance = <span class="built_in">object</span>.__new__(cls)  <span class="comment"># 创建一个对象并用__instance记录下来</span></span><br><span class="line">            <span class="keyword">return</span> cls.__instance</span><br><span class="line">        <span class="keyword">else</span>:  <span class="comment"># 如果__instance不为None代表，该类已经创建过一个对象了，只需要直接返回之前创建的那个变量【__instance】</span></span><br><span class="line">            <span class="keyword">return</span> cls.__instance</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p1 = People()</span><br><span class="line">p2 = People()</span><br><span class="line">print(<span class="built_in">id</span>(p1), <span class="built_in">id</span>(p2))</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/08/07/6e4be1d1e0199551ff1cb0374b776fb8.png" width="80%"/><h1 id="错误与异常处理"><a href="#错误与异常处理" class="headerlink" title="错误与异常处理"></a>错误与异常处理</h1><h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">10</span></span><br><span class="line">print(name)  <span class="comment"># 未定义，运行会报错</span></span><br><span class="line">print(age)  <span class="comment"># 已定义，理论上可以正常显示</span></span><br></pre></td></tr></table></figure><p>上面代码中，未定义name而直接输出，程序会报错如下：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/08/07/8566294caebaaca0ed110e4bfa73b004.png" width="80%"/><p>程序报错导致整个程序结束，因此age不能正常显示。</p><p>有没有办法可以输出错误内容并使程序正常运行？有，异常处理。</p><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><ol><li><p>try…except</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">10</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(name)  <span class="comment"># 准备捕获异常的代码</span></span><br><span class="line"><span class="keyword">except</span> NameError <span class="keyword">as</span> msg:  <span class="comment"># except后跟错误类型，as将结果重定向</span></span><br><span class="line">    print(<span class="string">&#x27;【&#123;&#125;】 异常&#x27;</span>.<span class="built_in">format</span>(msg))</span><br><span class="line">print(age)</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/08/07/5ef885d6523b56f739183d779dd19af4.png" width="80%"/><p>拓展：如果可能有多种错误类型怎么办？</p><ul><li><p>try跟随多个except语句</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">l1 = [<span class="string">&#x27;hello&#x27;</span>, <span class="number">1</span>, <span class="literal">True</span>]</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(l1[<span class="number">10</span>])</span><br><span class="line"><span class="keyword">except</span> NameError <span class="keyword">as</span> msg:</span><br><span class="line">    print(<span class="string">&#x27;【&#123;&#125;】 异常&#x27;</span>.<span class="built_in">format</span>(msg))</span><br><span class="line"><span class="keyword">except</span> IndexError <span class="keyword">as</span> msg:</span><br><span class="line">    print(<span class="string">&#x27;【&#123;&#125;】 异常&#x27;</span>.<span class="built_in">format</span>(msg))</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/08/07/62d720469a44e13377f2606f13490bd8.png" width="80%"/></li><li><p>方法二：捕获所有异常（万能）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">l1 = [<span class="string">&#x27;hello&#x27;</span>, <span class="number">1</span>, <span class="literal">True</span>]</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">   print(l1[<span class="number">10</span>])</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> msg:</span><br><span class="line">   print(msg)</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/08/08/661f0dfa191fe17d64064b57ccb7524a.png" width="80%"/></li></ul></li><li><p>错误栈：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">A</span>(<span class="params">data</span>):</span></span><br><span class="line">    <span class="keyword">return</span> data / <span class="built_in">int</span>(data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">B</span>(<span class="params">data</span>):</span></span><br><span class="line">    <span class="keyword">return</span> A(data) * <span class="number">10</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Func</span>(<span class="params">data</span>):</span></span><br><span class="line">    B(data)</span><br><span class="line"></span><br><span class="line">Func(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>分析：上面出现多个函数嵌套调用，每个函数中都需要写try…except？答案是：不需要</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">A</span>(<span class="params">data</span>):</span></span><br><span class="line">    <span class="keyword">return</span> data / <span class="built_in">int</span>(data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">B</span>(<span class="params">data</span>):</span></span><br><span class="line">    <span class="keyword">return</span> A(data) * <span class="number">10</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Func</span>(<span class="params">data</span>):</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        B(data)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> msg:</span><br><span class="line">        print(msg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Func(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/08/08/5e7a5166c04db054cb2d65fecc094285.png" width="80%"/><p>原理：</p><ul><li>如果在函数中出现错误，则会将该错误返回到上一层，直至最顶层</li><li>如果错误出现在最顶层，则程序会结束</li></ul><p>总结：合适位置添加try…except可以极大的减少代码量</p></li><li><p>else：</p><blockquote><p>当try中未出现错误，会执行else语句</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Func</span>(<span class="params">data</span>):</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        print(<span class="built_in">int</span>(<span class="number">10</span> / <span class="built_in">int</span>(data)))  <span class="comment"># try里面是可以输出内容的</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> msg:</span><br><span class="line">        print(msg)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">&#x27;程序无异常！&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Func(<span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/08/08/0bf4b5a4ac536b948daaa051f0feac4b.png" width="80%"/></li><li><p>finally：</p><blockquote><p>无论是否报错都会执行的语句</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Func</span>(<span class="params">data</span>):</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        print(<span class="built_in">int</span>(<span class="number">10</span> / <span class="built_in">int</span>(data)))  <span class="comment"># try里面是可以输出内容的</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> msg:</span><br><span class="line">        print(msg)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        print(<span class="string">&#x27;程序运行结束！&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Func(<span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/08/08/fceb7a0511be21bbdf61cad9ddd297e5.png" width="80%"/><p>注意：虽然finally在这里显得很多余，但用其释放资源很方便。</p></li></ol><h2 id="自定义错误"><a href="#自定义错误" class="headerlink" title="自定义错误"></a>自定义错误</h2><blockquote><p>直接或间接继承Exception类或者Error类</p></blockquote><p>案例：当字符长度超过5时，抛出异常</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LenError</span>(<span class="params">Exception</span>):</span>  <span class="comment"># 继承Exception类</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;您的字符长度超过所限制的5个字符！&#x27;</span>  <span class="comment"># 自定义异常，msg内容来自__str__方法</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">str</span> = <span class="string">&#x27;hello python!&#x27;</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(<span class="built_in">str</span>) &gt; <span class="number">5</span>:</span><br><span class="line">        <span class="keyword">raise</span> LenError  <span class="comment"># raise用来抛出异常，不可用return（程序会停止运行）</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="built_in">str</span>)</span><br><span class="line"><span class="keyword">except</span> LenError <span class="keyword">as</span> msg:</span><br><span class="line">    print(msg)</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/08/08/e27b62d1c81514811854d856a7cba5a4.png" width="80%"/><h1 id="动态属性和方法"><a href="#动态属性和方法" class="headerlink" title="动态属性和方法"></a>动态属性和方法</h1><h2 id="动态属性"><a href="#动态属性" class="headerlink" title="动态属性"></a>动态属性</h2><blockquote><p>支持实例属性和类属性的添加</p></blockquote><ol><li><p>添加实例属性：</p><blockquote><p>通过实例对象添加</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age</span>):</span></span><br><span class="line">        self.name = name  <span class="comment"># 初始方法定义实例变量</span></span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;【&#123;&#125;】今年【&#123;&#125;】岁了。&#x27;</span>.<span class="built_in">format</span>(self.name, self.age)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">zyh = Student(<span class="string">&#x27;张艳华&#x27;</span>, <span class="number">20</span>)</span><br><span class="line">zyh.weight = <span class="string">&#x27;101&#x27;</span>  <span class="comment"># 动态添加实例属性</span></span><br><span class="line">print(zyh.weight)</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/08/10/4ab6f0bcf7efb2d5b4b104ef25715352.png" width="80%"/><p>动态添加的属性仅对该实例对象有效，验证：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age</span>):</span></span><br><span class="line">        self.name = name  <span class="comment"># 初始方法定义实例变量</span></span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;【&#123;&#125;】今年【&#123;&#125;】岁了。&#x27;</span>.<span class="built_in">format</span>(self.name, self.age)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">zyh = Student(<span class="string">&#x27;张艳华&#x27;</span>, <span class="number">20</span>)</span><br><span class="line">zyh.weight = <span class="string">&#x27;101&#x27;</span>  <span class="comment"># 动态添加实例属性</span></span><br><span class="line">wh = Student(<span class="string">&#x27;王浩&#x27;</span>, <span class="number">19</span>)</span><br><span class="line">print(wh.weight)</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/08/10/1c93869bd52967ce79edfa9306553008.png" width="80%"/></li><li><p>添加类属性：</p><blockquote><p>通过类对象添加</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age</span>):</span></span><br><span class="line">        self.name = name  <span class="comment"># 初始方法定义实例变量</span></span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">zyh = Student(<span class="string">&#x27;张艳华&#x27;</span>, <span class="number">20</span>)</span><br><span class="line">Student.weight = <span class="number">101</span>  <span class="comment"># 动态添加类属性</span></span><br><span class="line">print(zyh.weight)</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/08/10/15e9fe1471aa2b3679e145cd2392d4fa.png" width="80%"/></li></ol><h2 id="动态方法"><a href="#动态方法" class="headerlink" title="动态方法"></a>动态方法</h2><blockquote><p>原理是把一个外部函数通过转换（types.MethodType()）使其成为实例方法</p></blockquote><ol><li><p>添加实例方法：</p><blockquote><p>通过实例对象添加，仅对该实例对象有效</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> types  <span class="comment"># 导入用来转换的types包</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age</span>):</span></span><br><span class="line">        self.name = name  <span class="comment"># 初始方法定义实例变量</span></span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">self</span>):</span>  <span class="comment"># 自定义的一个外部函数，self不能忘记</span></span><br><span class="line">    print(<span class="string">&#x27;【&#123;&#125;】今年【&#123;&#125;】岁了！&#x27;</span>.<span class="built_in">format</span>(self.name, self.age))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">zyh = Student(<span class="string">&#x27;张艳华&#x27;</span>, <span class="number">20</span>)</span><br><span class="line">zyh.printData = types.MethodType(func, zyh)  <span class="comment"># 实例对象.方法名=types.MethodType(外部函数名, 实例对象)</span></span><br><span class="line">zyh.printData()  <span class="comment"># 实例对象.方法名（调用定义的实例方法）</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/08/10/5e901614e3996f17d3c421e0e688e832.png" width="80%"/></li><li><p>添加类方法和静态方法：</p><blockquote><p>通过类对象实现</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age</span>):</span></span><br><span class="line">        self.name = name  <span class="comment"># 初始方法定义实例变量</span></span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@classmethod  # 定义的外部方法，要满足类方法的条件：1、注明@classmethod 2、第一个参数默认是cls</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">cls</span>):</span></span><br><span class="line">    print(<span class="string">&#x27;这是一个类方法！&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Student.testFunc = func  <span class="comment"># 动态添加类方法（通过类对象实现的），（类对象.方法名=外部方法名）</span></span><br><span class="line">zyh = Student(<span class="string">&#x27;张艳华&#x27;</span>, <span class="number">20</span>)</span><br><span class="line">zyh.testFunc()  <span class="comment"># 验证类方法是否添加成功（实例对象调用类方法）</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/08/10/9e96cf30b70a1fd3ba08f3746d2b0692.png" width="80%"/><p>注意：</p><ul><li>静态方法同理（外部方法，要满足静态方法的条件）</li><li>类、静态方法不需要导入types包</li></ul></li></ol><h1 id="slots"><a href="#slots" class="headerlink" title="_slots_"></a>_<em>slots_</em></h1><h2 id="限制属性"><a href="#限制属性" class="headerlink" title="限制属性"></a>限制属性</h2><ol><li><p>添加属性（未使用slots方法）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">xm = Student()</span><br><span class="line">xm.name = <span class="string">&#x27;小明&#x27;</span>  <span class="comment"># 动态添加实例属性</span></span><br><span class="line">xm.age = <span class="number">19</span></span><br><span class="line">print(xm.name, xm.age)</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/08/10/ad4f881b87379808e4c136d5c9b2323d.png" width="80%"/></li><li><p>限制属性添加（使用slots方法）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>:</span>  <span class="comment"># 使用slots方法限制属性的添加，字符串类型的属性名放入元组中，逗号分隔</span></span><br><span class="line">    __slots__ = (<span class="string">&#x27;name&#x27;</span>)  <span class="comment"># 仅允许添加一个名为name的属性</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">xm = Student()</span><br><span class="line">xm.name = <span class="string">&#x27;小明&#x27;</span>  <span class="comment"># 动态添加实例属性</span></span><br><span class="line">xm.age = <span class="number">19</span></span><br><span class="line">print(xm.name, xm.age)</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/08/10/3a2e5705a437a5c716e230804c5daab8.png" width="80%"/></li></ol><h2 id="节省内存"><a href="#节省内存" class="headerlink" title="节省内存"></a>节省内存</h2><ol><li><p>dict存放所有属性（消耗内存）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">xm = Student()</span><br><span class="line">xm.name = <span class="string">&#x27;小明&#x27;</span>  <span class="comment"># 动态添加实例属性</span></span><br><span class="line">xm.age = <span class="number">19</span></span><br><span class="line">print(xm.__dict__)  <span class="comment"># dict默认存放所有属性及其值</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/08/10/3ff75b74793b0d55b35b7d42666ab1f4.png" width="80%"/></li><li><p>使用slots后dict会被删除（节省内存）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>:</span></span><br><span class="line">    __slots__ = (<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;age&#x27;</span>)</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">xm = Student()</span><br><span class="line">xm.name = <span class="string">&#x27;小明&#x27;</span>  <span class="comment"># 动态添加实例属性</span></span><br><span class="line">xm.age = <span class="number">19</span></span><br><span class="line">print(xm.__dict__)  <span class="comment"># dict默认存放所有属性及其值</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/08/10/2d16c826e1ce11620bcccd56f325b1c3.png" width="80%"/></li></ol><h2 id="继承关系"><a href="#继承关系" class="headerlink" title="继承关系"></a>继承关系</h2><p>案例1：父类限制属性（name，age），子类不限制，验证slots的限制不可继承</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>:</span>  <span class="comment"># 父类</span></span><br><span class="line">    __slots__ = (<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;age&#x27;</span>)  <span class="comment"># 限制属性</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Computer</span>(<span class="params">Student</span>):</span>  <span class="comment"># 子类继承Student类</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">lm = Computer()</span><br><span class="line">lm.sex = <span class="string">&#x27;男&#x27;</span>  <span class="comment"># 动态定义实例属性（该属性不在父类slots限制中）</span></span><br><span class="line">print(lm.sex)  <span class="comment"># 输出实例属性的内容</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/08/10/3e1fcab1e7d96123ce3a35f4525f8591.png" width="80%"/><p>案例2：父类限制属性（name，age），子类限制属性（sex），验证slots的限制为其并集（父类+子类）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>:</span>  <span class="comment"># 父类</span></span><br><span class="line">    __slots__ = (<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;age&#x27;</span>)  <span class="comment"># 父类限制属性</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Computer</span>(<span class="params">Student</span>):</span>  <span class="comment"># 子类继承Student类</span></span><br><span class="line">    __slots__ = (<span class="string">&#x27;sex&#x27;</span>)  <span class="comment"># 子类限制属性</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">lm = Computer()</span><br><span class="line">lm.name = <span class="string">&#x27;李明&#x27;</span>  <span class="comment"># 父类限制</span></span><br><span class="line">lm.age = <span class="number">18</span>  <span class="comment"># 父类限制</span></span><br><span class="line">lm.sex = <span class="string">&#x27;男&#x27;</span>  <span class="comment"># 子类限制</span></span><br><span class="line">print(<span class="string">&#x27;我叫【&#123;&#125;】，是个【&#123;&#125;】孩子，今年【&#123;&#125;】岁了！&#x27;</span>.<span class="built_in">format</span>(lm.name, lm.sex, lm.age))  <span class="comment"># 输出实例属性的内容</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/08/10/6db87614affae9b29dd0de029249f6e1.png" width="80%"/><p>总结：</p><ul><li>若子类无slots方法，则不继承slots</li><li>若子类有slots方法，slots的限制为其并集（父类+子类）</li></ul><hr><p>不足之处，欢迎留言，会及时回复，及时更正！</p><p>创作不易，感谢支持！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://plushine.cn/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="python" scheme="https://plushine.cn/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/python/"/>
    
    
      <category term="python基础" scheme="https://plushine.cn/tags/python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Day08 面向对象基础（中）</title>
    <link href="https://plushine.cn/26896.html"/>
    <id>https://plushine.cn/26896.html</id>
    <published>2020-07-31T12:42:31.000Z</published>
    <updated>2020-09-18T05:46:52.954Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>本文章最初发布在 <a href="https://plushine.cn">XJHui’s Blog</a>，未经允许，任何人禁止转载！</p><p><font color="red" style="font-weight:700">注意：</font>最新修改版本已发布在 <a href="https://plushine.cn/26896.html">这里</a>，点击前往查看！</p><h1 id="析构方法"><a href="#析构方法" class="headerlink" title="析构方法"></a>析构方法</h1><blockquote><p>当一个对象被删除或者被销毁时，python解释器默认会调用一个_<em>del_</em>()方法也叫析构方法。</p></blockquote><h2 id="方法特点"><a href="#方法特点" class="headerlink" title="方法特点"></a>方法特点</h2><ol><li>_<em>del_</em>()方法是一个魔术方法</li><li>程序运行结束会释放所有内存，就是通过调用del方法实现的</li><li>在程序中删除一个对象也会调用del方法</li></ol><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><ol><li><p>情况一：程序结束，解释器自动调用del方法释放内存：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        print(<span class="string">&#x27;对象【&#123;&#125;】已经创建！&#x27;</span>.<span class="built_in">format</span>(self.name))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;正在回收内存，对象【&#123;&#125;】已被删除！&#x27;</span>.<span class="built_in">format</span>(self.name))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cat = Animal(<span class="string">&#x27;小花猫&#x27;</span>)</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/08/01/497829b9265a5862592d914bdf5942e0.png" width="80%"/></li><li><p>情况二：程序中存在主动删除对象的内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        print(<span class="string">&#x27;对象【&#123;&#125;】已经创建！&#x27;</span>.<span class="built_in">format</span>(self.name))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;正在回收内存，对象【&#123;&#125;】已被删除！&#x27;</span>.<span class="built_in">format</span>(self.name))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cat = Animal(<span class="string">&#x27;小花猫&#x27;</span>)</span><br><span class="line"><span class="keyword">del</span> cat</span><br><span class="line">inPut = <span class="built_in">input</span>(<span class="string">&#x27;程序等待中...&#x27;</span>)  <span class="comment"># 让程序一直运行避免与1相矛盾</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/08/01/ca9329d02fa552672b9e7bb8bb7aec4f.png" width="80%"/></li></ol><h1 id="OOP三大特征"><a href="#OOP三大特征" class="headerlink" title="OOP三大特征"></a>OOP三大特征</h1><ul><li><p>封装</p></li><li><p>继承</p></li><li><p>多态</p></li></ul><h1 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h1><ul><li><p>定义：把内容封装到某个地方，便于以后使用</p></li><li><p>使用：通过初始化方法（init）将内容封装到对象中，然后通过对象直接获取或通过self获取</p></li></ul><h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><h2 id="单继承"><a href="#单继承" class="headerlink" title="单继承"></a>单继承</h2><ol><li><p>定义：子类可以继承父类的内容【属性和方法】（父类有的子类都有，但子类有的父类不一定有）</p></li><li><p>案例：创建两个对象，其方法分别如下：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/08/01/08b8d8456bf30a6d179a5655c58e4865.png" width="100%"/><p>思路1：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span>:</span></span><br><span class="line">    喵喵叫</span><br><span class="line">    吃</span><br><span class="line">    喝</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>:</span></span><br><span class="line">    汪汪叫</span><br><span class="line">    吃</span><br><span class="line">    喝</span><br><span class="line">cat = Cat()</span><br><span class="line">dog = Dog()</span><br></pre></td></tr></table></figure><p>思路2：共有方法放在同一个类中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span>:</span></span><br><span class="line">    吃</span><br><span class="line">    喝</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span>(<span class="params">Animal</span>):</span>  <span class="comment"># 继承动物类</span></span><br><span class="line">    喵喵叫</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>(<span class="params">Animal</span>):</span>  <span class="comment"># 继承动物类</span></span><br><span class="line">    汪汪叫</span><br><span class="line">cat = Cat()</span><br><span class="line">dog = Dog()</span><br></pre></td></tr></table></figure><p>注意：比较上面两种思路，2nd代码更简洁，这也是继承的优点</p></li><li><p>单继承子类语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 子类名(<span class="params">父类名</span>):</span>  <span class="comment"># 子类继承父类</span></span><br><span class="line">    代码块</span><br></pre></td></tr></table></figure></li><li><p>总结：</p><ul><li>将多个类中共有的方法、属性提取到【父类】中，而特有的方法在各自类【子类】中。</li><li>继承可以极大地提高代码效率，避免代码过度冗余</li></ul></li></ol><h2 id="多继承"><a href="#多继承" class="headerlink" title="多继承"></a>多继承</h2><blockquote><p>继承单个父类称为单继承，继承多个父类就是多继承</p></blockquote><ol><li><p>多继承子类语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 子类名(<span class="params">父类<span class="number">1</span>名, 父类<span class="number">2</span>名 ...</span>):</span>  <span class="comment"># 子类继承父类，多个父类之间使用逗号分隔</span></span><br><span class="line">    代码块</span><br></pre></td></tr></table></figure></li><li><p>案例：创建孙悟空【类】其继承自神仙【类】和猴子【类】，并为其实例化一个对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shenxian</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fly</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;神仙会飞！&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Monky</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">chitao</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;猴子喜欢吃桃！&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sunwukong</span>(<span class="params">Shenxian, Monky</span>):</span>  <span class="comment"># 多继承中多个父类之间使用逗号分隔</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        print(<span class="string">&#x27;创建【&#123;&#125;】对象成功！&#x27;</span>.<span class="built_in">format</span>(self.name))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">swk = Sunwukong(<span class="string">&#x27;孙悟空&#x27;</span>)</span><br><span class="line">swk.fly()  <span class="comment"># 调用Shenxian【类】的方法</span></span><br><span class="line">swk.chitao()  <span class="comment"># 调用Monky【类】的方法</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/08/02/f6ff5b208268a833d3a3d1c9faca2763.png" width="80%"/></li><li><p>调试时输出异常：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/08/02/cbf9038acf4b14ede9f60977301faa37.png" width="80%"/><p>本以为是python版本的原因才会与老师的输出结果不同，直到百度到下面这句话：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/08/02/30d332a73b87f8420b152d591d5b5906.png" width="80%"/><p>再看一眼我代码：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/08/05/ab370025b6425d065607d8c9f2dbb75b.png" width="80%"/><p>总结，感谢 <a href="https://www.cnblogs.com/rayshaw/p/8531506.html">rayshaw13</a>：</p><ul><li>当方法中已经使用了print，调用时不要再次使用，否则会多输出一个None</li><li>若必须使用print，那也可以在方法中使用return来避免多输出内容</li></ul></li></ol><h2 id="同名方法"><a href="#同名方法" class="headerlink" title="同名方法"></a>同名方法</h2><blockquote><p>当多个父类中存在相同的方法的时候，应该调用哪一个？</p></blockquote><ol><li><p>案例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;D.eat()&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>(<span class="params">D</span>):</span>  <span class="comment"># C【类】继承D【类】</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;C.eat()&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>(<span class="params">D</span>):</span>  <span class="comment"># B【类】继承D【类】</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>(<span class="params">B, C</span>):</span>  <span class="comment"># A【类】继承B【类】、C【类】</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = A()  <span class="comment"># 创建A类的实例对象</span></span><br><span class="line">a.eat()  <span class="comment"># 调用a的eat方法，判断该eat方法属于谁</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/08/02/759acbee66670edb7fcb1eee0a84e8d5.png" width="80%"/><p>根据上例可知，其符合【广度优先遍历】的原则：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/08/05/f979788d0f6461cb6336506fea07f49c.png" width="80%"/></li><li><p>__mro__方法：</p><blockquote><p>查看类的继承顺序（优先级）</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(A.mro())  <span class="comment"># 注意是A.mro()【A类】 而不是实例对象a</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/08/02/20a1de8ce737a07ac810c55edf135612.png" width="80%"/><p>总结：将此顺序与1st中的【最终顺序】比较可知是一致的。</p></li></ol><h2 id="继承的传递"><a href="#继承的传递" class="headerlink" title="继承的传递"></a>继承的传递</h2><blockquote><p>子类继承父类，孙子类继承子类，孙子类可调用【父类】的方法</p></blockquote><ol><li><p>案例：判断下面程序能否正常输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;D.eat()&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>(<span class="params">D</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>(<span class="params">C</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">a = A()</span><br><span class="line">a.eat()</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/08/02/3609eca54a894afc6c7bfbc3b8a55221.png" width="80%"/></li><li><p>使用mro方法查看类的继承顺序：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(A.mro())</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/08/02/a27183e665588de9e2bd9e67dfddfaec.png" width="80%"/></li><li><p>总结：可以使用任意祖先【类】的方法。</p></li></ol><h2 id="重写方法"><a href="#重写方法" class="headerlink" title="重写方法"></a>重写方法</h2><ol><li><p>是什么？</p><p>在子类中有一个和父类相同名字的方法，子类中的方法会覆盖掉父类中的方法。</p></li><li><p>为什么？</p><p>父类的方法已经不能满足子类的需要，那么子类可以重写父类或者完善父类中的方法。</p></li><li><p>案例1：创建Keji【类】继承自父类Dog【类】，并重写父类Bark方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>:</span>  <span class="comment"># 父类Dog【类】</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Bark</span>(<span class="params">self</span>):</span>  <span class="comment"># 父类方法</span></span><br><span class="line">        print(<span class="string">&#x27;汪汪汪...&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Keji</span>(<span class="params">Dog</span>):</span>  <span class="comment"># 子类Keji【类】，继承父类Dog【类】</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Bark</span>(<span class="params">self</span>):</span>  <span class="comment"># 重写父类方法</span></span><br><span class="line">        print(<span class="string">&#x27;嗷嗷嗷...&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">kj = Keji()  <span class="comment"># 创建实例对象</span></span><br><span class="line">kj.Bark()  <span class="comment"># 调用之类中法重写后的Bark方法</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/08/02/4d88cc44acf23ab371dc5a53b42cdd3b.png" width="80%"/></li><li><p>案例2：在父类方法基础上进行修改，以在init中添加实例属性为例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, color</span>):</span>  <span class="comment"># 父类方法中原有2个参数 </span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.color = color</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Keji</span>(<span class="params">Dog</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, color, height</span>):</span>  <span class="comment"># 在父类方法的基础上填加1个新的参数</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(name, color)  <span class="comment"># 自动找到父类中的init方法，法1</span></span><br><span class="line">        <span class="comment"># 法2：Dog.__init__(self, name, color)  注意self不能省略</span></span><br><span class="line">        self.height = height</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;【&#123;&#125;】 的颜色是：&#123;&#125; 身高是：&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(self.name, self.color, self.height)</span><br><span class="line"></span><br><span class="line">kj = Keji(<span class="string">&#x27;路由器&#x27;</span>, <span class="string">&#x27;black&#x27;</span>, <span class="string">&#x27;10&#x27;</span>)</span><br><span class="line">print(kj)</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/08/02/6e04b544f430645afae29dffcc73148f.png" width="80%"/></li><li><p>案例3：在父类方法基础上进行修改，以普通方法为例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>:</span>  <span class="comment"># 父类Dog【类】</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, color</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.color = color</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Bark</span>(<span class="params">self</span>):</span>  <span class="comment"># 父类方法</span></span><br><span class="line">        print(<span class="string">&#x27;汪汪汪...&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Keji</span>(<span class="params">Dog</span>):</span>  <span class="comment"># 子类Keji【类】，继承父类Dog【类】</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, color, height</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(name, color)</span><br><span class="line">        <span class="comment"># Dog.__init__(self, name, color)</span></span><br><span class="line">        self.height = height</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;【&#123;&#125;】 的颜色是：&#123;&#125; 身高是：&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(self.name, self.color, self.height)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Bark</span>(<span class="params">self</span>):</span>  <span class="comment"># 重写父类方法</span></span><br><span class="line">        <span class="built_in">super</span>().Bark()</span><br><span class="line">        print(<span class="string">&#x27;嗷嗷嗷...&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">kj = Keji(<span class="string">&#x27;路由器&#x27;</span>, <span class="string">&#x27;black&#x27;</span>, <span class="string">&#x27;10&#x27;</span>)  <span class="comment"># 创建实例对象</span></span><br><span class="line">print(kj)</span><br><span class="line">kj.Bark()</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/08/02/b00c529d04acf76a27cd44cebea81a91.png" width="80%"/></li></ol><h1 id="类、实例属性"><a href="#类、实例属性" class="headerlink" title="类、实例属性"></a>类、实例属性</h1><h2 id="创建和使用"><a href="#创建和使用" class="headerlink" title="创建和使用"></a>创建和使用</h2><ol><li><p>类属性：就是类对象所拥有的属性，它被所有类对象的实例对象所共有，类对象和实例对象均可以访问</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span>:</span></span><br><span class="line">    name = <span class="string">&#x27;路由&#x27;</span>  <span class="comment"># 类属性</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">test = Test()  <span class="comment"># 创建实例变量</span></span><br><span class="line">print(test.name)  <span class="comment"># 通过实例变量访问类属性</span></span><br><span class="line">print(Test.name)  <span class="comment"># 通过类变量访问类属性</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/08/05/306db1a8bb12113eb21ce339ff0e152f.png" width="80%"/></li><li><p>实例属性：实例对象所拥有的属性，只能通过实例对象访问</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span>:</span></span><br><span class="line">    name = <span class="string">&#x27;路由&#x27;</span>  <span class="comment"># 类属性</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, age</span>):</span>  <span class="comment"># 使用init方法定义实例属性</span></span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">test = Test(<span class="number">10</span>)  <span class="comment"># 创建实例变量</span></span><br><span class="line">print(test.age)  <span class="comment"># 通过实例变量访问实例属性</span></span><br><span class="line">print(Test.age)  <span class="comment"># 通过类变量访问实例属性（错误）</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/08/05/abc9aa05072272230522243627dba9d2.png" width="80%"/></li></ol><h2 id="属性的修改"><a href="#属性的修改" class="headerlink" title="属性的修改"></a>属性的修改</h2><ol><li><p>类属性的修改：</p><ul><li><p>错误方法：通过实例对象修改类属性</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span>:</span></span><br><span class="line">    name = <span class="string">&#x27;路由&#x27;</span>  <span class="comment"># 类属性</span></span><br><span class="line"></span><br><span class="line">test = Test()  <span class="comment"># 创建实例对象</span></span><br><span class="line">print(test.name)  <span class="comment"># 打印类属性</span></span><br><span class="line">test.name = <span class="string">&#x27;湘湘&#x27;</span>  <span class="comment"># 通过实例对象修改类属性</span></span><br><span class="line">print(Test.name)  <span class="comment"># 再次打印类属性</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/08/05/fb644c0737266cf86d9743b88d6398e5.png" width="80%"/><p>注意：根据运行结果可知，通过实例对象修改类属性是行不通的，上面的做法只是新创建了一个实例属性。</p></li><li><p>正确方法：通过类对象修改类属性</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span>:</span></span><br><span class="line">    name = <span class="string">&#x27;路由&#x27;</span>  <span class="comment"># 类属性</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">test = Test()  <span class="comment"># 创建实例对象</span></span><br><span class="line">print(test.name)  <span class="comment"># 打印类属性</span></span><br><span class="line">Test.name = <span class="string">&#x27;湘湘&#x27;</span>  <span class="comment"># 通过实例对象修改类属性的值</span></span><br><span class="line">print(Test.name)  <span class="comment"># 再次打印类属性</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/08/05/6c64cd814becd7adc41b551f01c5cf39.png" width="80%"/></li><li><p>总结：实例对象只拥有类属性的使用权，而修改权归类对象所有。</p></li></ul></li><li><p>实例属性的修改：</p><blockquote><p>实例属性只能通过实例对象访问，修改肯定也只能通过实例对象修改</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span>:</span></span><br><span class="line">    name = <span class="string">&#x27;路由&#x27;</span>  <span class="comment"># 类属性</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, age</span>):</span></span><br><span class="line">        self.age = age  <span class="comment"># 实例属性</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">test = Test(<span class="number">2</span>)  <span class="comment"># 创建实例对象</span></span><br><span class="line">print(test.age)  <span class="comment"># 打印实例属性</span></span><br><span class="line">test.age = <span class="number">2.5</span></span><br><span class="line">print(test.age)</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/08/05/c1fc2d2d2f099a67b51545f5dacd305e.png" width="80%"/></li></ol><h1 id="类、静态方法"><a href="#类、静态方法" class="headerlink" title="类、静态方法"></a>类、静态方法</h1><h2 id="类方法"><a href="#类方法" class="headerlink" title="类方法"></a>类方法</h2><ol><li><p>区别实例方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span>:</span></span><br><span class="line">    name = <span class="string">&#x27;湘湘&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 实例方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">printData</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 实例方法</span></span><br><span class="line"><span class="meta">    @classmethod  # 区别1：类方法前面需要添加@classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">printData</span>(<span class="params">cls</span>):</span>  <span class="comment"># 区别2：类方法，默认参数为cls（可修改但不可省略）</span></span><br><span class="line">        <span class="keyword">return</span> cls.name</span><br></pre></td></tr></table></figure></li><li><p>创建、使用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span>:</span></span><br><span class="line">    name = <span class="string">&#x27;湘湘&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">printData</span>(<span class="params">cls</span>):</span></span><br><span class="line">        <span class="keyword">return</span> cls.name  <span class="comment"># 返回类属性</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(People.printData())  <span class="comment"># 通过类对象调用类方法</span></span><br><span class="line">p1 = People()</span><br><span class="line">print(p1.printData())  <span class="comment"># 通过实例对象调用类方法</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/08/05/41ba8c6d5927413933082ba7b9b965b2.png" width="80%"/></li><li><p>使用类方法修改类属性：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span>:</span></span><br><span class="line">    name = <span class="string">&#x27;湘湘&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">printData</span>(<span class="params">cls</span>):</span></span><br><span class="line">        <span class="keyword">return</span> cls.name  <span class="comment"># 返回类属性</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">changName</span>(<span class="params">cls, data</span>):</span></span><br><span class="line">        cls.name = data  <span class="comment"># 通过类对象修改类属性</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(People.printData())</span><br><span class="line">People.changName(<span class="string">&#x27;路由&#x27;</span>)</span><br><span class="line">print(People.printData())</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/08/05/f80f039b72b2f5b2cc19a2b8e7ec8083.png" width="80%"/></li></ol><h2 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h2><ol><li><p>区别实例方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span>:</span></span><br><span class="line">    name = <span class="string">&#x27;湘湘&#x27;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 实例方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">printData</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 静态方法</span></span><br><span class="line"><span class="meta">    @staticmethod  # 区别1：静态方法前面需要添加@staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getdata</span>():</span>  <span class="comment"># 区别2：静态方法无默认参数</span></span><br><span class="line">        <span class="keyword">return</span> People.name</span><br></pre></td></tr></table></figure></li><li><p>创建、使用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span>:</span></span><br><span class="line">    name = <span class="string">&#x27;湘湘&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getdata</span>():</span></span><br><span class="line">        <span class="keyword">return</span> People.name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(People.getdata())  <span class="comment"># 通过类对象访问静态变量</span></span><br><span class="line">p1 = People()</span><br><span class="line">print(p1.getdata())  <span class="comment"># 通过实例对象访问静态变量</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/08/05/d0b17a6a4b92db688e662144d3b668c3.png" width="80%"/><p>注意：一般情况下是不会通过实例对象去调用静态方法的。</p></li><li><p>为什么使用静态方法？</p><ul><li>主要用来存放逻辑性的代码，和类以及实例对象没有交互</li><li>因为可以直接通过类对象调用，从而避免了因创建实例对象而消耗的内存和空间</li></ul></li><li><p>案例：返回系统时间</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time  <span class="comment"># 导入第三方的包</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Time</span>:</span>  <span class="comment"># 时间类</span></span><br><span class="line"><span class="meta">    @staticmethod  # 返回当前时间的静态方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getTime</span>():</span></span><br><span class="line">        <span class="keyword">return</span> time.strftime(<span class="string">&#x27;%H:%M:%S&#x27;</span>, time.localtime())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(Time.getTime())  <span class="comment"># 通过类变量调用静态方法</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/08/05/46150628921e2b5c9c0bf9c6bef6dee3.png" width="80%"/><h2 id="实例、类、静态方法"><a href="#实例、类、静态方法" class="headerlink" title="实例、类、静态方法"></a>实例、类、静态方法</h2><ul><li>实例方法：第一个参数是self（默认，可修改但不可省略），通过self可引用类属性或实例属性。若同时存在类属性和实例属性，实例属性优先级更高。</li><li>类方法：第一个参数是cls（默认，可修改但不可省略），通过cls可引用类对象的属性和方法。</li><li>静态方法：无默认参数，使用时必须通过类对象调用。</li></ul></li></ol><h1 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><ol><li><p>含义：</p><p>定义时的类型和使用时的类型不一样，此时就成为多态【同一种行为对于不同的子类对象有不同的行为表现】。</p></li><li><p>必须要遵守的条件：</p><ul><li>继承：多态必须发生在子类和父类之间</li><li>重写：子类重写父类的方法</li></ul></li></ol><h2 id="使用方法-1"><a href="#使用方法-1" class="headerlink" title="使用方法"></a>使用方法</h2><ol><li><p>案例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">showData</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;这是个动物类！&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Duck</span>(<span class="params">Animal</span>):</span>  <span class="comment"># 有继承</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">showData</span>(<span class="params">self</span>):</span>  <span class="comment"># 有重写</span></span><br><span class="line">        print(<span class="string">&#x27;这是个鸭子类！&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">duck = Duck()</span><br><span class="line">duck.showData()</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/08/06/6ace88bbe10286f34e4e7d4995c98537.png" width="80%"/><p>总结：有继承和重写就是多态【个人看法】</p></li><li><p>优点：</p><ul><li>增加程序的灵活性</li><li>增加程序的拓展性</li></ul></li></ol><h2 id="鸭子类型"><a href="#鸭子类型" class="headerlink" title="鸭子类型"></a>鸭子类型</h2><blockquote><p>当看到一只鸟，走起路来像鸭子，游起泳来像鸭子，叫起来像鸭子，那么就可以把这只鸟承做鸭子。</p></blockquote><ol><li><p>案例（本案例与多态无关）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span>:</span>  <span class="comment"># 动物类</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">showData</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;这是个动物类！&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span>:</span>  <span class="comment"># 人类</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">showData</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;这是个人类！&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Func</span>(<span class="params">obj</span>):</span>  <span class="comment"># 调用传入对象的showData方法</span></span><br><span class="line">    obj.showData()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">listA = [Animal(), People()]  <span class="comment"># 创建两个实例对象</span></span><br><span class="line"><span class="keyword">for</span> obj <span class="keyword">in</span> listA:  <span class="comment"># 枚举列表中的每个实例对象</span></span><br><span class="line">    Func(obj)  <span class="comment"># 将枚举的对象作为参数传入Func函数中</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/08/06/38da6b01d3be4cf57999d47ee860b17a.png" width="80%"/></li><li><p>总结：上面案例中obj就是鸭子类型的参数，因为无论该参数是哪个对象的实例只要其包含showData方法，就能成功调用。</p></li></ol><hr><p>不足之处，欢迎留言，会及时回复，及时更正！</p><p>创作不易，感谢支持！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://plushine.cn/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="python" scheme="https://plushine.cn/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/python/"/>
    
    
      <category term="python基础" scheme="https://plushine.cn/tags/python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Day07 面向对象基础（上）</title>
    <link href="https://plushine.cn/64309.html"/>
    <id>https://plushine.cn/64309.html</id>
    <published>2020-07-29T11:35:19.000Z</published>
    <updated>2020-09-18T05:46:51.617Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>本文章最初发布在 <a href="https://plushine.cn">XJHui’s Blog</a>，未经允许，任何人禁止转载！</p><p><font color="red" style="font-weight:700">注意：</font>最新修改版本已发布在 <a href="https://plushine.cn/64309.html">这里</a>，点击前往查看！</p><h1 id="编程思想"><a href="#编程思想" class="headerlink" title="编程思想"></a>编程思想</h1><ol><li>面向过程：根据业务逻辑从上到下写代码</li><li>函数式：封装到函数中便于以后调用，对比面向过程减少了代码量</li><li>面向对象（oop）：采用对象的概念建立模型</li></ol><h1 id="类和类的对象"><a href="#类和类的对象" class="headerlink" title="类和类的对象"></a>类和类的对象</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ol><li>类：是具有一组相同特征【属性】和行为【方法】的对象集合</li><li>对象：是实实在在的东西，也是类的实例化，具体化</li></ol><h2 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h2><p>类是对象的抽象化，对象是类的一个实例</p><h2 id="类的抽象"><a href="#类的抽象" class="headerlink" title="类的抽象"></a>类的抽象</h2><blockquote><p>案例1：小明开着宝马车去逛街</p></blockquote><ul><li>小明 -&gt; 人【类】<ul><li>类名：人</li><li>属性：年龄、身高等</li><li>方法：吃饭、睡觉等</li></ul></li><li>宝马车 -&gt; 车【类】<ul><li>类名：车</li><li>属性：颜色、排量等</li><li>方法：前进、倒车、加速等</li></ul></li></ul><blockquote><p>案例2：坦克大战中的类</p></blockquote><ul><li>坦克【类】<ul><li>类名：坦克</li><li>属性：血量</li><li>方法：发射子弹、移动等</li></ul></li><li>墙【类】<ul><li>类名：墙</li><li>属性：血量、类型</li><li>行为：阻挡</li></ul></li><li>子弹【类】<ul><li>类名：子弹</li><li>属性：威力</li><li>行为：移动</li></ul></li></ul><h1 id="定义类、创建对象"><a href="#定义类、创建对象" class="headerlink" title="定义类、创建对象"></a>定义类、创建对象</h1><h2 id="定义类"><a href="#定义类" class="headerlink" title="定义类"></a>定义类</h2><ol><li><p>格式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 类名:</span> <span class="comment"># 注意：类名使用大驼峰命名法（首字母大写），可以不加括号，后面会详细写</span></span><br><span class="line">属性</span><br><span class="line">方法 <span class="comment">#属性、方法的个数非定值，根据具体情况确定</span></span><br></pre></td></tr></table></figure></li><li><p>案例：定义人【类】</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span> <span class="comment"># 类名</span></span><br><span class="line">    name = <span class="string">&#x27;小张&#x27;</span> <span class="comment"># 属性</span></span><br><span class="line">    age = <span class="number">18</span></span><br><span class="line">    pos = <span class="string">&#x27;山东省&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span>(<span class="params">self</span>):</span>  <span class="comment"># 方法</span></span><br><span class="line">        print(<span class="string">&#x27;在吃饭呢！&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;在跑步呢！&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ol><h2 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h2><ol><li><p>格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对象名 = 类名()</span><br></pre></td></tr></table></figure></li><li><p>案例：创建一个人【类】的对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">perA = Person()</span><br></pre></td></tr></table></figure><ul><li><p>使用（pycharm工具下）：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/30/4f4239993b51eda3d6a9a489a4f6aca9.png" width="80%"/></li><li><p>调用类方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">perA.eat()  <span class="comment"># 调用Person类中的eat方法</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/30/474555b7de65effc5acccbba6b3d0284.png" width="80%"/></li><li><p>打印类属性：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">&quot;&#123;&#125;的年龄是：&#123;&#125;，住在：&#123;&#125;&quot;</span>.<span class="built_in">format</span>(perA.name, perA.age, perA.pos))  <span class="comment"># 输出类属性的值</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/30/5988faa46e1a2e2771271eb790e0a99d.png" width="80%"/></li></ul></li></ol><h1 id="实例方法、属性"><a href="#实例方法、属性" class="headerlink" title="实例方法、属性"></a>实例方法、属性</h1><h2 id="区别普通方法"><a href="#区别普通方法" class="headerlink" title="区别普通方法"></a>区别普通方法</h2><ol><li><p>普通方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Func</span>():</span>  <span class="comment"># 普通方法</span></span><br><span class="line">    print(<span class="string">&#x27;这是普通方法！&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p>实例方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    name = <span class="string">&#x27;小张&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span>(<span class="params">self</span>):</span>  <span class="comment"># 实例方法，定义在class中且有默认的参数self</span></span><br><span class="line">        print(<span class="string">&#x27;在吃饭呢！&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p>总结：</p><ul><li>【相同点】均使用def关键字定义</li><li>普通方法在class外部，实例方法在内部</li><li>实例方法默认参数为self可更改但不可省略</li><li>实例方法归属实例对象</li></ul></li></ol><h2 id="区别类属性"><a href="#区别类属性" class="headerlink" title="区别类属性"></a>区别类属性</h2><ol><li><p>类属性：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    name = <span class="string">&#x27;小张&#x27;</span>  <span class="comment"># 类属性</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;在吃饭呢！&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p>实例属性：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    name = <span class="string">&#x27;小张&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.color = <span class="string">&#x27;yellow&#x27;</span>  <span class="comment"># 实例属性，注意要用self引用</span></span><br><span class="line">        print(<span class="string">&#x27;皮肤颜色为&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(self.color))</span><br></pre></td></tr></table></figure></li><li><p>总结：</p><ul><li>都是定义在class内部</li><li>定义在实例方法里面的是实例属性，定义在实例方法外面的是类属性</li><li>定义实例属性时要用self引用（self.变量名，具体看2nd）</li></ul></li></ol><h1 id="init-方法"><a href="#init-方法" class="headerlink" title="__init__方法"></a>__init__方法</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><ul><li>python自带的内置函数具有特殊含义，使用双下划线包起来，又称【魔术方法】</li><li>是初始化方法，用来【定义实例属性】和【初始化数据】，在创建的时候自动调用（类似java中构造方法）</li><li>利用其【传参机制】可以使对象的创建更加简单、方便</li></ul><h2 id="init的使用"><a href="#init的使用" class="headerlink" title="init的使用"></a>init的使用</h2><ol><li><p>定义实例属性</p><ul><li><p>一般方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">perB = Person()</span><br><span class="line">perB.age = <span class="number">19</span>  <span class="comment"># 添加实例属性</span></span><br></pre></td></tr></table></figure></li><li><p>__init__：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    name = <span class="string">&#x27;小张&#x27;</span>  <span class="comment"># 类属性</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span>  <span class="comment"># 定义实例属性</span></span><br><span class="line">        self.age = <span class="number">19</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;在吃饭呢！&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p>总结：</p><ul><li>可以在创建对象后使用【类名.实例属性名】</li><li>也可以在 _<em>init_</em> 方法中使用【self.实例变量名】来定义实例属性</li></ul></li></ul></li><li><p>初始化数据</p><blockquote><p>可以用来初始化类属性的值</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    name = <span class="string">&#x27;&#x27;</span>  <span class="comment"># 类属性</span></span><br><span class="line">    age = <span class="number">0</span></span><br><span class="line">    pos = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span>  <span class="comment"># 定义实例属性</span></span><br><span class="line">        self.name = <span class="string">&#x27;小李&#x27;</span></span><br><span class="line">        self.age = <span class="number">20</span></span><br><span class="line">        self.pos = <span class="string">&#x27;河南省&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">perB = Person()</span><br><span class="line">print(perB.age)</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/30/238efa33d8188b9cabe89d9906eb255b.png" width="80%"/></li><li><p>传参机制</p><blockquote><p>通过传参实现在创建对象时给类属性赋值</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    name = <span class="string">&#x27;小李&#x27;</span>  <span class="comment"># 类属性</span></span><br><span class="line">    age = <span class="number">20</span></span><br><span class="line">    pos = <span class="string">&#x27;河南省&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age, pos</span>):</span>  <span class="comment"># 传参数</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.pos = pos</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">perB = Person(<span class="string">&#x27;小张&#x27;</span>, <span class="number">17</span>, <span class="string">&#x27;北京市&#x27;</span>)  <span class="comment"># 创建对象时将数据作为参数传递</span></span><br><span class="line">print(<span class="string">&#x27;&#123;&#125;的年龄是：&#123;&#125;，住在：&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(perB.name, perB.age, perB.pos))</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/30/3a4271db4bb04fd9d1cbfe3b693a68c3.png" width="80%"/></li></ol><h1 id="理解self"><a href="#理解self" class="headerlink" title="理解self"></a>理解self</h1><blockquote><p>实例方法都有一个默认参数self，其名称可更改</p></blockquote><h2 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h2><ul><li>self和实例对象指向同一个内存地址</li><li>self只有在定义实例方法的时候才有意义</li></ul><h2 id="实例对象传参"><a href="#实例对象传参" class="headerlink" title="实例对象传参"></a>实例对象传参</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    name = <span class="string">&#x27;小李&#x27;</span>  <span class="comment"># 类属性</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">showInfo</span>(<span class="params">self, sex</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;&#123;&#125;的性别是：&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(self.name, sex))  <span class="comment"># 注意：使用self引导的是类属性，不加self的是实例方法的参数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">perB = Person()</span><br><span class="line">perB.showInfo(<span class="string">&#x27;男&#x27;</span>)</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/30/f60c49fb46f575d89b223a6cf8e75b1b.png" width="80%"/><h1 id="魔术方法"><a href="#魔术方法" class="headerlink" title="魔术方法"></a>魔术方法</h1><h2 id="str"><a href="#str" class="headerlink" title="_str_"></a>_<em>str_</em></h2><blockquote><p>格式化输出对象信息</p></blockquote><ol><li><p>默认输出对象信息的格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    name = <span class="string">&#x27;小李&#x27;</span>  <span class="comment"># 类属性</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;在吃饭呀！&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">perB = Person()</span><br><span class="line">print(perB)</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/08/04/9b5af186bae4d149dbc97fb3db79cbbf.png" width="80%"/></li><li><p>使用__str__输出对象信息：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    name = <span class="string">&#x27;小李&#x27;</span>  <span class="comment"># 类属性</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;我的名字叫：&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(self.name)  <span class="comment"># 注意要通过return返回要打印的内容</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;在吃饭呀！&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">perB = Person()</span><br><span class="line">print(perB)</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/31/86b919abe79c13c1b2a8594308ba719a.png" width="80%"/></li></ol><h2 id="new"><a href="#new" class="headerlink" title="_new_"></a>_<em>new_</em></h2><blockquote><p>创建实例化对象</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    name = <span class="string">&#x27;&#x27;</span>  <span class="comment"># 类属性</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.name = <span class="string">&#x27;小张&#x27;</span></span><br><span class="line">        print(<span class="string">&#x27;执行---init---&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span>(<span class="params">cls, *args, **kwargs</span>):</span>  <span class="comment"># cls是class的缩写，但不需要人为传参</span></span><br><span class="line">        print(<span class="string">&#x27;执行---new---&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">object</span>.__new__(cls)  <span class="comment"># 一定要有返回值</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">perB = Person()</span><br><span class="line">print(<span class="string">&#x27;我是名字是：&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(perB.name))</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/31/142864fa7af98411be0fa71a7df7f5d8.png" width="80%"/><p>注意：</p><ul><li>new方法是创建实例对象必须要包含的，但若创建对象时不存在new方法，则会使用默认的new方法</li><li>创建实例对象时new方法通过【return】将创建的实例对象返回给init方法，所以【new方法】执行时间是早于【init方法】的</li></ul><h2 id="new和init区别"><a href="#new和init区别" class="headerlink" title="new和init区别"></a>new和init区别</h2><ul><li>new方法：类的实例化方法，使用时要【return】实例对象</li><li>init方法：定义实例属性、类属性的初始化</li><li>new方法执行时间早于init方法</li></ul><h1 id="双人对战游戏"><a href="#双人对战游戏" class="headerlink" title="双人对战游戏"></a>双人对战游戏</h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><ol><li><p>有两个人物：西门吹雪、叶孤城</p></li><li><p>属性:</p><ul><li><p>用户名：name</p></li><li><p>血量：hp</p></li></ul></li><li><p>方法：</p><ul><li>tong()：捅对方一刀,对方掉血10滴</li><li>kanren()：砍对方- 刀，对方掉血15滴</li><li>chiyao()：吃一颗药，补血10滴</li></ul></li><li><p>要求：每走一步打印一次人物状态</p></li></ol><h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><ol><li>两个人物可以抽象出一个【玩家类】创建两个【实例对象】</li><li>属性、方法</li><li>通过随机数来确定走哪一步</li></ol><h2 id="游戏代码"><a href="#游戏代码" class="headerlink" title="游戏代码"></a>游戏代码</h2><p>代码在 <a href="https://pasteme.cn/46142">这里</a>，感谢 <a href="https://pasteme.cn/">PasteMe</a>！</p><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/31/c6e9c481b00d90fa8deecbe0ddf8cf4f.png" width="80%"/><hr><p>不足之处，欢迎留言，会及时回复！</p><p>创作不易，感谢支持！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://plushine.cn/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="python" scheme="https://plushine.cn/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/python/"/>
    
    
      <category term="python基础" scheme="https://plushine.cn/tags/python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Day06 内置函数</title>
    <link href="https://plushine.cn/26153.html"/>
    <id>https://plushine.cn/26153.html</id>
    <published>2020-07-24T11:35:19.000Z</published>
    <updated>2020-09-23T03:52:18.514Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>本文章最初发布在 <a href="https://plushine.cn">XJHui’s Blog</a>，未经允许，任何人禁止转载！</p><p><font color="red" style="font-weight:700">注意：</font>最新修改版本已发布在 <a href="https://plushine.cn/26153.html">这里</a>，点击前往查看！</p><h1 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h1><ol><li><p>是什么？</p><p>为便于我们使用，python自带的一些函数（print …）</p></li><li><p>有什么？</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/19/efb260f938cb711be9f81f916fab3825.png" width="50%"/></li></ol><p>注意：更多内容可以到 <a href="https://docs.python.org/3/library/functions.html">这里</a> 查看！</p><h1 id="数学运算"><a href="#数学运算" class="headerlink" title="数学运算"></a>数学运算</h1><ol><li><p>绝对值函数（abs）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="built_in">abs</span>(<span class="number">-10</span>), <span class="built_in">abs</span>(<span class="number">10</span>))</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/19/3544944f19a378be58934a83a0c5bf8f.png" width="80%"/></li><li><p>取近似值（round）</p><ul><li><p>无位数限定：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="built_in">round</span>(<span class="number">3.5</span>))</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/19/b7d120b1895351d54db49d6e7bcaca57.png" width="80%"/><p>注意：无位数限定时默认取整。</p></li><li><p>位数限定：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="built_in">round</span>(<span class="number">3.555</span>, <span class="number">2</span>))</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/19/a22087f72c990061de064e06b5039706.png" width="80%"/></li></ul></li><li><p>求次幂（pow）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="built_in">pow</span>(<span class="number">2</span>, <span class="number">3</span>)) <span class="comment">#方法一</span></span><br><span class="line">print(<span class="number">2</span> ** <span class="number">3</span>) <span class="comment">#放法二</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/19/af2a3b3cf78b0d9f4fefb4c501abe5cf.png" width="80%"/></li><li><p>求最大、小值（max、min）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="built_in">max</span>([<span class="number">10</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>])) <span class="comment">#从单个列表中选出最大值</span></span><br><span class="line">print(<span class="built_in">max</span>(<span class="number">10</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>)) <span class="comment">#从多个数中选出最大值</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/19/aae0f6a9a0237226412c8dee453f2e16.png" width="80%"/><p>如果是多个列表怎么比较？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="built_in">max</span>([<span class="number">10</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>], [<span class="number">10</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>])) <span class="comment">#min同理</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/27/1810b7aa226f8898ab7d7c35924fa4ee.png" width="80%"/><p>说明：多个列表如何比较？</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/19/f7837bc93241ba491ad0cc10c1c7b578.png" width="80%"/></li><li><p>求和（sum）</p><ul><li><p>多值、可迭代对象：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="built_in">sum</span>(<span class="built_in">range</span>(<span class="number">4</span>)))</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/19/8fd52e6d0c4840318d0ed0e9f0e03d86.png" width="80%"/></li><li><p>设置参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="built_in">sum</span>(<span class="built_in">range</span>(<span class="number">4</span>), <span class="number">4</span>)) <span class="comment">#先求和再与参数相加</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/19/07dc6703f1b00da099e77425d4ac8ca7.png" width="80%"/></li></ul></li><li><p>eval函数</p><p>不做讲解，点击 <a href="https://blog.csdn.net/liuchunming033/article/details/87643041">这里</a> 查看详细说明</p></li></ol><h1 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h1><ol><li><p>int()、float()、str()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">strA = <span class="string">&#x27;10&#x27;</span>  <span class="comment"># 定义字符型的变量</span></span><br><span class="line">print(<span class="built_in">type</span>(strA))  <span class="comment"># 打印变量类型</span></span><br><span class="line">intA = <span class="built_in">int</span>(strA)  <span class="comment"># 使用类型转换函数 int()</span></span><br><span class="line">print(intA, <span class="built_in">type</span>(intA))  <span class="comment"># 输出转换后的变量值与类型</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/27/786893c10318260480a1ba1daf541c23.png" width="80%"/><p>注意：其余类型转换函数使用方法相似，不再赘述。</p></li><li><p>bin()、hex()</p><blockquote><p>分别获取对应值的二、十六进制</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="built_in">bin</span>(<span class="number">10</span>)) <span class="comment"># 二进制为例，十六进制同理</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/27/b89ecaf75d9bac5c18d2a070f4ee1cd5.png" width="80%"/><p>验证正确性：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/27/5b27603759ce8efae2609a4a6ec2be07.png" width="80%"/><p>注意：十六进制以0x开头</p></li><li><p>list()、tuple()</p><blockquote><p>元组与列表互相转换</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tupleA = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)  <span class="comment"># 定义一个元组</span></span><br><span class="line">print(tupleA, <span class="built_in">type</span>(tupleA))  <span class="comment"># 打印元组及其类型</span></span><br><span class="line">listA = <span class="built_in">list</span>(tupleA)  <span class="comment"># 使用list()将元组转换为列表类型</span></span><br><span class="line">print(listA, <span class="built_in">type</span>(listA))  <span class="comment"># 打印转换后的变量值和类型</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/27/20c6ef3dbce52d13ce8075fc6d5e6337.png" width="80%"/><p>注意：tuple()的使用方法类似，不在赘述。</p></li><li><p>dict()</p><blockquote><p>生成字典（有特定的生成规则）</p></blockquote><ul><li><p>创建一个空字典</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dictA = <span class="built_in">dict</span>()</span><br><span class="line">print(<span class="built_in">type</span>(dictA))</span><br><span class="line">dictA[<span class="string">&#x27;name&#x27;</span>] = <span class="string">&#x27;小明&#x27;</span></span><br><span class="line">dictA[<span class="string">&#x27;age&#x27;</span>] = <span class="number">18</span></span><br><span class="line">print(dictA)</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/27/3a7773e3422dd72246214e78e3068edd.png" width="80%"/></li><li><p>创建一个带有键值对的字典：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dictA = <span class="built_in">dict</span>(name=<span class="string">&#x27;小明&#x27;</span>, age=<span class="number">18</span>)</span><br><span class="line">print(dictA, <span class="built_in">type</span>(dictA))</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/27/3769afc13862cac252551db4dfd0f56f.png" width="80%"/></li></ul></li><li><p>bytes()</p><blockquote><p>转换为字节数组</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="built_in">bytes</span>(<span class="string">&#x27;你好呀！&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>))</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/27/63d48ab16ee424ebaf40b4629e391f92.png" width="80%"/></li></ol><h1 id="序列操作"><a href="#序列操作" class="headerlink" title="序列操作"></a>序列操作</h1><blockquote><p>对字符串、元组、列表的操作</p></blockquote><ol><li><p>all()</p><blockquote><p>当元组、列表中仅包含True值时返回True，否则返回False（包含0、空、False），类似逻辑运算符中的 and</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="built_in">all</span>([]), <span class="built_in">all</span>(()))  <span class="comment"># 判断空列表、元组</span></span><br><span class="line">print(<span class="built_in">all</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="literal">True</span>]), <span class="built_in">all</span>((<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="literal">True</span>)))  <span class="comment"># 不包含0、空、False</span></span><br><span class="line">print(<span class="built_in">all</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>]), <span class="built_in">all</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="literal">False</span>]))  <span class="comment"># 列表中包含0、空、False</span></span><br><span class="line">print(<span class="built_in">all</span>((<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>)), <span class="built_in">all</span>((<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="literal">False</span>)))  <span class="comment"># 元组中包含0、空、False</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/28/8451eaf241f28503ea70ec2a573dd2f5.png" width="80%"/><p>注意：当元组、列表为空时使用all()返回值均为True。</p></li><li><p>any()</p><blockquote><p>当元组、列表中包含任一True值时返回True，否则返回False（包含0、空、False），类似逻辑运算符中的 or</p></blockquote><p>具体内容与all()的使用类似，不在赘述</p></li><li><p>sorted()</p><blockquote><p>对所有可迭代对象排序</p></blockquote><ul><li><p>区别sort()：</p><ul><li>sort仅适用与列表，sorted使用与所有可迭代对象</li><li>sort是在原列表基础上进行的排序，sorted会新建一个</li><li>sorted无论排序哪种类型的变量，返回值均为list</li></ul></li><li><p>使用：</p><ul><li><p>sort()：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">listA = [<span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">14</span>, <span class="number">324</span>, <span class="number">3</span>]</span><br><span class="line">listA.sort()  <span class="comment"># 默认升序排列，使用reverse=True可实现降序排列</span></span><br><span class="line">print(listA)</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/28/ca6c9cc24655796a4dd0ebbb542c64f6.png" width="80%"/><p>注意：可以看出sort()是在原列表的基础上实现的</p></li><li><p>sorted()：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">listA = [<span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">14</span>, <span class="number">324</span>, <span class="number">3</span>]</span><br><span class="line">listB = <span class="built_in">sorted</span>(listA, reverse=<span class="literal">True</span>)  <span class="comment"># reverse默认等于False（升序），使用reverse=True可实现降序排列</span></span><br><span class="line">print(listB)</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/28/6fc3aedee6bd39f3fb6822978345a803.png" width="80%"/><p>注意：可以看出sorted()是在新列表上实现的，元组类型的数据使用方法类似，不在赘述</p></li></ul></li></ul></li><li><p>reverse()</p><blockquote><p>对列表中的数据进行反转操作</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">listA = [<span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">14</span>, <span class="number">324</span>, <span class="number">3</span>]</span><br><span class="line">listA.reverse()</span><br><span class="line">print(listA)</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/28/31027e3d1f33c756f5b52bafd9770066.png" width="80%"/></li><li><p>range()</p><blockquote><p>创建一个整数列表，一般用在for循环中</p></blockquote><p>参数：</p><ul><li>start：起点值</li><li>stop：终点值（不包含）</li><li>step：步长，默认为1</li></ul><p>案例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>, <span class="number">2</span>): <span class="comment">#range(start,stop,step)</span></span><br><span class="line">    print(i, end=<span class="string">&#x27; &#x27;</span>)</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/28/11c1804f6599f7f0c4fcac956570bfb7.png" width="80%"/></li><li><p>zip()</p><blockquote><p>压缩多个可迭代对象</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">listA = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]  <span class="comment"># 定义两初始数组</span></span><br><span class="line">listB = [<span class="string">&#x27;小明&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">19</span>]</span><br><span class="line">zipA = <span class="built_in">zip</span>(listA, listB)  <span class="comment"># 使用zip压缩，列表个数任意</span></span><br><span class="line">print(zipA)  <span class="comment"># 直接打印压缩后生成的可迭代对象</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> zipA:  <span class="comment"># 使用for循环输出可迭代对象的值</span></span><br><span class="line">    print(i, end=<span class="string">&#x27; &#x27;</span>)</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/28/0bf26cdf0ad939bf7fcab897404ebbb4.png" width="80%"/><p>注意：</p><ul><li><p>原始列表压缩后生成一个可迭代对象</p></li><li><p>该对象包含多个元组，每个元组均由原始列表中的值构造而成</p></li><li><p>构造方法为如下图：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/28/5be2143238bb51338adacd4984973c3e.png" width="50%"/></li><li><p>假设两个列表中元素数目分别为num1、num2，则压缩后的元组数目为min(num1,num2)，多个列表时类似</p></li></ul><p>案例：创建函数实现书本信息（编号、书名、位置）的录入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">addInfo</span>():</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    录入书本信息（id、name、pos）</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = <span class="built_in">input</span>(<span class="string">&#x27;id：&#x27;</span>)  <span class="comment"># 书本编号</span></span><br><span class="line">    name = <span class="built_in">input</span>(<span class="string">&#x27;name：&#x27;</span>)  <span class="comment"># 书本名称</span></span><br><span class="line">    pos = <span class="built_in">input</span>(<span class="string">&#x27;pos：&#x27;</span>)  <span class="comment"># 书本存放位置</span></span><br><span class="line"></span><br><span class="line">    idList = <span class="built_in">id</span>.split(<span class="string">&#x27; &#x27;</span>)  <span class="comment"># 通过split函数将数据拆分后存入列表便于zip压缩</span></span><br><span class="line">    nameList = name.split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    posList = pos.split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"></span><br><span class="line">    bookZip = <span class="built_in">zip</span>(idList, nameList, posList)  <span class="comment"># 多个列表数据纵向合并用到zip</span></span><br><span class="line"></span><br><span class="line">    bookList = []  <span class="comment"># 存放书本信息</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> bookItem <span class="keyword">in</span> bookZip:  <span class="comment"># 遍历压缩后的数据</span></span><br><span class="line">        bookDict = &#123;<span class="string">&#x27;id&#x27;</span>: bookItem[<span class="number">0</span>], <span class="string">&#x27;name&#x27;</span>: bookItem[<span class="number">1</span>], <span class="string">&#x27;pos&#x27;</span>: bookItem[<span class="number">2</span>]&#125;  <span class="comment"># 初始化字典并将获取的信息存入（初始化字典时key要使用引号）</span></span><br><span class="line">        bookList.append(bookDict)  <span class="comment"># 每个字典都是一本书的信息，将这些信息全部存入bookList中</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> bookList:  <span class="comment"># 打印所有书本信息</span></span><br><span class="line">        print(i)</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">addInfo()</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/28/5cb30b850e82ff929a8da5e8535e1972.png" width="80%"/><p>知识点：</p><ul><li>列表数据纵向合并用到zip</li><li>字典创建时可赋值，赋值时key要加引号</li><li>列表嵌套字典，展示数据更清晰</li></ul></li><li><p>enumerate()</p><blockquote><p>添加下标（列表、字典等），可自定义起始值</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">listA = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br><span class="line">print(<span class="built_in">list</span>(<span class="built_in">enumerate</span>(listA, <span class="number">6</span>)))</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/28/ce7a06b2165a2a42b387a35c6cda7c01.png" width="80%"/></li></ol><h1 id="Set集合"><a href="#Set集合" class="headerlink" title="Set集合"></a>Set集合</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ol><li>是什么？无序且不重复的元素集合</li><li>特点：<ul><li>无序、互异</li><li>不支持切片、索引</li><li>类似于字典但仅有key无value</li></ul></li></ol><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ol><li><p>创建集合</p><ul><li><p>方法1：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">setA = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">print(<span class="built_in">type</span>(setA))</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/29/c38255845aba2b81db519e06b4f95aa0.png" width="80%"/></li><li><p>方法2：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">listA = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">setA = <span class="built_in">set</span>(listA)</span><br><span class="line">print(setA, <span class="built_in">type</span>(setA))</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/29/dd5717250e28fa6a52d244b161a74e52.png" width="80%"/><p>注意：可以通过对list进行强制转换来创建一个集合。</p></li></ul></li><li><p>添加操作：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">setA = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">setA.add(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">print(setA)</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/29/31fba6825b1c249b4b91d2bceaa12a0d.png" width="80%"/></li><li><p>清空操作：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">setA = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">setA.clear()</span><br><span class="line">print(setA)</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/29/c4a185d4f8e1ea88e75160cfd2e77b92.png" width="80%"/></li><li><p>差、并、交集</p><p>概念：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/29/44485742f8c7fdeb76ad8af0c4576978.png" width="80%"/><p>案例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">setA = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">setB = &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">print(setA - setB, setA.difference(setB))  <span class="comment"># 差集</span></span><br><span class="line">print(setA &amp; setB, setA.intersection(setB))  <span class="comment"># 交集</span></span><br><span class="line">print(setA | setB, setA.union(setB))  <span class="comment"># 并集</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/29/0b3d5add9a493e3559f0127dda11b2ee.png" width="80%"/></li><li><p>移除指定元素：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">setA = &#123;<span class="number">4</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>&#125;</span><br><span class="line">setA.discard(<span class="number">4</span>)</span><br><span class="line">print(setA)</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/29/a9014d9d28618ef7c0d9a002dd6d0ffe.png" width="80%"/></li><li><p>合并集合：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">setA = &#123;<span class="number">4</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>&#125;</span><br><span class="line">setB = &#123;<span class="number">1</span>, <span class="number">6</span>&#125;</span><br><span class="line">setA.update(setB)</span><br><span class="line">print(setA)</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/29/b9ac58d6f7562e73c3f1c4fbecb3a58e.png" width="80%"/><p>注意：集合合并会自动去重</p></li></ol><h1 id="思路补充"><a href="#思路补充" class="headerlink" title="思路补充"></a>思路补充</h1><blockquote><p>做题时遇到的好的想法和思路</p></blockquote><ol><li><p>函数很方便</p></li><li><p>函数返回元组或其它类型的数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> (<span class="built_in">sum</span>,<span class="number">1</span>+<span class="built_in">sum</span>) <span class="comment">#再根据下标使用</span></span><br></pre></td></tr></table></figure></li><li><p>列表移除指定元素：.remove()</p></li><li><p>判断是否在列表中 in / not in</p></li></ol><hr><p>不足之处，欢迎留言，会及时回复！</p><p>创作不易，感谢支持！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://plushine.cn/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="python" scheme="https://plushine.cn/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/python/"/>
    
    
      <category term="python基础" scheme="https://plushine.cn/tags/python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Day05 函数（中）</title>
    <link href="https://plushine.cn/17857.html"/>
    <id>https://plushine.cn/17857.html</id>
    <published>2020-07-18T01:37:54.000Z</published>
    <updated>2020-09-18T05:46:48.677Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><h2 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h2><ol><li><p>简单使用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">setName</span>():</span></span><br><span class="line">    name = <span class="string">&#x27;peter&#x27;</span> <span class="comment">#局部变量</span></span><br><span class="line">    print(name)</span><br><span class="line"></span><br><span class="line">setName() <span class="comment">#调用函数</span></span><br></pre></td></tr></table></figure></li><li><p>作用：临时保存数据，需要在函数中定义来进行存储。</p></li><li><p>特点：</p><ul><li><p>在函数内部定义的变量，作用域仅局限在函数内部</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">setName</span>():</span></span><br><span class="line">    name = <span class="string">&#x27;peter&#x27;</span> <span class="comment">#局部变量</span></span><br><span class="line"></span><br><span class="line">print(name) <span class="comment">#打印name</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/18/659ecb83e9c842ad37a63121d56a7665.png" width="80%"/></li><li><p>不同的函数可以定义相同名称的局部变量，不会产生影响</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">setName1</span>():</span></span><br><span class="line">    name = <span class="string">&#x27;peter&#x27;</span></span><br><span class="line">    print(name)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">setName2</span>():</span></span><br><span class="line">    name = <span class="string">&#x27;Bob&#x27;</span></span><br><span class="line">    print(name)</span><br><span class="line"></span><br><span class="line">setName1()</span><br><span class="line">setName2()</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/18/1de1e861824f9189e6e9fca1b7e350c2.png" width="80%"/></li></ul></li></ol><h2 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h2><ol><li><p>使用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">10</span> <span class="comment">#全局变量</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">setName1</span>():</span></span><br><span class="line">    print(age)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">setName2</span>():</span></span><br><span class="line">    print(age)</span><br><span class="line"></span><br><span class="line">setName1()</span><br><span class="line">setName2()</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/18/8f8e498c4dc6f4caa13aa80c0c9609ea.png" width="80%"/></li><li><p>区别局部变量：作用域的范围不同，全局变量在整个文件当中均可使用</p></li><li><p>易错：</p><ul><li><p>冲突时：局部变量优先级高于全局变量</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">setName1</span>():</span></span><br><span class="line">    age = <span class="number">9</span></span><br><span class="line">    print(age)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">setName2</span>():</span></span><br><span class="line">    print(age)</span><br><span class="line"></span><br><span class="line">setName1()</span><br><span class="line">setName2()</span><br></pre></td></tr></table></figure><p>  运行结果：</p>  <img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/18/9815571d00cf1b2b3a94867da8c58996.png" width="80%"/></li><li><p>函数中修改全局变量：</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">setAge</span>():</span></span><br><span class="line">    age = <span class="number">5</span> <span class="comment">#错误做法，这样只是定义了一个局部变量</span></span><br><span class="line"></span><br><span class="line">setAge()</span><br><span class="line">print(age)</span><br></pre></td></tr></table></figure><p>  运行结果：</p>  <img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/18/44c6b901d2f9cb5b9b1a54703f0ca04e.png" width="80%"/>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">10</span> </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">setAge</span>():</span></span><br><span class="line">    <span class="keyword">global</span> age <span class="comment">#一定要先定义后赋值，具体原因不知</span></span><br><span class="line">    age = <span class="number">5</span></span><br><span class="line"></span><br><span class="line">setAge()</span><br><span class="line">print(age)</span><br></pre></td></tr></table></figure><p>  运行结果：</p>  <img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/18/d83274bc28389b1f5beea5a428e3dc68.png" width="80%"/><p>  注意：</p><ul><li>若写成 <code>global age = 5</code> 是错误的，一定要先定义后赋值，具体原因不知</li><li>上面的代码把最开始的age=10去掉也能成功运行</li></ul></li></ul></li></ol><h1 id="引用传值"><a href="#引用传值" class="headerlink" title="引用传值"></a>引用传值</h1><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><ol><li>不可变数据：整型、字符串、元组</li><li>可变数据：列表、字典</li></ol><h2 id="传不可变值"><a href="#传不可变值" class="headerlink" title="传不可变值"></a>传不可变值</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">5</span> </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fonc</span>(<span class="params">age</span>):</span> <span class="comment">#传不可变数据类型的值</span></span><br><span class="line">    age = <span class="number">4</span></span><br><span class="line"></span><br><span class="line">fonc(age)</span><br><span class="line">print(age)</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/18/024dfb6479fdb1c5fbb17dd933a292c1.png" width="80%"/><h2 id="传可变值"><a href="#传可变值" class="headerlink" title="传可变值"></a>传可变值</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span> = []</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fonc</span>(<span class="params"><span class="built_in">list</span></span>):</span></span><br><span class="line">    <span class="built_in">list</span>.append(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">fonc(<span class="built_in">list</span>)</span><br><span class="line">print(<span class="built_in">list</span>)</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/18/e1c471b437ab8d80579a35410e330047.png" width="80%"/><h1 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h1><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><ol><li>语法：<code>lambda 参数1,参数2:表达式</code></li><li>特点：<ul><li>与标准函数相比，使用起来更加简洁</li><li>自带return，返回的就是表达式的结果</li></ul></li><li>缺点：<ul><li>复杂逻辑无法实现</li></ul></li></ol><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ol><li><p>求和运算</p><p>匿名函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Sum = <span class="keyword">lambda</span> x, y: x + y</span><br><span class="line">print(Sum(<span class="number">1</span>, <span class="number">2</span>))</span><br></pre></td></tr></table></figure><p>标准函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Sum</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line"></span><br><span class="line">print(Sum(<span class="number">1</span>, <span class="number">2</span>))</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/18/e8f9f6296b4d153b8f3c037b735dbd5c.png" width="80%"/><p>注意：上面代码可以更简洁为 <code>print((lambda x, y: x + y)(1, 2))</code></p></li><li><p>简单判断：</p><p>补充： <code>print(&#39;左边大&#39; if 3 &gt; 2 else &#39;右边大&#39;)</code></p><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/18/9d81f95edc44cc7e2a0e58403dc70811.png" width="80%"/><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Judge = <span class="keyword">lambda</span> x, y: <span class="string">&#x27;左边大&#x27;</span> <span class="keyword">if</span> x &gt; y <span class="keyword">else</span> <span class="string">&#x27;右边大&#x27;</span></span><br><span class="line">print(Judge(<span class="number">1</span>, <span class="number">2</span>))</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/18/7622932b76672dc00ee4f00603da8480.png" width="80%"/><p>同样可以简写为：<code>print((lambda x, y: &#39;左边大&#39; if x &gt; y else &#39;右边大&#39;)(1, 2))</code></p></li></ol><h1 id="递归函数"><a href="#递归函数" class="headerlink" title="递归函数"></a>递归函数</h1><ol><li><p>特点：</p><ul><li>有递归结束判断</li><li>自己调用自己</li></ul></li><li><p>使用：</p><ul><li><p>普通求阶乘：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">diGui</span>(<span class="params">x</span>):</span></span><br><span class="line">    res = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, x + <span class="number">1</span>):</span><br><span class="line">        res *= i</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">print(diGui(<span class="number">5</span>))</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/18/66ea38335fbbfa6a59c70259847cb9e9.png" width="80%"/></li><li><p>递归求阶乘：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">diGui</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">if</span> x == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> x * diGui(x - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">print(diGui(<span class="number">5</span>))</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/18/5718656bf1b08866e80cba7454e80487.png" width="80%"/></li><li><p>递归输出给定目录子文件名称：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">findFile</span>(<span class="params">file_path</span>):</span>  <span class="comment"># 输出给定路径下所有文件名称</span></span><br><span class="line">    lists = os.listdir(file_path)  <span class="comment"># 将所有文件（夹）名称存入列表</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> lists:</span><br><span class="line">        full_path = os.path.join(file_path, item)  <span class="comment"># 获取完整路径名称</span></span><br><span class="line">        <span class="keyword">if</span> os.path.isdir(full_path):  <span class="comment"># 判断</span></span><br><span class="line">            findFile(full_path)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(item)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">findFile(<span class="string">&#x27;D:\\code&#x27;</span>)</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/18/d39f563befc7f5ce9a11d3629a9ef610.png" width="80%"/></li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://plushine.cn/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="python" scheme="https://plushine.cn/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/python/"/>
    
    
      <category term="python基础" scheme="https://plushine.cn/tags/python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Day04 函数（上）</title>
    <link href="https://plushine.cn/54935.html"/>
    <id>https://plushine.cn/54935.html</id>
    <published>2020-07-17T08:21:53.000Z</published>
    <updated>2020-09-18T05:46:46.982Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="初始函数"><a href="#初始函数" class="headerlink" title="初始函数"></a>初始函数</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ol><li><p>是什么？</p><p>一系列python语句的组合，可以在程序中运行一次或多次，完成具体、独立的功能。</p></li><li><p>为什么？</p><p>整体结构清晰，代码复用最大化，代码冗余最小化，问题局部化。</p></li></ol><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><ol><li><p>语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> 函数名():</span></span><br><span class="line">    函数体</span><br></pre></td></tr></table></figure></li><li><p>案例：输出小明的信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printInfo</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;姓名：&#123;&#125;，性别：&#123;&#125;，年龄：&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="string">&quot;小明&quot;</span>, <span class="string">&quot;男&quot;</span>, <span class="string">&quot;20&quot;</span>))</span><br></pre></td></tr></table></figure></li></ol><h2 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h2><ol><li><p>语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">函数名()</span><br></pre></td></tr></table></figure></li><li><p>案例：调用上例中创建的printInfo函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printInfo</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;姓名：&#123;&#125;，性别：&#123;&#125;，年龄：&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="string">&quot;小明&quot;</span>, <span class="string">&quot;男&quot;</span>, <span class="string">&quot;20&quot;</span>))</span><br><span class="line">printInfo() <span class="comment">#调用已创建的 printInfo 函数</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/7c2b955bf534f6c673fa3be6c25d444c.png" width="60%"/><p>注意：</p><ul><li><p>函数必须先定义才能被调用</p></li><li><p>函数注释的写法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printInfo</span>():</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    输出小明的信息</span></span><br><span class="line"><span class="string">    :return: </span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    print(<span class="string">&#x27;姓名：&#123;&#125;，性别：&#123;&#125;，年龄：&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="string">&quot;小明&quot;</span>, <span class="string">&quot;男&quot;</span>, <span class="string">&quot;20&quot;</span>))</span><br></pre></td></tr></table></figure><p>调用函数时，按下ctrl并把鼠标放在函数名上会有如下提示：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/a7828489bf08beb76151474be6fc7ab3.png" width="60%"/></li></ul></li></ol><h1 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h1><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><ul><li>必选参数</li><li>默认参数</li><li>不定长参数</li><li>关键字参数</li></ul><h2 id="必选参数"><a href="#必选参数" class="headerlink" title="必选参数"></a>必选参数</h2><blockquote><p>调用时必须要给参数值</p></blockquote><p>案例：编写两数求和函数，输出运算结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getSum</span>(<span class="params">numA, numB</span>):</span></span><br><span class="line">    print(numA + numB)</span><br></pre></td></tr></table></figure><ul><li><p>传参调用：</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getSum(<span class="number">3</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>  运行结果：</p>  <img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/d6dc88cc519abca4fe390f531fe1aba4.png" width="60%"/></li><li><p>不传参调用：</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getSum()</span><br></pre></td></tr></table></figure><p>  运行结果：</p>  <img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/d1fce89a621e1483286eafd097cab16f.png" width="60%"/></li></ul><h2 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h2><blockquote><p>缺省参数，无参数时使用默认值</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getSum</span>(<span class="params">a=<span class="number">10</span>, b=<span class="number">20</span></span>):</span></span><br><span class="line">    print(a + b)</span><br></pre></td></tr></table></figure><ul><li><p>不传参调用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getSum()</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/9d5ec3bbc772ecb17a8cf0b977304c21.png" width="60%"/></li><li><p>传参数调用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getSum(<span class="number">1</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/4050da669fad59be36bafa9b5053cec7.png" width="60%"/></li><li><p>易错案例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getSum</span>(<span class="params">a=<span class="number">20</span>, b</span>):</span></span><br><span class="line">    print(a + b)</span><br><span class="line"></span><br><span class="line">getSum(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/49c4e77821c2899f75e2413c9a26350a.png" width="60%"/><p>分析：实参个数&lt;形参个数时，参数会从左向右依次分配，所以 a=1，但由于 b 没有默认值所以会报错。</p></li></ul><p>注意：从上面的案例也能看出，默认（缺省）参数始终存在于参数列表中的尾部，否则没意义。</p><h2 id="不定长参数"><a href="#不定长参数" class="headerlink" title="不定长参数"></a>不定长参数</h2><blockquote><p>当参数个数不确定时使用</p></blockquote><ul><li><p>输出单个参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getResult</span>(<span class="params">*args</span>):</span></span><br><span class="line">    print(args)</span><br><span class="line">    </span><br><span class="line">getResult(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/137149fb826365f7051f8d24b98de6a8.png" width="60%"/></li><li><p>多个参数求和：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getResult</span>(<span class="params">*args</span>):</span></span><br><span class="line">    <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> args:</span><br><span class="line">        <span class="built_in">sum</span> += item</span><br><span class="line">    print(<span class="built_in">sum</span>)</span><br><span class="line"></span><br><span class="line">getResult(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/af6ab58298a6c2bd4022a3e9ea99c9d8.png" width="60%"/></li></ul><h2 id="关键字参数"><a href="#关键字参数" class="headerlink" title="关键字参数"></a>关键字参数</h2><blockquote><p>接受字典类型的参数</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span>(<span class="params">**kwargs</span>):</span></span><br><span class="line">    print(kwargs)</span><br></pre></td></tr></table></figure><ul><li><p>传参方法1：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dictA = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;xiaoming&#x27;</span>&#125;</span><br><span class="line">info(**dictA) <span class="comment"># 注意 **</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/505faaf5cbcc957ba2de73b9af59dd9f.png" width="60%"/></li><li><p>传参方法2：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">info(name=<span class="string">&quot;xiaoming&quot;</span>) <span class="comment"># 注意：key不可以加引号，否则报错</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/418c15f8b33462e93791a996b03e0069.png" width="60%"/></li></ul><h1 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h1><blockquote><p>函数执行完以后会返回一个对象，使用return即可实现，否则返回none</p></blockquote><p>注意：</p><ul><li>在一个函数体中可以出现多个return，但只能选择一个返回</li><li>只要执行了return，则其后面的代码均不再执行</li></ul><h2 id="单个数据"><a href="#单个数据" class="headerlink" title="单个数据"></a>单个数据</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Sum</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    <span class="built_in">sum</span> = a + b</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span></span><br><span class="line"></span><br><span class="line">num = Sum(<span class="number">1</span>, <span class="number">2</span>) <span class="comment">#num接受返回值</span></span><br><span class="line">print(num)</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/4460c4f40aa029d22fc71866f52fe061.png" width="60%"/><h2 id="多个数据"><a href="#多个数据" class="headerlink" title="多个数据"></a>多个数据</h2><blockquote><p>返回列表、元组、字典</p></blockquote><ol><li><p>返回列表：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Sum</span>():</span></span><br><span class="line">    <span class="keyword">return</span> [<span class="string">&#x27;sda&#x27;</span>, <span class="number">1</span>, <span class="number">0.5</span>] <span class="comment">#返回列表类型的数据</span></span><br><span class="line"></span><br><span class="line">num = Sum()  <span class="comment"># num接受返回值</span></span><br><span class="line">print(<span class="built_in">type</span>(num))</span><br><span class="line">print(num)</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/901f2ed79641e274da9966aa9470b0eb.png" width="60%"/></li><li><p>返回元组：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Sum</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span> <span class="comment">#返回元组类型的数据</span></span><br><span class="line"></span><br><span class="line">num = Sum()  <span class="comment"># num接受返回值</span></span><br><span class="line">print(<span class="built_in">type</span>(num))</span><br><span class="line">print(num)</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/a36e12568343db11dc9d490145cf900a.png" width="60%"/></li><li><p>返回字典：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Sum</span>():</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;菜徐坤&quot;</span>&#125; <span class="comment">#返回字典类型的数据</span></span><br><span class="line"></span><br><span class="line">num = Sum()  <span class="comment"># num接受返回值</span></span><br><span class="line">print(<span class="built_in">type</span>(num))</span><br><span class="line">print(num)</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/7245b1596d1eb34a9e14a1849512b183.png" width="60%"/></li></ol><h1 id="嵌套调用"><a href="#嵌套调用" class="headerlink" title="嵌套调用"></a>嵌套调用</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ddd1</span>():</span></span><br><span class="line">    print(<span class="string">&quot;---------ddd1 start------&quot;</span>)</span><br><span class="line">    print(<span class="string">&quot;---------在执行代码------&quot;</span>)</span><br><span class="line">    print(<span class="string">&quot;---------ddd1 end------&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ddd2</span>():</span></span><br><span class="line">    print(<span class="string">&quot;---------ddd2 start------&quot;</span>)</span><br><span class="line">    ddd1()</span><br><span class="line">    print(<span class="string">&quot;---------ddd2 end------&quot;</span>)</span><br><span class="line"></span><br><span class="line">ddd2()</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/09d3e39264b9174dbc352c1a83898459.png" data-lazy-src="https://cdn.jsdelivr.net/gh/xingjiahui/CDN@latest/2020/07/17/84607d57c8ecbc6de11860c297888bb5.png" width="60%"/><p>注意：函数一定要先定义再调用</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://plushine.cn/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="python" scheme="https://plushine.cn/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/python/"/>
    
    
      <category term="python基础" scheme="https://plushine.cn/tags/python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
</feed>
